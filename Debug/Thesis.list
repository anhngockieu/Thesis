
Thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014af0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  08014c80  08014c80  00024c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015824  08015824  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  08015824  08015824  00025824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801582c  0801582c  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801582c  0801582c  0002582c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015834  08015834  00025834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08015838  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c8c  20000138  0801596c  00030138  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008dc4  0801596c  00038dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c71  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000427a  00000000  00000000  00052dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a30  00000000  00000000  00057050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018a0  00000000  00000000  00058a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027517  00000000  00000000  0005a320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000146ed  00000000  00000000  00081837  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3212  00000000  00000000  00095f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bd4  00000000  00000000  001791b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000138 	.word	0x20000138
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014c68 	.word	0x08014c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	08014c68 	.word	0x08014c68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <robot_motor_init>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim5;
extern I2C_HandleTypeDef hi2c1;
extern MPU6050_t MPU6050;
void robot_motor_init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	servo_init();
 8000f4c:	f00a fb36 	bl	800b5bc <servo_init>
	//write_servo(0.5,0,0);
	//write_servo(0.5,0,1);

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000f50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <robot_motor_init+0x18>)
 8000f56:	f00c ff72 	bl	800de3e <HAL_GPIO_TogglePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40020c00 	.word	0x40020c00

08000f64 <robot_imu_init>:


void robot_imu_init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	Imu_init();
 8000f68:	f008 fe7a 	bl	8009c60 <Imu_init>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <robot_imu_init+0x18>)
 8000f72:	f00c ff64 	bl	800de3e <HAL_GPIO_TogglePin>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020c00 	.word	0x40020c00

08000f80 <robot_imu_get_accel>:


void robot_imu_get_accel(float accel[3])
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	Get_acc(&accel[0],&accel[1],&accel[2]);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	1d19      	adds	r1, r3, #4
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	461a      	mov	r2, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f008 fe8e 	bl	8009cb4 <Get_acc>


}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <robot_imu_get_gyro>:


void robot_imu_get_gyro(float gyro[3])
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	Get_gyro(&gyro[0],&gyro[1],&gyro[2]);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	1d19      	adds	r1, r3, #4
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3308      	adds	r3, #8
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f008 feae 	bl	8009d14 <Get_gyro>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <robot_imu_get_quat>:


void robot_imu_get_quat(float quaternion[4])
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	Get_quat(&quaternion[0],&quaternion[1],&quaternion[2],&quaternion[3]);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	1d19      	adds	r1, r3, #4
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f103 0208 	add.w	r2, r3, #8
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f008 fecc 	bl	8009d74 <Get_quat>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <robot_motor_left_set_speed>:
	write_servo(0,0,0);
}


void robot_motor_left_set_speed(float speed,float pre_speed)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fee:	edc7 0a00 	vstr	s1, [r7]
	write_servo(speed,pre_speed,0);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	edd7 0a00 	vldr	s1, [r7]
 8000ff8:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ffc:	f00a faf8 	bl	800b5f0 <write_servo>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <robot_motor_right_set_speed>:
	write_servo(0,0,1);
}


void robot_motor_right_set_speed(float speed,float pre_speed)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001012:	edc7 0a00 	vstr	s1, [r7]
	write_servo(speed,pre_speed,1);
 8001016:	2001      	movs	r0, #1
 8001018:	edd7 0a00 	vldr	s1, [r7]
 800101c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001020:	f00a fae6 	bl	800b5f0 <write_servo>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <robot_encoder_left_get_tick>:


void robot_encoder_left_get_tick(int32_t *left_tick)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	*left_tick = (int32_t)(htim5.Instance->CNT);
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <robot_encoder_left_get_tick+0x20>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	601a      	str	r2, [r3, #0]
	//__HAL_TIM_GET_COUNTER(&htim2) = 0;
	//htim2.Instance->CNT &= 0x00000000;
	//*left_tick = 0;
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20008c20 	.word	0x20008c20

08001050 <robot_encoder_right_get_tick>:


void robot_encoder_right_get_tick(int32_t *right_tick)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

	*right_tick = (int32_t)(htim2.Instance->CNT);
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <robot_encoder_right_get_tick+0x20>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	601a      	str	r2, [r3, #0]
	//*right_tick = (int32_t)(htim5.Instance->CNT) ;
	//htim5.Instance->CNT &= 0x00000000;
	//__HAL_TIM_GET_COUNTER(&htim5) = 0;

}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20008ca0 	.word	0x20008ca0

08001074 <millis>:


uint32_t millis(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    return xTaskGetTickCount();
 8001078:	f011 f98a 	bl	8012390 <xTaskGetTickCount>
 800107c:	4603      	mov	r3, r0
	//return HAL_GetTick();
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}

08001082 <constrain>:

float constrain(float x, float low_val, float high_val)
{
 8001082:	b480      	push	{r7}
 8001084:	b087      	sub	sp, #28
 8001086:	af00      	add	r7, sp, #0
 8001088:	ed87 0a03 	vstr	s0, [r7, #12]
 800108c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001090:	ed87 1a01 	vstr	s2, [r7, #4]
    float value;
    if (x > high_val)
 8001094:	ed97 7a03 	vldr	s14, [r7, #12]
 8001098:	edd7 7a01 	vldr	s15, [r7, #4]
 800109c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	dd02      	ble.n	80010ac <constrain+0x2a>
    {
        value = high_val;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e00d      	b.n	80010c8 <constrain+0x46>
    }
    else if (x < low_val)
 80010ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80010b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	d502      	bpl.n	80010c4 <constrain+0x42>
    {
        value = low_val;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e001      	b.n	80010c8 <constrain+0x46>
    }
    else
    {
        value = x;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	617b      	str	r3, [r7, #20]
    }
    return value;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	ee07 3a90 	vmov	s15, r3
}
 80010ce:	eeb0 0a67 	vmov.f32	s0, s15
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b43      	ldr	r3, [pc, #268]	; (8001204 <MX_GPIO_Init+0x128>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a42      	ldr	r2, [pc, #264]	; (8001204 <MX_GPIO_Init+0x128>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b40      	ldr	r3, [pc, #256]	; (8001204 <MX_GPIO_Init+0x128>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <MX_GPIO_Init+0x128>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a3b      	ldr	r2, [pc, #236]	; (8001204 <MX_GPIO_Init+0x128>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b39      	ldr	r3, [pc, #228]	; (8001204 <MX_GPIO_Init+0x128>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b35      	ldr	r3, [pc, #212]	; (8001204 <MX_GPIO_Init+0x128>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a34      	ldr	r2, [pc, #208]	; (8001204 <MX_GPIO_Init+0x128>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b32      	ldr	r3, [pc, #200]	; (8001204 <MX_GPIO_Init+0x128>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <MX_GPIO_Init+0x128>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a2d      	ldr	r2, [pc, #180]	; (8001204 <MX_GPIO_Init+0x128>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <MX_GPIO_Init+0x128>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <MX_GPIO_Init+0x128>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a26      	ldr	r2, [pc, #152]	; (8001204 <MX_GPIO_Init+0x128>)
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <MX_GPIO_Init+0x128>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001184:	4820      	ldr	r0, [pc, #128]	; (8001208 <MX_GPIO_Init+0x12c>)
 8001186:	f00c fe41 	bl	800de0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001190:	481e      	ldr	r0, [pc, #120]	; (800120c <MX_GPIO_Init+0x130>)
 8001192:	f00c fe3b 	bl	800de0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800119c:	481c      	ldr	r0, [pc, #112]	; (8001210 <MX_GPIO_Init+0x134>)
 800119e:	f00c fe35 	bl	800de0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4813      	ldr	r0, [pc, #76]	; (8001208 <MX_GPIO_Init+0x12c>)
 80011bc:	f00c fb7a 	bl	800d8b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80011c0:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0x130>)
 80011da:	f00c fb6b 	bl	800d8b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE15 */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80011de:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_GPIO_Init+0x134>)
 80011f8:	f00c fb5c 	bl	800d8b4 <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000

08001214 <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	ed87 0a01 	vstr	s0, [r7, #4]
 800121e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001222:	edd7 7a01 	vldr	s15, [r7, #4]
 8001226:	eeb4 7a67 	vcmp.f32	s14, s15
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	d701      	bvc.n	8001234 <_ZSt5isnanf+0x20>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <_ZSt5isnanf+0x22>
 8001234:	2300      	movs	r3, #0
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <_ZN3ros3MsgC1Ev+0x1c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	0801557c 	.word	0x0801557c

08001284 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
      data()
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ffe8 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3304      	adds	r3, #4
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffcf 	bl	8001242 <_ZN3ros4TimeC1Ev>
    {
    }
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	08015564 	.word	0x08015564

080012b4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6859      	ldr	r1, [r3, #4]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	b2ca      	uxtb	r2, r1
 80012ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	0a19      	lsrs	r1, r3, #8
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	b2ca      	uxtb	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	0c19      	lsrs	r1, r3, #16
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3302      	adds	r3, #2
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	b2ca      	uxtb	r2, r1
 80012f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	0e19      	lsrs	r1, r3, #24
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3303      	adds	r3, #3
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	4413      	add	r3, r2
 8001302:	b2ca      	uxtb	r2, r1
 8001304:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3304      	adds	r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6899      	ldr	r1, [r3, #8]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	4413      	add	r3, r2
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	0a19      	lsrs	r1, r3, #8
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3301      	adds	r3, #1
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	0c19      	lsrs	r1, r3, #16
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3302      	adds	r3, #2
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	4413      	add	r3, r2
 800133a:	b2ca      	uxtb	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	0e19      	lsrs	r1, r3, #24
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3303      	adds	r3, #3
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	b2ca      	uxtb	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3304      	adds	r3, #4
 8001354:	60fb      	str	r3, [r7, #12]
      return offset;
 8001356:	68fb      	ldr	r3, [r7, #12]
    }
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	4413      	add	r3, r2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3301      	adds	r3, #1
 8001388:	6839      	ldr	r1, [r7, #0]
 800138a:	440b      	add	r3, r1
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3302      	adds	r3, #2
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	440b      	add	r3, r1
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	3303      	adds	r3, #3
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	440b      	add	r3, r1
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	061b      	lsls	r3, r3, #24
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3304      	adds	r3, #4
 80013c6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3301      	adds	r3, #1
 80013de:	6839      	ldr	r1, [r7, #0]
 80013e0:	440b      	add	r3, r1
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3302      	adds	r3, #2
 80013f4:	6839      	ldr	r1, [r7, #0]
 80013f6:	440b      	add	r3, r1
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	041b      	lsls	r3, r3, #16
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3303      	adds	r3, #3
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	440b      	add	r3, r1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	061b      	lsls	r3, r3, #24
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3304      	adds	r3, #4
 800141c:	60fb      	str	r3, [r7, #12]
     return offset;
 800141e:	68fb      	ldr	r3, [r7, #12]
    }
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	08014c80 	.word	0x08014c80

08001448 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	08014c90 	.word	0x08014c90

08001464 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fef8 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	809a      	strh	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
    {
    }
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	0801554c 	.word	0x0801554c
 80014a8:	08014cb4 	.word	0x08014cb4

080014ac <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	8899      	ldrh	r1, [r3, #4]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	b2ca      	uxtb	r2, r1
 80014c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	889b      	ldrh	r3, [r3, #4]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	b299      	uxth	r1, r3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	3301      	adds	r3, #1
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	b2ca      	uxtb	r2, r1
 80014da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	3302      	adds	r3, #2
 80014e0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe fe72 	bl	80001d0 <strlen>
 80014ec:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	69b9      	ldr	r1, [r7, #24]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f006 fed6 	bl	80082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	3304      	adds	r3, #4
 8001500:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	18d0      	adds	r0, r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4619      	mov	r1, r3
 8001510:	f012 ff38 	bl	8014384 <memcpy>
      offset += length_topic_name;
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4413      	add	r3, r2
 800151a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fe55 	bl	80001d0 <strlen>
 8001526:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	4413      	add	r3, r2
 800152e:	6979      	ldr	r1, [r7, #20]
 8001530:	4618      	mov	r0, r3
 8001532:	f006 feb9 	bl	80082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	18d0      	adds	r0, r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4619      	mov	r1, r3
 800154a:	f012 ff1b 	bl	8014384 <memcpy>
      offset += length_message_type;
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	4413      	add	r3, r2
 8001554:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe fe38 	bl	80001d0 <strlen>
 8001560:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	4618      	mov	r0, r3
 800156c:	f006 fe9c 	bl	80082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	3304      	adds	r3, #4
 8001574:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	18d0      	adds	r0, r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4619      	mov	r1, r3
 8001584:	f012 fefe 	bl	8014384 <memcpy>
      offset += length_md5sum;
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4413      	add	r3, r2
 800158e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001596:	68f9      	ldr	r1, [r7, #12]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	4413      	add	r3, r2
 800159e:	b2ca      	uxtb	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	0a19      	lsrs	r1, r3, #8
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3301      	adds	r3, #1
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	b2ca      	uxtb	r2, r1
 80015b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	0c19      	lsrs	r1, r3, #16
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3302      	adds	r3, #2
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	b2ca      	uxtb	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	0e19      	lsrs	r1, r3, #24
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3303      	adds	r3, #3
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	b2ca      	uxtb	r2, r1
 80015d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	61fb      	str	r3, [r7, #28]
      return offset;
 80015d8:	69fb      	ldr	r3, [r7, #28]
    }
 80015da:	4618      	mov	r0, r3
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b08a      	sub	sp, #40	; 0x28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	889b      	ldrh	r3, [r3, #4]
 8001602:	b21a      	sxth	r2, r3
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	3301      	adds	r3, #1
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	440b      	add	r3, r1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21b      	sxth	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	b21b      	sxth	r3, r3
 8001616:	b29a      	uxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	3302      	adds	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	441a      	add	r2, r3
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f006 fe58 	bl	80082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	3304      	adds	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	4413      	add	r3, r2
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	429a      	cmp	r2, r3
 8001648:	d20c      	bcs.n	8001664 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	441a      	add	r2, r3
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	3b01      	subs	r3, #1
 8001654:	6839      	ldr	r1, [r7, #0]
 8001656:	440b      	add	r3, r1
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	3301      	adds	r3, #1
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
 8001662:	e7ec      	b.n	800163e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	4413      	add	r3, r2
 800166a:	3b01      	subs	r3, #1
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	4413      	add	r3, r2
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	3b01      	subs	r3, #1
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	441a      	add	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	4413      	add	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	441a      	add	r2, r3
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f006 fe25 	bl	80082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	3304      	adds	r3, #4
 800169e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	623b      	str	r3, [r7, #32]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4413      	add	r3, r2
 80016aa:	6a3a      	ldr	r2, [r7, #32]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d20c      	bcs.n	80016ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	441a      	add	r2, r3
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	6839      	ldr	r1, [r7, #0]
 80016bc:	440b      	add	r3, r1
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	3301      	adds	r3, #1
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	e7ec      	b.n	80016a4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4413      	add	r3, r2
 80016d0:	3b01      	subs	r3, #1
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	4413      	add	r3, r2
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	3b01      	subs	r3, #1
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	441a      	add	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4413      	add	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	441a      	add	r2, r3
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f006 fdf2 	bl	80082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	3304      	adds	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	429a      	cmp	r2, r3
 8001714:	d20c      	bcs.n	8001730 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	441a      	add	r2, r3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	3b01      	subs	r3, #1
 8001720:	6839      	ldr	r1, [r7, #0]
 8001722:	440b      	add	r3, r1
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	3301      	adds	r3, #1
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e7ec      	b.n	800170a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4413      	add	r3, r2
 8001736:	3b01      	subs	r3, #1
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	3b01      	subs	r3, #1
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	441a      	add	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	6839      	ldr	r1, [r7, #0]
 800175e:	440a      	add	r2, r1
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	3301      	adds	r3, #1
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	440b      	add	r3, r1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	4313      	orrs	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	3302      	adds	r3, #2
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	440b      	add	r3, r1
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	4313      	orrs	r3, r2
 8001788:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	3303      	adds	r3, #3
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	440b      	add	r3, r1
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	061b      	lsls	r3, r3, #24
 8001798:	4313      	orrs	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	3304      	adds	r3, #4
 80017a6:	61bb      	str	r3, [r7, #24]
     return offset;
 80017a8:	69bb      	ldr	r3, [r7, #24]
    }
 80017aa:	4618      	mov	r0, r3
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	08014cb8 	.word	0x08014cb8

080017d0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	08014cd4 	.word	0x08014cd4

080017ec <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fd34 	bl	8001264 <_ZN3ros3MsgC1Ev>
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	711a      	strb	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800180c:	609a      	str	r2, [r3, #8]
    {
    }
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	08015534 	.word	0x08015534
 800181c:	08014cb4 	.word	0x08014cb4

08001820 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4413      	add	r3, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	7912      	ldrb	r2, [r2, #4]
 8001838:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fcc3 	bl	80001d0 <strlen>
 800184a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	4413      	add	r3, r2
 8001852:	68b9      	ldr	r1, [r7, #8]
 8001854:	4618      	mov	r0, r3
 8001856:	f006 fd27 	bl	80082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3304      	adds	r3, #4
 800185e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	18d0      	adds	r0, r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	4619      	mov	r1, r3
 800186e:	f012 fd89 	bl	8014384 <memcpy>
      offset += length_msg;
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
      return offset;
 800187a:	68fb      	ldr	r3, [r7, #12]
    }
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	4413      	add	r3, r2
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	3301      	adds	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	441a      	add	r2, r3
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f006 fd17 	bl	80082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	3304      	adds	r3, #4
 80018ba:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4413      	add	r3, r2
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d20c      	bcs.n	80018e6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	441a      	add	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	440b      	add	r3, r1
 80018da:	7812      	ldrb	r2, [r2, #0]
 80018dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e7ec      	b.n	80018c0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	3b01      	subs	r3, #1
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	441a      	add	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
     return offset;
 800190a:	693b      	ldr	r3, [r7, #16]
    }
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	08014cf8 	.word	0x08014cf8

08001930 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	08014d0c 	.word	0x08014d0c

0800194c <_ZN14rosserial_msgs19RequestParamRequestC1Ev>:
  {
    public:
      typedef const char* _name_type;
      _name_type name;

    RequestParamRequest():
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
      name("")
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fc84 	bl	8001264 <_ZN3ros3MsgC1Ev>
 800195c:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x28>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <_ZN14rosserial_msgs19RequestParamRequestC1Ev+0x2c>)
 8001966:	605a      	str	r2, [r3, #4]
    {
    }
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	0801551c 	.word	0x0801551c
 8001978:	08014cb4 	.word	0x08014cb4

0800197c <_ZNK14rosserial_msgs19RequestParamRequest9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
      uint32_t length_name = strlen(this->name);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fc1e 	bl	80001d0 <strlen>
 8001994:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_name);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	4413      	add	r3, r2
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	4618      	mov	r0, r3
 80019a0:	f006 fc82 	bl	80082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3304      	adds	r3, #4
 80019a8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->name, length_name);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	18d0      	adds	r0, r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	4619      	mov	r1, r3
 80019b8:	f012 fce4 	bl	8014384 <memcpy>
      offset += length_name;
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	4413      	add	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
      return offset;
 80019c4:	68fb      	ldr	r3, [r7, #12]
    }
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
      uint32_t length_name;
      arrToVar(length_name, (inbuffer + offset));
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	441a      	add	r2, r3
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f006 fc7b 	bl	80082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	3304      	adds	r3, #4
 80019f2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d20c      	bcs.n	8001a1e <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	441a      	add	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	6839      	ldr	r1, [r7, #0]
 8001a10:	440b      	add	r3, r1
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_name; ++k){
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e7ec      	b.n	80019f8 <_ZN14rosserial_msgs19RequestParamRequest11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_name-1]=0;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	3b01      	subs	r3, #1
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	4413      	add	r3, r2
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
      this->name = (char *)(inbuffer + offset-1);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	441a      	add	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	605a      	str	r2, [r3, #4]
      offset += length_name;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
     return offset;
 8001a42:	693b      	ldr	r3, [r7, #16]
    }
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <_ZN14rosserial_msgs19RequestParamRequest7getTypeEv+0x18>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08015308 	.word	0x08015308

08001a68 <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev>:
    const char * getMD5(){ return "c1f3d28f1b044c871e6eff2e9fc3c667"; };
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <_ZN14rosserial_msgs19RequestParamRequest6getMD5Ev+0x18>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	08014d30 	.word	0x08014d30

08001a84 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fbe8 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8001a94:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61da      	str	r2, [r3, #28]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	08015504 	.word	0x08015504

08001acc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6859      	ldr	r1, [r3, #4]
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	0a19      	lsrs	r1, r3, #8
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	3301      	adds	r3, #1
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	b2ca      	uxtb	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0c19      	lsrs	r1, r3, #16
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	3302      	adds	r3, #2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	b2ca      	uxtb	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	0e19      	lsrs	r1, r3, #24
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	3303      	adds	r3, #3
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b2ca      	uxtb	r2, r1
 8001b1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	3304      	adds	r3, #4
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	6a3a      	ldr	r2, [r7, #32]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d22b      	bcs.n	8001b8a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001b40:	6939      	ldr	r1, [r7, #16]
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	0a19      	lsrs	r1, r3, #8
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	3301      	adds	r3, #1
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	b2ca      	uxtb	r2, r1
 8001b5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	0c19      	lsrs	r1, r3, #16
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	3302      	adds	r3, #2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	b2ca      	uxtb	r2, r1
 8001b6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	0e19      	lsrs	r1, r3, #24
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	3303      	adds	r3, #3
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	b2ca      	uxtb	r2, r1
 8001b7a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	3304      	adds	r3, #4
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	3301      	adds	r3, #1
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	e7ce      	b.n	8001b28 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6919      	ldr	r1, [r3, #16]
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	0a19      	lsrs	r1, r3, #8
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b2ca      	uxtb	r2, r1
 8001ba8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	0c19      	lsrs	r1, r3, #16
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b2ca      	uxtb	r2, r1
 8001bba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	0e19      	lsrs	r1, r3, #24
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	4413      	add	r3, r2
 8001bca:	b2ca      	uxtb	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d22b      	bcs.n	8001c3a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2ca      	uxtb	r2, r1
 8001bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	0a19      	lsrs	r1, r3, #8
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	3301      	adds	r3, #1
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	b2ca      	uxtb	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0c19      	lsrs	r1, r3, #16
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	3302      	adds	r3, #2
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	b2ca      	uxtb	r2, r1
 8001c1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	0e19      	lsrs	r1, r3, #24
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	3303      	adds	r3, #3
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	b2ca      	uxtb	r2, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	3304      	adds	r3, #4
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	e7ce      	b.n	8001bd8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69d9      	ldr	r1, [r3, #28]
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	b2ca      	uxtb	r2, r1
 8001c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	0a19      	lsrs	r1, r3, #8
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3301      	adds	r3, #1
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	4413      	add	r3, r2
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	0c19      	lsrs	r1, r3, #16
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	3302      	adds	r3, #2
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	b2ca      	uxtb	r2, r1
 8001c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	0e19      	lsrs	r1, r3, #24
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3303      	adds	r3, #3
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	3304      	adds	r3, #4
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d228      	bcs.n	8001ce4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fa96 	bl	80001d0 <strlen>
 8001ca4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	6979      	ldr	r1, [r7, #20]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f006 fafa 	bl	80082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	18d0      	adds	r0, r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f012 fb58 	bl	8014384 <memcpy>
      offset += length_stringsi;
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	4413      	add	r3, r2
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	e7d1      	b.n	8001c88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b08e      	sub	sp, #56	; 0x38
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	3301      	adds	r3, #1
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	6a3a      	ldr	r2, [r7, #32]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	6a3a      	ldr	r2, [r7, #32]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2c:	3303      	adds	r3, #3
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	6a3a      	ldr	r2, [r7, #32]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	3304      	adds	r3, #4
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	6a3a      	ldr	r2, [r7, #32]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d90a      	bls.n	8001d62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f012 fb90 	bl	801447c <realloc>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a3a      	ldr	r2, [r7, #32]
 8001d66:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d68:	2300      	movs	r3, #0
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d236      	bcs.n	8001de4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d7e:	6839      	ldr	r1, [r7, #0]
 8001d80:	440a      	add	r2, r1
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	440b      	add	r3, r1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9e:	3302      	adds	r3, #2
 8001da0:	6839      	ldr	r1, [r7, #0]
 8001da2:	440b      	add	r3, r1
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	041b      	lsls	r3, r3, #16
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db0:	3303      	adds	r3, #3
 8001db2:	6839      	ldr	r1, [r7, #0]
 8001db4:	440b      	add	r3, r1
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dde:	3301      	adds	r3, #1
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
 8001de2:	e7c3      	b.n	8001d6c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df0:	3301      	adds	r3, #1
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	3302      	adds	r3, #2
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e14:	3303      	adds	r3, #3
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	061b      	lsls	r3, r3, #24
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e26:	3304      	adds	r3, #4
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d90a      	bls.n	8001e4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f012 fb1c 	bl	801447c <realloc>
 8001e44:	4602      	mov	r2, r0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d236      	bcs.n	8001ecc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	440a      	add	r2, r1
 8001e6a:	7812      	ldrb	r2, [r2, #0]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e74:	3301      	adds	r3, #1
 8001e76:	6839      	ldr	r1, [r7, #0]
 8001e78:	440b      	add	r3, r1
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	3302      	adds	r3, #2
 8001e88:	6839      	ldr	r1, [r7, #0]
 8001e8a:	440b      	add	r3, r1
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e98:	3303      	adds	r3, #3
 8001e9a:	6839      	ldr	r1, [r7, #0]
 8001e9c:	440b      	add	r3, r1
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eae:	3304      	adds	r3, #4
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	3214      	adds	r2, #20
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eca:	e7c3      	b.n	8001e54 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed8:	3301      	adds	r3, #1
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	4413      	add	r3, r2
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eea:	3302      	adds	r3, #2
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efc:	3303      	adds	r3, #3
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	061b      	lsls	r3, r3, #24
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0e:	3304      	adds	r3, #4
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d90a      	bls.n	8001f32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4619      	mov	r1, r3
 8001f26:	4610      	mov	r0, r2
 8001f28:	f012 faa8 	bl	801447c <realloc>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d23f      	bcs.n	8001fc6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	441a      	add	r2, r3
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f006 f9c6 	bl	80082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
 8001f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d20c      	bcs.n	8001f88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	441a      	add	r2, r3
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	3b01      	subs	r3, #1
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	440b      	add	r3, r1
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	3301      	adds	r3, #1
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	e7ec      	b.n	8001f62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	441a      	add	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4413      	add	r3, r2
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	3220      	adds	r2, #32
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc4:	e7ba      	b.n	8001f3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3738      	adds	r7, #56	; 0x38
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	08015308 	.word	0x08015308

08001fec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	08014d54 	.word	0x08014d54

08002008 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	611a      	str	r2, [r3, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68d8      	ldr	r0, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6891      	ldr	r1, [r2, #8]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	4798      	blx	r3
 8002054:	4603      	mov	r3, r0
  };
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
  }
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8002076:	b4b0      	push	{r4, r5, r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002090:	3302      	adds	r3, #2
 8002092:	2200      	movs	r2, #0
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800209c:	3304      	adds	r3, #4
 800209e:	2200      	movs	r2, #0
 80020a0:	801a      	strh	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020a8:	3306      	adds	r3, #6
 80020aa:	2200      	movs	r2, #0
 80020ac:	801a      	strh	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020b4:	3308      	adds	r3, #8
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	601a      	str	r2, [r3, #0]
	{
		this->huart = huart;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020c0:	3308      	adds	r3, #8
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4614      	mov	r4, r2
 80020c8:	461d      	mov	r5, r3
 80020ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
	}
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bcb0      	pop	{r4, r5, r7}
 80020e8:	4770      	bx	lr

080020ea <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020f8:	3308      	adds	r3, #8
 80020fa:	681b      	ldr	r3, [r3, #0]
	}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_ZN11SerialClass4initEv>:

	inline void init(void)
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	{
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	4b77      	ldr	r3, [pc, #476]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a76      	ldr	r2, [pc, #472]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 800211a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b74      	ldr	r3, [pc, #464]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	4b70      	ldr	r3, [pc, #448]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	4a6f      	ldr	r2, [pc, #444]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6313      	str	r3, [r2, #48]	; 0x30
 800213c:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_USART2_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	4a68      	ldr	r2, [pc, #416]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 8002152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
 8002158:	4b66      	ldr	r3, [pc, #408]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	4b62      	ldr	r3, [pc, #392]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	4a61      	ldr	r2, [pc, #388]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 800216e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002172:	6313      	str	r3, [r2, #48]	; 0x30
 8002174:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <_ZN11SerialClass4initEv+0x1ec>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]

		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002190:	230c      	movs	r3, #12
 8002192:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002198:	2301      	movs	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a0:	2307      	movs	r3, #7
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	4853      	ldr	r0, [pc, #332]	; (80022f8 <_ZN11SerialClass4initEv+0x1f0>)
 80021ac:	f00b fb82 	bl	800d8b4 <HAL_GPIO_Init>

		huart2.Instance = USART2;
 80021b0:	4b52      	ldr	r3, [pc, #328]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 80021b2:	4a53      	ldr	r2, [pc, #332]	; (8002300 <_ZN11SerialClass4initEv+0x1f8>)
 80021b4:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 80021b6:	4b51      	ldr	r3, [pc, #324]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b4f      	ldr	r3, [pc, #316]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b49      	ldr	r3, [pc, #292]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b47      	ldr	r3, [pc, #284]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
		HAL_UART_Init(&huart2);
 80021e2:	4846      	ldr	r0, [pc, #280]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 80021e4:	f00e f974 	bl	80104d0 <HAL_UART_Init>

		hdma_USART2_rx.Instance = DMA1_Stream5;
 80021e8:	4b46      	ldr	r3, [pc, #280]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 80021ea:	4a47      	ldr	r2, [pc, #284]	; (8002308 <_ZN11SerialClass4initEv+0x200>)
 80021ec:	601a      	str	r2, [r3, #0]
		hdma_USART2_rx.Init.Channel = DMA_CHANNEL_4;
 80021ee:	4b45      	ldr	r3, [pc, #276]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 80021f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021f4:	605a      	str	r2, [r3, #4]
		hdma_USART2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f6:	4b43      	ldr	r3, [pc, #268]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
		hdma_USART2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fc:	4b41      	ldr	r3, [pc, #260]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
		hdma_USART2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002202:	4b40      	ldr	r3, [pc, #256]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 8002204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002208:	611a      	str	r2, [r3, #16]
		hdma_USART2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220a:	4b3e      	ldr	r3, [pc, #248]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
		hdma_USART2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002210:	4b3c      	ldr	r3, [pc, #240]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
		hdma_USART2_rx.Init.Mode = DMA_NORMAL;
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
		hdma_USART2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800221c:	4b39      	ldr	r3, [pc, #228]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
		hdma_USART2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_DMA_Init(&hdma_USART2_rx);
 8002228:	4836      	ldr	r0, [pc, #216]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 800222a:	f00a ffb3 	bl	800d194 <HAL_DMA_Init>
		__HAL_LINKDMA(&huart2, hdmarx, hdma_USART2_rx);
 800222e:	4b33      	ldr	r3, [pc, #204]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 8002230:	4a34      	ldr	r2, [pc, #208]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 8002232:	635a      	str	r2, [r3, #52]	; 0x34
 8002234:	4b33      	ldr	r3, [pc, #204]	; (8002304 <_ZN11SerialClass4initEv+0x1fc>)
 8002236:	4a31      	ldr	r2, [pc, #196]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 8002238:	639a      	str	r2, [r3, #56]	; 0x38

		hdma_USART2_tx.Instance = DMA1_Stream6;
 800223a:	4b34      	ldr	r3, [pc, #208]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 800223c:	4a34      	ldr	r2, [pc, #208]	; (8002310 <_ZN11SerialClass4initEv+0x208>)
 800223e:	601a      	str	r2, [r3, #0]
		hdma_USART2_tx.Init.Channel = DMA_CHANNEL_4;
 8002240:	4b32      	ldr	r3, [pc, #200]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 8002242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002246:	605a      	str	r2, [r3, #4]
		hdma_USART2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002248:	4b30      	ldr	r3, [pc, #192]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 800224a:	2240      	movs	r2, #64	; 0x40
 800224c:	609a      	str	r2, [r3, #8]
		hdma_USART2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
		hdma_USART2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 8002256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800225a:	611a      	str	r2, [r3, #16]
		hdma_USART2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
		hdma_USART2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
		hdma_USART2_tx.Init.Mode = DMA_NORMAL;
 8002268:	4b28      	ldr	r3, [pc, #160]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
		hdma_USART2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
		hdma_USART2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_DMA_Init(&hdma_USART2_tx);
 800227a:	4824      	ldr	r0, [pc, #144]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 800227c:	f00a ff8a 	bl	800d194 <HAL_DMA_Init>
		__HAL_LINKDMA(&huart2, hdmatx, hdma_USART2_tx);
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 8002282:	4a22      	ldr	r2, [pc, #136]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
 8002286:	4b21      	ldr	r3, [pc, #132]	; (800230c <_ZN11SerialClass4initEv+0x204>)
 8002288:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <_ZN11SerialClass4initEv+0x1f4>)
 800228a:	639a      	str	r2, [r3, #56]	; 0x38

		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	2026      	movs	r0, #38	; 0x26
 8002292:	f00a ff48 	bl	800d126 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002296:	2026      	movs	r0, #38	; 0x26
 8002298:	f00a ff61 	bl	800d15e <HAL_NVIC_EnableIRQ>

		HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	2010      	movs	r0, #16
 80022a2:	f00a ff40 	bl	800d126 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80022a6:	2010      	movs	r0, #16
 80022a8:	f00a ff59 	bl	800d15e <HAL_NVIC_EnableIRQ>

		HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2011      	movs	r0, #17
 80022b2:	f00a ff38 	bl	800d126 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80022b6:	2011      	movs	r0, #17
 80022b8:	f00a ff51 	bl	800d15e <HAL_NVIC_EnableIRQ>

		tx_cplt = true;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80022cc:	3302      	adds	r3, #2
 80022ce:	2200      	movs	r2, #0
 80022d0:	801a      	strh	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80022d8:	3308      	adds	r3, #8
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e6:	4619      	mov	r1, r3
 80022e8:	f00e f9b6 	bl	8010658 <HAL_UART_Receive_DMA>
	}
 80022ec:	bf00      	nop
 80022ee:	3730      	adds	r7, #48	; 0x30
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	20000154 	.word	0x20000154
 8002300:	40004400 	.word	0x40004400
 8002304:	20000194 	.word	0x20000194
 8002308:	40026088 	.word	0x40026088
 800230c:	200001f4 	.word	0x200001f4
 8002310:	400260a0 	.word	0x400260a0

08002314 <_ZN11SerialClass4readEv>:

	inline int read(void)
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002322:	3308      	adds	r3, #8
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
		                   & buf_mask;
 800232c:	b29b      	uxth	r3, r3
 800232e:	425b      	negs	r3, r3
 8002330:	b29b      	uxth	r3, r3
 8002332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002336:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800233e:	3302      	adds	r3, #2
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	89fa      	ldrh	r2, [r7, #14]
 8002344:	429a      	cmp	r2, r3
 8002346:	d102      	bne.n	800234e <_ZN11SerialClass4readEv+0x3a>
		{
			return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800234c:	e01f      	b.n	800238e <_ZN11SerialClass4readEv+0x7a>
		}

		int c = (int) rx_buf[rx_tail++];
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002354:	3302      	adds	r3, #2
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	1c53      	adds	r3, r2, #1
 800235a:	b299      	uxth	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002362:	3302      	adds	r3, #2
 8002364:	8019      	strh	r1, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002378:	3302      	adds	r3, #2
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	b29a      	uxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002388:	3302      	adds	r3, #2
 800238a:	801a      	strh	r2, [r3, #0]
		return c;
 800238c:	68bb      	ldr	r3, [r7, #8]
	}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ac:	dc33      	bgt.n	8002416 <_ZN11SerialClass5writeEPKhi+0x7c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	dd30      	ble.n	8002416 <_ZN11SerialClass5writeEPKhi+0x7c>
		{
			return;
		}

		while (!tx_cplt)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d100      	bne.n	80023c2 <_ZN11SerialClass5writeEPKhi+0x28>
 80023c0:	e7f8      	b.n	80023b4 <_ZN11SerialClass5writeEPKhi+0x1a>
		{

		}

		for (int i = 0; i < length; i++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	da0c      	bge.n	80023e8 <_ZN11SerialClass5writeEPKhi+0x4e>
		{
			tx_buf[i] = c[i];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	4413      	add	r3, r2
 80023d4:	7819      	ldrb	r1, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4413      	add	r3, r2
 80023dc:	460a      	mov	r2, r1
 80023de:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3301      	adds	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e7ee      	b.n	80023c6 <_ZN11SerialClass5writeEPKhi+0x2c>
		}

		if (tx_cplt)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <_ZN11SerialClass5writeEPKhi+0x7e>
		{
			tx_cplt = false;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002404:	3308      	adds	r3, #8
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68f9      	ldr	r1, [r7, #12]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	b292      	uxth	r2, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f00e f8b6 	bl	8010580 <HAL_UART_Transmit_DMA>
 8002414:	e000      	b.n	8002418 <_ZN11SerialClass5writeEPKhi+0x7e>
			return;
 8002416:	bf00      	nop
		}
	}
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
	}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_ZN11SerialClass10reset_rbufEv>:

	inline void reset_rbuf(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800244a:	3308      	adds	r3, #8
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002458:	4619      	mov	r1, r3
 800245a:	f00e f8fd 	bl	8010658 <HAL_UART_Receive_DMA>
	}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_UART_TxCpltCallback>:
};

SerialClass serial(huart2);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681c      	ldr	r4, [r3, #0]
 8002474:	4809      	ldr	r0, [pc, #36]	; (800249c <HAL_UART_TxCpltCallback+0x34>)
 8002476:	f7ff fe38 	bl	80020ea <_ZN11SerialClass10get_handleEv>
 800247a:	4603      	mov	r3, r0
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	429c      	cmp	r4, r3
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 800248c:	4803      	ldr	r0, [pc, #12]	; (800249c <HAL_UART_TxCpltCallback+0x34>)
 800248e:	f7ff ffc6 	bl	800241e <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	bf00      	nop
 800249c:	20000254 	.word	0x20000254

080024a0 <HAL_UART_RxCpltCallback>:


extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <HAL_UART_RxCpltCallback+0x18>)
 80024aa:	f7ff ffc7 	bl	800243c <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);

}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000254 	.word	0x20000254

080024bc <DMA1_Stream5_IRQHandler>:

extern "C" void DMA1_Stream5_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_USART2_rx);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <DMA1_Stream5_IRQHandler+0x10>)
 80024c2:	f00a ff8f 	bl	800d3e4 <HAL_DMA_IRQHandler>
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000194 	.word	0x20000194

080024d0 <DMA1_Stream6_IRQHandler>:

extern "C" void DMA1_Stream6_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_USART2_tx);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <DMA1_Stream6_IRQHandler+0x10>)
 80024d6:	f00a ff85 	bl	800d3e4 <HAL_DMA_IRQHandler>
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200001f4 	.word	0x200001f4

080024e4 <USART2_IRQHandler>:

extern "C" void USART2_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <USART2_IRQHandler+0x10>)
 80024ea:	f00e f935 	bl	8010758 <HAL_UART_IRQHandler>
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000154 	.word	0x20000154

080024f8 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
			com(&serial)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a04      	ldr	r2, [pc, #16]	; (8002514 <_ZN13STM32HardwareC1Ev+0x1c>)
 8002504:	601a      	str	r2, [r3, #0]
	{

	}
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	20000254 	.word	0x20000254

08002518 <_ZN13STM32Hardware4initEv>:

	void init()
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	{
		com->init();
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fdef 	bl	8002108 <_ZN11SerialClass4initEv>
	}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_ZN13STM32Hardware4readEv>:

	int read()
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fee8 	bl	8002314 <_ZN11SerialClass4readEv>
 8002544:	4603      	mov	r3, r0
	}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff19 	bl	800239a <_ZN11SerialClass5writeEPKhi>
	}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	//uint32_t time
	{
		return HAL_GetTick();
 8002578:	f00a fccc 	bl	800cf14 <HAL_GetTick>
 800257c:	4603      	mov	r3, r0
		//return (uint32_t) xTaskGetTickCount();
	}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fe66 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8002598:	4a03      	ldr	r2, [pc, #12]	; (80025a8 <_ZN8std_msgs5EmptyC1Ev+0x20>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]
    }
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	080154c0 	.word	0x080154c0

080025ac <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80025ba:	68fb      	ldr	r3, [r7, #12]
    }
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
     return offset;
 80025d6:	68fb      	ldr	r3, [r7, #12]
    }
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_ZN8std_msgs5Empty7getTypeEv>:

    const char * getType(){ return "std_msgs/Empty"; };
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	08014d78 	.word	0x08014d78

08002600 <_ZN8std_msgs5Empty6getMD5Ev>:
    const char * getMD5(){ return "d41d8cd98f00b204e9800998ecf8427e"; };
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	08014d88 	.word	0x08014d88

0800261c <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fe1c 	bl	8001264 <_ZN3ros3MsgC1Ev>
 800262c:	4a09      	ldr	r2, [pc, #36]	; (8002654 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3308      	adds	r3, #8
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fe00 	bl	8001242 <_ZN3ros4TimeC1Ev>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8002646:	611a      	str	r2, [r3, #16]
    {
    }
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	080154a8 	.word	0x080154a8
 8002658:	08014cb4 	.word	0x08014cb4

0800265c <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	4413      	add	r3, r2
 8002674:	b2ca      	uxtb	r2, r1
 8002676:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0a19      	lsrs	r1, r3, #8
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3301      	adds	r3, #1
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	4413      	add	r3, r2
 8002686:	b2ca      	uxtb	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0c19      	lsrs	r1, r3, #16
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3302      	adds	r3, #2
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	4413      	add	r3, r2
 8002698:	b2ca      	uxtb	r2, r1
 800269a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	0e19      	lsrs	r1, r3, #24
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3303      	adds	r3, #3
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	b2ca      	uxtb	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6899      	ldr	r1, [r3, #8]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	b2ca      	uxtb	r2, r1
 80026c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0a19      	lsrs	r1, r3, #8
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3301      	adds	r3, #1
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	b2ca      	uxtb	r2, r1
 80026d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	0c19      	lsrs	r1, r3, #16
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3302      	adds	r3, #2
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	b2ca      	uxtb	r2, r1
 80026e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0e19      	lsrs	r1, r3, #24
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3303      	adds	r3, #3
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	b2ca      	uxtb	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3304      	adds	r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68d9      	ldr	r1, [r3, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4413      	add	r3, r2
 8002708:	b2ca      	uxtb	r2, r1
 800270a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a19      	lsrs	r1, r3, #8
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3301      	adds	r3, #1
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	b2ca      	uxtb	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	0c19      	lsrs	r1, r3, #16
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3302      	adds	r3, #2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4413      	add	r3, r2
 800272c:	b2ca      	uxtb	r2, r1
 800272e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0e19      	lsrs	r1, r3, #24
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3303      	adds	r3, #3
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	4413      	add	r3, r2
 800273e:	b2ca      	uxtb	r2, r1
 8002740:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3304      	adds	r3, #4
 8002746:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fd3f 	bl	80001d0 <strlen>
 8002752:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	4413      	add	r3, r2
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	4618      	mov	r0, r3
 800275e:	f005 fda3 	bl	80082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3304      	adds	r3, #4
 8002766:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	18d0      	adds	r0, r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	4619      	mov	r1, r3
 8002776:	f011 fe05 	bl	8014384 <memcpy>
      offset += length_frame_id;
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
      return offset;
 8002782:	68fb      	ldr	r3, [r7, #12]
    }
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	3301      	adds	r3, #1
 80027b0:	6839      	ldr	r1, [r7, #0]
 80027b2:	440b      	add	r3, r1
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	3302      	adds	r3, #2
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	440b      	add	r3, r1
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	3303      	adds	r3, #3
 80027dc:	6839      	ldr	r1, [r7, #0]
 80027de:	440b      	add	r3, r1
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	061b      	lsls	r3, r3, #24
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	3304      	adds	r3, #4
 80027ee:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	3301      	adds	r3, #1
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	440b      	add	r3, r1
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	3302      	adds	r3, #2
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	440b      	add	r3, r1
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	3303      	adds	r3, #3
 8002832:	6839      	ldr	r1, [r7, #0]
 8002834:	440b      	add	r3, r1
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	3304      	adds	r3, #4
 8002844:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	4413      	add	r3, r2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	3301      	adds	r3, #1
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	440b      	add	r3, r1
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	3302      	adds	r3, #2
 8002872:	6839      	ldr	r1, [r7, #0]
 8002874:	440b      	add	r3, r1
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	3303      	adds	r3, #3
 8002888:	6839      	ldr	r1, [r7, #0]
 800288a:	440b      	add	r3, r1
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	061b      	lsls	r3, r3, #24
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	3304      	adds	r3, #4
 800289a:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	441a      	add	r2, r3
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f005 fd1b 	bl	80082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	3304      	adds	r3, #4
 80028b2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4413      	add	r3, r2
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d20c      	bcs.n	80028de <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	441a      	add	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	440b      	add	r3, r1
 80028d2:	7812      	ldrb	r2, [r2, #0]
 80028d4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	e7ec      	b.n	80028b8 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	3b01      	subs	r3, #1
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	441a      	add	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
     return offset;
 8002902:	693b      	ldr	r3, [r7, #16]
    }
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	08014dac 	.word	0x08014dac

08002928 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	08014dbc 	.word	0x08014dbc

08002944 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fc88 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8002954:	4a11      	ldr	r2, [pc, #68]	; (800299c <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	f04f 0400 	mov.w	r4, #0
 8002964:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	f04f 0400 	mov.w	r4, #0
 8002972:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	f04f 0400 	mov.w	r4, #0
 8002980:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f04f 0400 	mov.w	r4, #0
 800298e:	e9c2 3408 	strd	r3, r4, [r2, #32]
    {
    }
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bd90      	pop	{r4, r7, pc}
 800299c:	08015490 	.word	0x08015490

080029a0 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80029a0:	b490      	push	{r4, r7}
 80029a2:	b08c      	sub	sp, #48	; 0x30
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80029b4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80029b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80029bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029be:	6839      	ldr	r1, [r7, #0]
 80029c0:	440a      	add	r2, r1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80029c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f04f 0400 	mov.w	r4, #0
 80029d2:	0a0b      	lsrs	r3, r1, #8
 80029d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029d8:	0a14      	lsrs	r4, r2, #8
 80029da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029dc:	3201      	adds	r2, #1
 80029de:	6839      	ldr	r1, [r7, #0]
 80029e0:	440a      	add	r2, r1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80029e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	f04f 0400 	mov.w	r4, #0
 80029f2:	0c0b      	lsrs	r3, r1, #16
 80029f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029f8:	0c14      	lsrs	r4, r2, #16
 80029fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029fc:	3202      	adds	r2, #2
 80029fe:	6839      	ldr	r1, [r7, #0]
 8002a00:	440a      	add	r2, r1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002a06:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	f04f 0400 	mov.w	r4, #0
 8002a12:	0e0b      	lsrs	r3, r1, #24
 8002a14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a18:	0e14      	lsrs	r4, r2, #24
 8002a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1c:	3203      	adds	r2, #3
 8002a1e:	6839      	ldr	r1, [r7, #0]
 8002a20:	440a      	add	r2, r1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002a26:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	f04f 0400 	mov.w	r4, #0
 8002a32:	0013      	movs	r3, r2
 8002a34:	2400      	movs	r4, #0
 8002a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a38:	3204      	adds	r2, #4
 8002a3a:	6839      	ldr	r1, [r7, #0]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002a42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	f04f 0400 	mov.w	r4, #0
 8002a4e:	0a13      	lsrs	r3, r2, #8
 8002a50:	2400      	movs	r4, #0
 8002a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a54:	3205      	adds	r2, #5
 8002a56:	6839      	ldr	r1, [r7, #0]
 8002a58:	440a      	add	r2, r1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002a5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	f04f 0400 	mov.w	r4, #0
 8002a6a:	0c13      	lsrs	r3, r2, #16
 8002a6c:	2400      	movs	r4, #0
 8002a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a70:	3206      	adds	r2, #6
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	440a      	add	r2, r1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002a7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	f04f 0400 	mov.w	r4, #0
 8002a86:	0e13      	lsrs	r3, r2, #24
 8002a88:	2400      	movs	r4, #0
 8002a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8c:	3207      	adds	r2, #7
 8002a8e:	6839      	ldr	r1, [r7, #0]
 8002a90:	440a      	add	r2, r1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	3308      	adds	r3, #8
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002aa2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002aa6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aac:	6839      	ldr	r1, [r7, #0]
 8002aae:	440a      	add	r2, r1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002ab4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	f04f 0400 	mov.w	r4, #0
 8002ac0:	0a0b      	lsrs	r3, r1, #8
 8002ac2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ac6:	0a14      	lsrs	r4, r2, #8
 8002ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aca:	3201      	adds	r2, #1
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	440a      	add	r2, r1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002ad4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	f04f 0400 	mov.w	r4, #0
 8002ae0:	0c0b      	lsrs	r3, r1, #16
 8002ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ae6:	0c14      	lsrs	r4, r2, #16
 8002ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aea:	3202      	adds	r2, #2
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	440a      	add	r2, r1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002af4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	f04f 0400 	mov.w	r4, #0
 8002b00:	0e0b      	lsrs	r3, r1, #24
 8002b02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b06:	0e14      	lsrs	r4, r2, #24
 8002b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0a:	3203      	adds	r2, #3
 8002b0c:	6839      	ldr	r1, [r7, #0]
 8002b0e:	440a      	add	r2, r1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002b14:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	f04f 0400 	mov.w	r4, #0
 8002b20:	0013      	movs	r3, r2
 8002b22:	2400      	movs	r4, #0
 8002b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b26:	3204      	adds	r2, #4
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	440a      	add	r2, r1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002b30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	f04f 0400 	mov.w	r4, #0
 8002b3c:	0a13      	lsrs	r3, r2, #8
 8002b3e:	2400      	movs	r4, #0
 8002b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b42:	3205      	adds	r2, #5
 8002b44:	6839      	ldr	r1, [r7, #0]
 8002b46:	440a      	add	r2, r1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002b4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	f04f 0400 	mov.w	r4, #0
 8002b58:	0c13      	lsrs	r3, r2, #16
 8002b5a:	2400      	movs	r4, #0
 8002b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b5e:	3206      	adds	r2, #6
 8002b60:	6839      	ldr	r1, [r7, #0]
 8002b62:	440a      	add	r2, r1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002b68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	f04f 0400 	mov.w	r4, #0
 8002b74:	0e13      	lsrs	r3, r2, #24
 8002b76:	2400      	movs	r4, #0
 8002b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7a:	3207      	adds	r2, #7
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	440a      	add	r2, r1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	3308      	adds	r3, #8
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002b90:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002b94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	440a      	add	r2, r1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002ba2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	f04f 0400 	mov.w	r4, #0
 8002bae:	0a0b      	lsrs	r3, r1, #8
 8002bb0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002bb4:	0a14      	lsrs	r4, r2, #8
 8002bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb8:	3201      	adds	r2, #1
 8002bba:	6839      	ldr	r1, [r7, #0]
 8002bbc:	440a      	add	r2, r1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002bc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	f04f 0400 	mov.w	r4, #0
 8002bce:	0c0b      	lsrs	r3, r1, #16
 8002bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002bd4:	0c14      	lsrs	r4, r2, #16
 8002bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd8:	3202      	adds	r2, #2
 8002bda:	6839      	ldr	r1, [r7, #0]
 8002bdc:	440a      	add	r2, r1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002be2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	f04f 0400 	mov.w	r4, #0
 8002bee:	0e0b      	lsrs	r3, r1, #24
 8002bf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bf4:	0e14      	lsrs	r4, r2, #24
 8002bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf8:	3203      	adds	r2, #3
 8002bfa:	6839      	ldr	r1, [r7, #0]
 8002bfc:	440a      	add	r2, r1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002c02:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	f04f 0400 	mov.w	r4, #0
 8002c0e:	0013      	movs	r3, r2
 8002c10:	2400      	movs	r4, #0
 8002c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c14:	3204      	adds	r2, #4
 8002c16:	6839      	ldr	r1, [r7, #0]
 8002c18:	440a      	add	r2, r1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002c1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	f04f 0400 	mov.w	r4, #0
 8002c2a:	0a13      	lsrs	r3, r2, #8
 8002c2c:	2400      	movs	r4, #0
 8002c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c30:	3205      	adds	r2, #5
 8002c32:	6839      	ldr	r1, [r7, #0]
 8002c34:	440a      	add	r2, r1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002c3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	f04f 0400 	mov.w	r4, #0
 8002c46:	0c13      	lsrs	r3, r2, #16
 8002c48:	2400      	movs	r4, #0
 8002c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4c:	3206      	adds	r2, #6
 8002c4e:	6839      	ldr	r1, [r7, #0]
 8002c50:	440a      	add	r2, r1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002c56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	f04f 0400 	mov.w	r4, #0
 8002c62:	0e13      	lsrs	r3, r2, #24
 8002c64:	2400      	movs	r4, #0
 8002c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c68:	3207      	adds	r2, #7
 8002c6a:	6839      	ldr	r1, [r7, #0]
 8002c6c:	440a      	add	r2, r1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	3308      	adds	r3, #8
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002c7e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8002c82:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c88:	6839      	ldr	r1, [r7, #0]
 8002c8a:	440a      	add	r2, r1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8002c90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	f04f 0400 	mov.w	r4, #0
 8002c9c:	0a0b      	lsrs	r3, r1, #8
 8002c9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ca2:	0a14      	lsrs	r4, r2, #8
 8002ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca6:	3201      	adds	r2, #1
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	440a      	add	r2, r1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8002cb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	f04f 0400 	mov.w	r4, #0
 8002cbc:	0c0b      	lsrs	r3, r1, #16
 8002cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002cc2:	0c14      	lsrs	r4, r2, #16
 8002cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc6:	3202      	adds	r2, #2
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	440a      	add	r2, r1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8002cd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	f04f 0400 	mov.w	r4, #0
 8002cdc:	0e0b      	lsrs	r3, r1, #24
 8002cde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ce2:	0e14      	lsrs	r4, r2, #24
 8002ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce6:	3203      	adds	r2, #3
 8002ce8:	6839      	ldr	r1, [r7, #0]
 8002cea:	440a      	add	r2, r1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8002cf0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	f04f 0400 	mov.w	r4, #0
 8002cfc:	0013      	movs	r3, r2
 8002cfe:	2400      	movs	r4, #0
 8002d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d02:	3204      	adds	r2, #4
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	440a      	add	r2, r1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8002d0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	0a13      	lsrs	r3, r2, #8
 8002d1a:	2400      	movs	r4, #0
 8002d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1e:	3205      	adds	r2, #5
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	440a      	add	r2, r1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8002d28:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	f04f 0400 	mov.w	r4, #0
 8002d34:	0c13      	lsrs	r3, r2, #16
 8002d36:	2400      	movs	r4, #0
 8002d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d3a:	3206      	adds	r2, #6
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	440a      	add	r2, r1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8002d44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	f04f 0400 	mov.w	r4, #0
 8002d50:	0e13      	lsrs	r3, r2, #24
 8002d52:	2400      	movs	r4, #0
 8002d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d56:	3207      	adds	r2, #7
 8002d58:	6839      	ldr	r1, [r7, #0]
 8002d5a:	440a      	add	r2, r1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->w);
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	3308      	adds	r3, #8
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3730      	adds	r7, #48	; 0x30
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc90      	pop	{r4, r7}
 8002d70:	4770      	bx	lr

08002d72 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d72:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d76:	b092      	sub	sp, #72	; 0x48
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	61f8      	str	r0, [r7, #28]
 8002d7c:	61b9      	str	r1, [r7, #24]
    {
      int offset = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	f04f 0400 	mov.w	r4, #0
 8002d8a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d94:	69b8      	ldr	r0, [r7, #24]
 8002d96:	4403      	add	r3, r0
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2dd      	uxtb	r5, r3
 8002d9c:	f04f 0600 	mov.w	r6, #0
 8002da0:	ea45 0301 	orr.w	r3, r5, r1
 8002da4:	ea46 0402 	orr.w	r4, r6, r2
 8002da8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dac:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8002db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db2:	3301      	adds	r3, #1
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2d9      	uxtb	r1, r3
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	f04f 0400 	mov.w	r4, #0
 8002dc8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002dcc:	0213      	lsls	r3, r2, #8
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	020b      	lsls	r3, r1, #8
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002de0:	ea43 0305 	orr.w	r3, r3, r5
 8002de4:	ea44 0406 	orr.w	r4, r4, r6
 8002de8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dec:	e9d7 560e 	ldrd	r5, r6, [r7, #56]	; 0x38
 8002df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df2:	3302      	adds	r3, #2
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4413      	add	r3, r2
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2d9      	uxtb	r1, r3
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	f04f 0400 	mov.w	r4, #0
 8002e08:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002e0c:	0413      	lsls	r3, r2, #16
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	040b      	lsls	r3, r1, #16
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e20:	ea43 0305 	orr.w	r3, r3, r5
 8002e24:	ea44 0406 	orr.w	r4, r4, r6
 8002e28:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e2c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e32:	3303      	adds	r3, #3
 8002e34:	69b8      	ldr	r0, [r7, #24]
 8002e36:	4403      	add	r3, r0
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f04f 0400 	mov.w	r4, #0
 8002e40:	0a18      	lsrs	r0, r3, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002e4c:	ea43 0301 	orr.w	r3, r3, r1
 8002e50:	ea44 0402 	orr.w	r4, r4, r2
 8002e54:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002e58:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5e:	3304      	adds	r3, #4
 8002e60:	69b8      	ldr	r0, [r7, #24]
 8002e62:	4403      	add	r3, r0
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b2dd      	uxtb	r5, r3
 8002e68:	f04f 0600 	mov.w	r6, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	f04f 0400 	mov.w	r4, #0
 8002e74:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002e78:	002b      	movs	r3, r5
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e84:	ea43 0301 	orr.w	r3, r3, r1
 8002e88:	ea44 0402 	orr.w	r4, r4, r2
 8002e8c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	3305      	adds	r3, #5
 8002e98:	69b8      	ldr	r0, [r7, #24]
 8002e9a:	4403      	add	r3, r0
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b2dd      	uxtb	r5, r3
 8002ea0:	f04f 0600 	mov.w	r6, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	f04f 0400 	mov.w	r4, #0
 8002eac:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002eb0:	022b      	lsls	r3, r5, #8
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002ebc:	ea43 0301 	orr.w	r3, r3, r1
 8002ec0:	ea44 0402 	orr.w	r4, r4, r2
 8002ec4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002ec8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ece:	3306      	adds	r3, #6
 8002ed0:	69b8      	ldr	r0, [r7, #24]
 8002ed2:	4403      	add	r3, r0
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b2dd      	uxtb	r5, r3
 8002ed8:	f04f 0600 	mov.w	r6, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	f04f 0400 	mov.w	r4, #0
 8002ee4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002ee8:	042b      	lsls	r3, r5, #16
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	2300      	movs	r3, #0
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002ef4:	ea43 0301 	orr.w	r3, r3, r1
 8002ef8:	ea44 0402 	orr.w	r4, r4, r2
 8002efc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f00:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f06:	3307      	adds	r3, #7
 8002f08:	69b8      	ldr	r0, [r7, #24]
 8002f0a:	4403      	add	r3, r0
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2dd      	uxtb	r5, r3
 8002f10:	f04f 0600 	mov.w	r6, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	f04f 0400 	mov.w	r4, #0
 8002f1c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002f20:	062b      	lsls	r3, r5, #24
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f2c:	ea43 0301 	orr.w	r3, r3, r1
 8002f30:	ea44 0402 	orr.w	r4, r4, r2
 8002f34:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
      this->x = u_x.real;
 8002f38:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8002f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f44:	3308      	adds	r3, #8
 8002f46:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	f04f 0400 	mov.w	r4, #0
 8002f50:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f54:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5a:	69b8      	ldr	r0, [r7, #24]
 8002f5c:	4403      	add	r3, r0
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2dd      	uxtb	r5, r3
 8002f62:	f04f 0600 	mov.w	r6, #0
 8002f66:	ea45 0301 	orr.w	r3, r5, r1
 8002f6a:	ea46 0402 	orr.w	r4, r6, r2
 8002f6e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f72:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8002f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f78:	3301      	adds	r3, #1
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b2d9      	uxtb	r1, r3
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	f04f 0400 	mov.w	r4, #0
 8002f8e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002f92:	0213      	lsls	r3, r2, #8
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	020b      	lsls	r3, r1, #8
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002fa6:	ea43 0305 	orr.w	r3, r3, r5
 8002faa:	ea44 0406 	orr.w	r4, r4, r6
 8002fae:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fb2:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8002fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb8:	3302      	adds	r3, #2
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	b2d9      	uxtb	r1, r3
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	f04f 0400 	mov.w	r4, #0
 8002fce:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002fd2:	0413      	lsls	r3, r2, #16
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	040b      	lsls	r3, r1, #16
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002fe6:	ea43 0305 	orr.w	r3, r3, r5
 8002fea:	ea44 0406 	orr.w	r4, r4, r6
 8002fee:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ff2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff8:	3303      	adds	r3, #3
 8002ffa:	69b8      	ldr	r0, [r7, #24]
 8002ffc:	4403      	add	r3, r0
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f04f 0400 	mov.w	r4, #0
 8003006:	0a18      	lsrs	r0, r3, #8
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003012:	ea43 0301 	orr.w	r3, r3, r1
 8003016:	ea44 0402 	orr.w	r4, r4, r2
 800301a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800301e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003024:	3304      	adds	r3, #4
 8003026:	69b8      	ldr	r0, [r7, #24]
 8003028:	4403      	add	r3, r0
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2dd      	uxtb	r5, r3
 800302e:	f04f 0600 	mov.w	r6, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	f04f 0400 	mov.w	r4, #0
 800303a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800303e:	002b      	movs	r3, r5
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800304a:	ea43 0301 	orr.w	r3, r3, r1
 800304e:	ea44 0402 	orr.w	r4, r4, r2
 8003052:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003056:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800305a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305c:	3305      	adds	r3, #5
 800305e:	69b8      	ldr	r0, [r7, #24]
 8003060:	4403      	add	r3, r0
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b2dd      	uxtb	r5, r3
 8003066:	f04f 0600 	mov.w	r6, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	f04f 0400 	mov.w	r4, #0
 8003072:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003076:	022b      	lsls	r3, r5, #8
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003082:	ea43 0301 	orr.w	r3, r3, r1
 8003086:	ea44 0402 	orr.w	r4, r4, r2
 800308a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800308e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003094:	3306      	adds	r3, #6
 8003096:	69b8      	ldr	r0, [r7, #24]
 8003098:	4403      	add	r3, r0
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	b2dd      	uxtb	r5, r3
 800309e:	f04f 0600 	mov.w	r6, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	f04f 0400 	mov.w	r4, #0
 80030aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80030ae:	042b      	lsls	r3, r5, #16
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80030ba:	ea43 0301 	orr.w	r3, r3, r1
 80030be:	ea44 0402 	orr.w	r4, r4, r2
 80030c2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80030ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030cc:	3307      	adds	r3, #7
 80030ce:	69b8      	ldr	r0, [r7, #24]
 80030d0:	4403      	add	r3, r0
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b2dd      	uxtb	r5, r3
 80030d6:	f04f 0600 	mov.w	r6, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	f04f 0400 	mov.w	r4, #0
 80030e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80030e6:	062b      	lsls	r3, r5, #24
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80030f2:	ea43 0301 	orr.w	r3, r3, r1
 80030f6:	ea44 0402 	orr.w	r4, r4, r2
 80030fa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      this->y = u_y.real;
 80030fe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 8003108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310a:	3308      	adds	r3, #8
 800310c:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	f04f 0400 	mov.w	r4, #0
 8003116:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800311a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800311e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003120:	69b8      	ldr	r0, [r7, #24]
 8003122:	4403      	add	r3, r0
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b2dd      	uxtb	r5, r3
 8003128:	f04f 0600 	mov.w	r6, #0
 800312c:	ea45 0301 	orr.w	r3, r5, r1
 8003130:	ea46 0402 	orr.w	r4, r6, r2
 8003134:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003138:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800313c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313e:	3301      	adds	r3, #1
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b2d9      	uxtb	r1, r3
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	f04f 0400 	mov.w	r4, #0
 8003154:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003158:	0213      	lsls	r3, r2, #8
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	020b      	lsls	r3, r1, #8
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800316c:	ea43 0305 	orr.w	r3, r3, r5
 8003170:	ea44 0406 	orr.w	r4, r4, r6
 8003174:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003178:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	3302      	adds	r3, #2
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b2d9      	uxtb	r1, r3
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	f04f 0400 	mov.w	r4, #0
 8003194:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8003198:	0413      	lsls	r3, r2, #16
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	040b      	lsls	r3, r1, #16
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031ac:	ea43 0305 	orr.w	r3, r3, r5
 80031b0:	ea44 0406 	orr.w	r4, r4, r6
 80031b4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80031bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031be:	3303      	adds	r3, #3
 80031c0:	69b8      	ldr	r0, [r7, #24]
 80031c2:	4403      	add	r3, r0
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f04f 0400 	mov.w	r4, #0
 80031cc:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80031d0:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80031d4:	ea41 030a 	orr.w	r3, r1, sl
 80031d8:	ea42 040b 	orr.w	r4, r2, fp
 80031dc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80031e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80031e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e6:	3304      	adds	r3, #4
 80031e8:	69b8      	ldr	r0, [r7, #24]
 80031ea:	4403      	add	r3, r0
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	b2dd      	uxtb	r5, r3
 80031f0:	f04f 0600 	mov.w	r6, #0
 80031f4:	f04f 0a00 	mov.w	sl, #0
 80031f8:	f04f 0b00 	mov.w	fp, #0
 80031fc:	46ab      	mov	fp, r5
 80031fe:	f04f 0a00 	mov.w	sl, #0
 8003202:	ea4a 0301 	orr.w	r3, sl, r1
 8003206:	ea4b 0402 	orr.w	r4, fp, r2
 800320a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800320e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003214:	3305      	adds	r3, #5
 8003216:	69b8      	ldr	r0, [r7, #24]
 8003218:	4403      	add	r3, r0
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b2dd      	uxtb	r5, r3
 800321e:	f04f 0600 	mov.w	r6, #0
 8003222:	f04f 0a00 	mov.w	sl, #0
 8003226:	f04f 0b00 	mov.w	fp, #0
 800322a:	ea4f 2b05 	mov.w	fp, r5, lsl #8
 800322e:	f04f 0a00 	mov.w	sl, #0
 8003232:	ea4a 0301 	orr.w	r3, sl, r1
 8003236:	ea4b 0402 	orr.w	r4, fp, r2
 800323a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800323e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003244:	3306      	adds	r3, #6
 8003246:	69b8      	ldr	r0, [r7, #24]
 8003248:	4403      	add	r3, r0
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	b2dd      	uxtb	r5, r3
 800324e:	f04f 0600 	mov.w	r6, #0
 8003252:	f04f 0a00 	mov.w	sl, #0
 8003256:	f04f 0b00 	mov.w	fp, #0
 800325a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 800325e:	f04f 0a00 	mov.w	sl, #0
 8003262:	ea4a 0301 	orr.w	r3, sl, r1
 8003266:	ea4b 0402 	orr.w	r4, fp, r2
 800326a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800326e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003274:	3307      	adds	r3, #7
 8003276:	69b8      	ldr	r0, [r7, #24]
 8003278:	4403      	add	r3, r0
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b2dd      	uxtb	r5, r3
 800327e:	f04f 0600 	mov.w	r6, #0
 8003282:	f04f 0a00 	mov.w	sl, #0
 8003286:	f04f 0b00 	mov.w	fp, #0
 800328a:	ea4f 6b05 	mov.w	fp, r5, lsl #24
 800328e:	f04f 0a00 	mov.w	sl, #0
 8003292:	ea4a 0301 	orr.w	r3, sl, r1
 8003296:	ea4b 0402 	orr.w	r4, fp, r2
 800329a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->z = u_z.real;
 800329e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 80032a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032aa:	3308      	adds	r3, #8
 80032ac:	647b      	str	r3, [r7, #68]	; 0x44
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	f04f 0400 	mov.w	r4, #0
 80032b6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80032ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80032be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c0:	69b8      	ldr	r0, [r7, #24]
 80032c2:	4403      	add	r3, r0
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b2dd      	uxtb	r5, r3
 80032c8:	f04f 0600 	mov.w	r6, #0
 80032cc:	ea45 0301 	orr.w	r3, r5, r1
 80032d0:	ea46 0402 	orr.w	r4, r6, r2
 80032d4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80032d8:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80032dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032de:	3301      	adds	r3, #1
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4413      	add	r3, r2
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	b2d9      	uxtb	r1, r3
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0a00 	mov.w	sl, #0
 80032f0:	f04f 0b00 	mov.w	fp, #0
 80032f4:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 80032f8:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 80032fc:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8003300:	ea4a 0305 	orr.w	r3, sl, r5
 8003304:	ea4b 0406 	orr.w	r4, fp, r6
 8003308:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800330c:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8003310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003312:	3302      	adds	r3, #2
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4413      	add	r3, r2
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	b2d9      	uxtb	r1, r3
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0a00 	mov.w	sl, #0
 8003324:	f04f 0b00 	mov.w	fp, #0
 8003328:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 800332c:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8003330:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8003334:	ea4a 0305 	orr.w	r3, sl, r5
 8003338:	ea4b 0406 	orr.w	r4, fp, r6
 800333c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003340:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003346:	3303      	adds	r3, #3
 8003348:	69b8      	ldr	r0, [r7, #24]
 800334a:	4403      	add	r3, r0
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f04f 0400 	mov.w	r4, #0
 8003354:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003358:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800335c:	ea41 0308 	orr.w	r3, r1, r8
 8003360:	ea42 0409 	orr.w	r4, r2, r9
 8003364:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003368:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800336c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336e:	3304      	adds	r3, #4
 8003370:	69b8      	ldr	r0, [r7, #24]
 8003372:	4403      	add	r3, r0
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b2dd      	uxtb	r5, r3
 8003378:	f04f 0600 	mov.w	r6, #0
 800337c:	f04f 0800 	mov.w	r8, #0
 8003380:	f04f 0900 	mov.w	r9, #0
 8003384:	46a9      	mov	r9, r5
 8003386:	f04f 0800 	mov.w	r8, #0
 800338a:	ea48 0301 	orr.w	r3, r8, r1
 800338e:	ea49 0402 	orr.w	r4, r9, r2
 8003392:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003396:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800339a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339c:	3305      	adds	r3, #5
 800339e:	69b8      	ldr	r0, [r7, #24]
 80033a0:	4403      	add	r3, r0
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	b2dd      	uxtb	r5, r3
 80033a6:	f04f 0600 	mov.w	r6, #0
 80033aa:	f04f 0800 	mov.w	r8, #0
 80033ae:	f04f 0900 	mov.w	r9, #0
 80033b2:	ea4f 2905 	mov.w	r9, r5, lsl #8
 80033b6:	f04f 0800 	mov.w	r8, #0
 80033ba:	ea48 0301 	orr.w	r3, r8, r1
 80033be:	ea49 0402 	orr.w	r4, r9, r2
 80033c2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80033ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033cc:	3306      	adds	r3, #6
 80033ce:	69b8      	ldr	r0, [r7, #24]
 80033d0:	4403      	add	r3, r0
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2dd      	uxtb	r5, r3
 80033d6:	f04f 0600 	mov.w	r6, #0
 80033da:	f04f 0800 	mov.w	r8, #0
 80033de:	f04f 0900 	mov.w	r9, #0
 80033e2:	ea4f 4905 	mov.w	r9, r5, lsl #16
 80033e6:	f04f 0800 	mov.w	r8, #0
 80033ea:	ea48 0301 	orr.w	r3, r8, r1
 80033ee:	ea49 0402 	orr.w	r4, r9, r2
 80033f2:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80033f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80033fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fc:	3307      	adds	r3, #7
 80033fe:	69b8      	ldr	r0, [r7, #24]
 8003400:	4403      	add	r3, r0
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b2dd      	uxtb	r5, r3
 8003406:	f04f 0600 	mov.w	r6, #0
 800340a:	f04f 0800 	mov.w	r8, #0
 800340e:	f04f 0900 	mov.w	r9, #0
 8003412:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8003416:	f04f 0800 	mov.w	r8, #0
 800341a:	ea48 0301 	orr.w	r3, r8, r1
 800341e:	ea49 0402 	orr.w	r4, r9, r2
 8003422:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->w = u_w.real;
 8003426:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	e9c2 3408 	strd	r3, r4, [r2, #32]
      offset += sizeof(this->w);
 8003430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003432:	3308      	adds	r3, #8
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
     return offset;
 8003436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003438:	4618      	mov	r0, r3
 800343a:	3748      	adds	r7, #72	; 0x48
 800343c:	46bd      	mov	sp, r7
 800343e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003442:	4770      	bx	lr

08003444 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	08014de0 	.word	0x08014de0

08003460 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	08014dfc 	.word	0x08014dfc

0800347c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800347c:	b590      	push	{r4, r7, lr}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd feec 	bl	8001264 <_ZN3ros3MsgC1Ev>
 800348c:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	f04f 0400 	mov.w	r4, #0
 800349c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	f04f 0400 	mov.w	r4, #0
 80034aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	f04f 0400 	mov.w	r4, #0
 80034b8:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd90      	pop	{r4, r7, pc}
 80034c6:	bf00      	nop
 80034c8:	08015478 	.word	0x08015478

080034cc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034cc:	b490      	push	{r4, r7}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80034e0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80034e4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80034e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ea:	6839      	ldr	r1, [r7, #0]
 80034ec:	440a      	add	r2, r1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80034f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	f04f 0400 	mov.w	r4, #0
 80034fe:	0a0b      	lsrs	r3, r1, #8
 8003500:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003504:	0a14      	lsrs	r4, r2, #8
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	3201      	adds	r2, #1
 800350a:	6839      	ldr	r1, [r7, #0]
 800350c:	440a      	add	r2, r1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003512:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	f04f 0400 	mov.w	r4, #0
 800351e:	0c0b      	lsrs	r3, r1, #16
 8003520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003524:	0c14      	lsrs	r4, r2, #16
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	3202      	adds	r2, #2
 800352a:	6839      	ldr	r1, [r7, #0]
 800352c:	440a      	add	r2, r1
 800352e:	b2db      	uxtb	r3, r3
 8003530:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003532:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	f04f 0400 	mov.w	r4, #0
 800353e:	0e0b      	lsrs	r3, r1, #24
 8003540:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003544:	0e14      	lsrs	r4, r2, #24
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	3203      	adds	r2, #3
 800354a:	6839      	ldr	r1, [r7, #0]
 800354c:	440a      	add	r2, r1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003552:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	f04f 0400 	mov.w	r4, #0
 800355e:	0013      	movs	r3, r2
 8003560:	2400      	movs	r4, #0
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	3204      	adds	r2, #4
 8003566:	6839      	ldr	r1, [r7, #0]
 8003568:	440a      	add	r2, r1
 800356a:	b2db      	uxtb	r3, r3
 800356c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800356e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	f04f 0400 	mov.w	r4, #0
 800357a:	0a13      	lsrs	r3, r2, #8
 800357c:	2400      	movs	r4, #0
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	3205      	adds	r2, #5
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	440a      	add	r2, r1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800358a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	f04f 0400 	mov.w	r4, #0
 8003596:	0c13      	lsrs	r3, r2, #16
 8003598:	2400      	movs	r4, #0
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	3206      	adds	r2, #6
 800359e:	6839      	ldr	r1, [r7, #0]
 80035a0:	440a      	add	r2, r1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80035a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	f04f 0400 	mov.w	r4, #0
 80035b2:	0e13      	lsrs	r3, r2, #24
 80035b4:	2400      	movs	r4, #0
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	3207      	adds	r2, #7
 80035ba:	6839      	ldr	r1, [r7, #0]
 80035bc:	440a      	add	r2, r1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	3308      	adds	r3, #8
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80035ce:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80035d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	440a      	add	r2, r1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80035e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	f04f 0400 	mov.w	r4, #0
 80035ec:	0a0b      	lsrs	r3, r1, #8
 80035ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80035f2:	0a14      	lsrs	r4, r2, #8
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	3201      	adds	r2, #1
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	440a      	add	r2, r1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003600:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	f04f 0400 	mov.w	r4, #0
 800360c:	0c0b      	lsrs	r3, r1, #16
 800360e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003612:	0c14      	lsrs	r4, r2, #16
 8003614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003616:	3202      	adds	r2, #2
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	440a      	add	r2, r1
 800361c:	b2db      	uxtb	r3, r3
 800361e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003620:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f04f 0400 	mov.w	r4, #0
 800362c:	0e0b      	lsrs	r3, r1, #24
 800362e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003632:	0e14      	lsrs	r4, r2, #24
 8003634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003636:	3203      	adds	r2, #3
 8003638:	6839      	ldr	r1, [r7, #0]
 800363a:	440a      	add	r2, r1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003640:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	f04f 0400 	mov.w	r4, #0
 800364c:	0013      	movs	r3, r2
 800364e:	2400      	movs	r4, #0
 8003650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003652:	3204      	adds	r2, #4
 8003654:	6839      	ldr	r1, [r7, #0]
 8003656:	440a      	add	r2, r1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800365c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	f04f 0400 	mov.w	r4, #0
 8003668:	0a13      	lsrs	r3, r2, #8
 800366a:	2400      	movs	r4, #0
 800366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366e:	3205      	adds	r2, #5
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	440a      	add	r2, r1
 8003674:	b2db      	uxtb	r3, r3
 8003676:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003678:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	f04f 0400 	mov.w	r4, #0
 8003684:	0c13      	lsrs	r3, r2, #16
 8003686:	2400      	movs	r4, #0
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	3206      	adds	r2, #6
 800368c:	6839      	ldr	r1, [r7, #0]
 800368e:	440a      	add	r2, r1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003694:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	f04f 0400 	mov.w	r4, #0
 80036a0:	0e13      	lsrs	r3, r2, #24
 80036a2:	2400      	movs	r4, #0
 80036a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a6:	3207      	adds	r2, #7
 80036a8:	6839      	ldr	r1, [r7, #0]
 80036aa:	440a      	add	r2, r1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	3308      	adds	r3, #8
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80036bc:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80036c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c6:	6839      	ldr	r1, [r7, #0]
 80036c8:	440a      	add	r2, r1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80036ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	f04f 0400 	mov.w	r4, #0
 80036da:	0a0b      	lsrs	r3, r1, #8
 80036dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036e0:	0a14      	lsrs	r4, r2, #8
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	3201      	adds	r2, #1
 80036e6:	6839      	ldr	r1, [r7, #0]
 80036e8:	440a      	add	r2, r1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80036ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	f04f 0400 	mov.w	r4, #0
 80036fa:	0c0b      	lsrs	r3, r1, #16
 80036fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003700:	0c14      	lsrs	r4, r2, #16
 8003702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003704:	3202      	adds	r2, #2
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	440a      	add	r2, r1
 800370a:	b2db      	uxtb	r3, r3
 800370c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800370e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	f04f 0400 	mov.w	r4, #0
 800371a:	0e0b      	lsrs	r3, r1, #24
 800371c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003720:	0e14      	lsrs	r4, r2, #24
 8003722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003724:	3203      	adds	r2, #3
 8003726:	6839      	ldr	r1, [r7, #0]
 8003728:	440a      	add	r2, r1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800372e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f04f 0400 	mov.w	r4, #0
 800373a:	0013      	movs	r3, r2
 800373c:	2400      	movs	r4, #0
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	3204      	adds	r2, #4
 8003742:	6839      	ldr	r1, [r7, #0]
 8003744:	440a      	add	r2, r1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800374a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	f04f 0400 	mov.w	r4, #0
 8003756:	0a13      	lsrs	r3, r2, #8
 8003758:	2400      	movs	r4, #0
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	3205      	adds	r2, #5
 800375e:	6839      	ldr	r1, [r7, #0]
 8003760:	440a      	add	r2, r1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003766:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	f04f 0400 	mov.w	r4, #0
 8003772:	0c13      	lsrs	r3, r2, #16
 8003774:	2400      	movs	r4, #0
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	3206      	adds	r2, #6
 800377a:	6839      	ldr	r1, [r7, #0]
 800377c:	440a      	add	r2, r1
 800377e:	b2db      	uxtb	r3, r3
 8003780:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003782:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	f04f 0400 	mov.w	r4, #0
 800378e:	0e13      	lsrs	r3, r2, #24
 8003790:	2400      	movs	r4, #0
 8003792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003794:	3207      	adds	r2, #7
 8003796:	6839      	ldr	r1, [r7, #0]
 8003798:	440a      	add	r2, r1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	3308      	adds	r3, #8
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80037a6:	4618      	mov	r0, r3
 80037a8:	3728      	adds	r7, #40	; 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc90      	pop	{r4, r7}
 80037ae:	4770      	bx	lr

080037b0 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80037b0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037b4:	b08c      	sub	sp, #48	; 0x30
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	68b8      	ldr	r0, [r7, #8]
 80037d4:	4403      	add	r3, r0
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461c      	mov	r4, r3
 80037da:	b2e4      	uxtb	r4, r4
 80037dc:	f04f 0500 	mov.w	r5, #0
 80037e0:	4623      	mov	r3, r4
 80037e2:	462c      	mov	r4, r5
 80037e4:	ea43 0301 	orr.w	r3, r3, r1
 80037e8:	ea44 0402 	orr.w	r4, r4, r2
 80037ec:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037f0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80037f4:	461d      	mov	r5, r3
 80037f6:	4626      	mov	r6, r4
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	3301      	adds	r3, #1
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	4413      	add	r3, r2
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b2d9      	uxtb	r1, r3
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	f04f 0400 	mov.w	r4, #0
 8003810:	0214      	lsls	r4, r2, #8
 8003812:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003816:	020b      	lsls	r3, r1, #8
 8003818:	4629      	mov	r1, r5
 800381a:	4632      	mov	r2, r6
 800381c:	ea41 0103 	orr.w	r1, r1, r3
 8003820:	ea42 0204 	orr.w	r2, r2, r4
 8003824:	460b      	mov	r3, r1
 8003826:	4614      	mov	r4, r2
 8003828:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800382c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003830:	461d      	mov	r5, r3
 8003832:	4626      	mov	r6, r4
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	3302      	adds	r3, #2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	4413      	add	r3, r2
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b2d9      	uxtb	r1, r3
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	f04f 0400 	mov.w	r4, #0
 800384c:	0414      	lsls	r4, r2, #16
 800384e:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8003852:	040b      	lsls	r3, r1, #16
 8003854:	4629      	mov	r1, r5
 8003856:	4632      	mov	r2, r6
 8003858:	ea41 0103 	orr.w	r1, r1, r3
 800385c:	ea42 0204 	orr.w	r2, r2, r4
 8003860:	460b      	mov	r3, r1
 8003862:	4614      	mov	r4, r2
 8003864:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003868:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	3303      	adds	r3, #3
 8003870:	68b8      	ldr	r0, [r7, #8]
 8003872:	4403      	add	r3, r0
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f04f 0400 	mov.w	r4, #0
 800387c:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8003880:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8003884:	ea41 030a 	orr.w	r3, r1, sl
 8003888:	ea42 040b 	orr.w	r4, r2, fp
 800388c:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003890:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003896:	3304      	adds	r3, #4
 8003898:	68b8      	ldr	r0, [r7, #8]
 800389a:	4403      	add	r3, r0
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	fa5f fa83 	uxtb.w	sl, r3
 80038a2:	f04f 0b00 	mov.w	fp, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	f04f 0400 	mov.w	r4, #0
 80038ae:	4625      	mov	r5, r4
 80038b0:	461c      	mov	r4, r3
 80038b2:	4653      	mov	r3, sl
 80038b4:	461d      	mov	r5, r3
 80038b6:	2300      	movs	r3, #0
 80038b8:	461c      	mov	r4, r3
 80038ba:	4623      	mov	r3, r4
 80038bc:	462c      	mov	r4, r5
 80038be:	ea43 0301 	orr.w	r3, r3, r1
 80038c2:	ea44 0402 	orr.w	r4, r4, r2
 80038c6:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80038ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	3305      	adds	r3, #5
 80038d2:	68b8      	ldr	r0, [r7, #8]
 80038d4:	4403      	add	r3, r0
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	fa5f fa83 	uxtb.w	sl, r3
 80038dc:	f04f 0b00 	mov.w	fp, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	f04f 0400 	mov.w	r4, #0
 80038e8:	4625      	mov	r5, r4
 80038ea:	461c      	mov	r4, r3
 80038ec:	ea4f 230a 	mov.w	r3, sl, lsl #8
 80038f0:	461d      	mov	r5, r3
 80038f2:	2300      	movs	r3, #0
 80038f4:	461c      	mov	r4, r3
 80038f6:	4623      	mov	r3, r4
 80038f8:	462c      	mov	r4, r5
 80038fa:	ea43 0301 	orr.w	r3, r3, r1
 80038fe:	ea44 0402 	orr.w	r4, r4, r2
 8003902:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003906:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	3306      	adds	r3, #6
 800390e:	68b8      	ldr	r0, [r7, #8]
 8003910:	4403      	add	r3, r0
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	fa5f fa83 	uxtb.w	sl, r3
 8003918:	f04f 0b00 	mov.w	fp, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	f04f 0400 	mov.w	r4, #0
 8003924:	4625      	mov	r5, r4
 8003926:	461c      	mov	r4, r3
 8003928:	ea4f 430a 	mov.w	r3, sl, lsl #16
 800392c:	461d      	mov	r5, r3
 800392e:	2300      	movs	r3, #0
 8003930:	461c      	mov	r4, r3
 8003932:	4623      	mov	r3, r4
 8003934:	462c      	mov	r4, r5
 8003936:	ea43 0301 	orr.w	r3, r3, r1
 800393a:	ea44 0402 	orr.w	r4, r4, r2
 800393e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003942:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	3307      	adds	r3, #7
 800394a:	68b8      	ldr	r0, [r7, #8]
 800394c:	4403      	add	r3, r0
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	fa5f fa83 	uxtb.w	sl, r3
 8003954:	f04f 0b00 	mov.w	fp, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	f04f 0400 	mov.w	r4, #0
 8003960:	4625      	mov	r5, r4
 8003962:	461c      	mov	r4, r3
 8003964:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8003968:	461d      	mov	r5, r3
 800396a:	2300      	movs	r3, #0
 800396c:	461c      	mov	r4, r3
 800396e:	4623      	mov	r3, r4
 8003970:	462c      	mov	r4, r5
 8003972:	ea43 0301 	orr.w	r3, r3, r1
 8003976:	ea44 0402 	orr.w	r4, r4, r2
 800397a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 800397e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	3308      	adds	r3, #8
 800398c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	f04f 0400 	mov.w	r4, #0
 8003996:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800399a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	68b8      	ldr	r0, [r7, #8]
 80039a2:	4403      	add	r3, r0
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	fa5f fa83 	uxtb.w	sl, r3
 80039aa:	f04f 0b00 	mov.w	fp, #0
 80039ae:	ea4a 0301 	orr.w	r3, sl, r1
 80039b2:	ea4b 0402 	orr.w	r4, fp, r2
 80039b6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	3301      	adds	r3, #1
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	4413      	add	r3, r2
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	b2d9      	uxtb	r1, r3
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	4625      	mov	r5, r4
 80039d8:	461c      	mov	r4, r3
 80039da:	0213      	lsls	r3, r2, #8
 80039dc:	461d      	mov	r5, r3
 80039de:	462b      	mov	r3, r5
 80039e0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80039e4:	461d      	mov	r5, r3
 80039e6:	020b      	lsls	r3, r1, #8
 80039e8:	461c      	mov	r4, r3
 80039ea:	4623      	mov	r3, r4
 80039ec:	462c      	mov	r4, r5
 80039ee:	ea43 030a 	orr.w	r3, r3, sl
 80039f2:	ea44 040b 	orr.w	r4, r4, fp
 80039f6:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	3302      	adds	r3, #2
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	4413      	add	r3, r2
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	b2d9      	uxtb	r1, r3
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	f04f 0400 	mov.w	r4, #0
 8003a16:	4625      	mov	r5, r4
 8003a18:	461c      	mov	r4, r3
 8003a1a:	0413      	lsls	r3, r2, #16
 8003a1c:	461d      	mov	r5, r3
 8003a1e:	462b      	mov	r3, r5
 8003a20:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8003a24:	461d      	mov	r5, r3
 8003a26:	040b      	lsls	r3, r1, #16
 8003a28:	461c      	mov	r4, r3
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	462c      	mov	r4, r5
 8003a2e:	ea43 030a 	orr.w	r3, r3, sl
 8003a32:	ea44 040b 	orr.w	r4, r4, fp
 8003a36:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a3a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	3303      	adds	r3, #3
 8003a42:	68b8      	ldr	r0, [r7, #8]
 8003a44:	4403      	add	r3, r0
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f04f 0400 	mov.w	r4, #0
 8003a4e:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003a52:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8003a56:	ea41 0308 	orr.w	r3, r1, r8
 8003a5a:	ea42 0409 	orr.w	r4, r2, r9
 8003a5e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	3304      	adds	r3, #4
 8003a6a:	68b8      	ldr	r0, [r7, #8]
 8003a6c:	4403      	add	r3, r0
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	fa5f f883 	uxtb.w	r8, r3
 8003a74:	f04f 0900 	mov.w	r9, #0
 8003a78:	f04f 0a00 	mov.w	sl, #0
 8003a7c:	f04f 0b00 	mov.w	fp, #0
 8003a80:	46c3      	mov	fp, r8
 8003a82:	f04f 0a00 	mov.w	sl, #0
 8003a86:	ea4a 0301 	orr.w	r3, sl, r1
 8003a8a:	ea4b 0402 	orr.w	r4, fp, r2
 8003a8e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	3305      	adds	r3, #5
 8003a9a:	68b8      	ldr	r0, [r7, #8]
 8003a9c:	4403      	add	r3, r0
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	fa5f f883 	uxtb.w	r8, r3
 8003aa4:	f04f 0900 	mov.w	r9, #0
 8003aa8:	f04f 0a00 	mov.w	sl, #0
 8003aac:	f04f 0b00 	mov.w	fp, #0
 8003ab0:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8003ab4:	f04f 0a00 	mov.w	sl, #0
 8003ab8:	ea4a 0301 	orr.w	r3, sl, r1
 8003abc:	ea4b 0402 	orr.w	r4, fp, r2
 8003ac0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ac4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	3306      	adds	r3, #6
 8003acc:	68b8      	ldr	r0, [r7, #8]
 8003ace:	4403      	add	r3, r0
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	fa5f f883 	uxtb.w	r8, r3
 8003ad6:	f04f 0900 	mov.w	r9, #0
 8003ada:	f04f 0a00 	mov.w	sl, #0
 8003ade:	f04f 0b00 	mov.w	fp, #0
 8003ae2:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8003ae6:	f04f 0a00 	mov.w	sl, #0
 8003aea:	ea4a 0301 	orr.w	r3, sl, r1
 8003aee:	ea4b 0402 	orr.w	r4, fp, r2
 8003af2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003af6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	3307      	adds	r3, #7
 8003afe:	68b8      	ldr	r0, [r7, #8]
 8003b00:	4403      	add	r3, r0
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	fa5f f883 	uxtb.w	r8, r3
 8003b08:	f04f 0900 	mov.w	r9, #0
 8003b0c:	f04f 0a00 	mov.w	sl, #0
 8003b10:	f04f 0b00 	mov.w	fp, #0
 8003b14:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 8003b18:	f04f 0a00 	mov.w	sl, #0
 8003b1c:	ea4a 0301 	orr.w	r3, sl, r1
 8003b20:	ea4b 0402 	orr.w	r4, fp, r2
 8003b24:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 8003b28:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	3308      	adds	r3, #8
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	f04f 0400 	mov.w	r4, #0
 8003b40:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	68b8      	ldr	r0, [r7, #8]
 8003b4c:	4403      	add	r3, r0
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	fa5f f883 	uxtb.w	r8, r3
 8003b54:	f04f 0900 	mov.w	r9, #0
 8003b58:	ea48 0301 	orr.w	r3, r8, r1
 8003b5c:	ea49 0402 	orr.w	r4, r9, r2
 8003b60:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b64:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	4413      	add	r3, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2d9      	uxtb	r1, r3
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0a00 	mov.w	sl, #0
 8003b7c:	f04f 0b00 	mov.w	fp, #0
 8003b80:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8003b84:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8003b88:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8003b8c:	ea4a 0308 	orr.w	r3, sl, r8
 8003b90:	ea4b 0409 	orr.w	r4, fp, r9
 8003b94:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b98:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	3302      	adds	r3, #2
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2d9      	uxtb	r1, r3
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0a00 	mov.w	sl, #0
 8003bb0:	f04f 0b00 	mov.w	fp, #0
 8003bb4:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8003bb8:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8003bbc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8003bc0:	ea4a 0308 	orr.w	r3, sl, r8
 8003bc4:	ea4b 0409 	orr.w	r4, fp, r9
 8003bc8:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003bcc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	3303      	adds	r3, #3
 8003bd4:	68b8      	ldr	r0, [r7, #8]
 8003bd6:	4403      	add	r3, r0
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f04f 0400 	mov.w	r4, #0
 8003be0:	0a18      	lsrs	r0, r3, #8
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003bec:	ea43 0301 	orr.w	r3, r3, r1
 8003bf0:	ea44 0402 	orr.w	r4, r4, r2
 8003bf4:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003bf8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	3304      	adds	r3, #4
 8003c00:	68b8      	ldr	r0, [r7, #8]
 8003c02:	4403      	add	r3, r0
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	b2dd      	uxtb	r5, r3
 8003c08:	f04f 0600 	mov.w	r6, #0
 8003c0c:	f04f 0800 	mov.w	r8, #0
 8003c10:	f04f 0900 	mov.w	r9, #0
 8003c14:	46a9      	mov	r9, r5
 8003c16:	f04f 0800 	mov.w	r8, #0
 8003c1a:	ea48 0301 	orr.w	r3, r8, r1
 8003c1e:	ea49 0402 	orr.w	r4, r9, r2
 8003c22:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c26:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	3305      	adds	r3, #5
 8003c2e:	68b8      	ldr	r0, [r7, #8]
 8003c30:	4403      	add	r3, r0
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b2dd      	uxtb	r5, r3
 8003c36:	f04f 0600 	mov.w	r6, #0
 8003c3a:	f04f 0800 	mov.w	r8, #0
 8003c3e:	f04f 0900 	mov.w	r9, #0
 8003c42:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8003c46:	f04f 0800 	mov.w	r8, #0
 8003c4a:	ea48 0301 	orr.w	r3, r8, r1
 8003c4e:	ea49 0402 	orr.w	r4, r9, r2
 8003c52:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	3306      	adds	r3, #6
 8003c5e:	68b8      	ldr	r0, [r7, #8]
 8003c60:	4403      	add	r3, r0
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	b2dd      	uxtb	r5, r3
 8003c66:	f04f 0600 	mov.w	r6, #0
 8003c6a:	f04f 0800 	mov.w	r8, #0
 8003c6e:	f04f 0900 	mov.w	r9, #0
 8003c72:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8003c76:	f04f 0800 	mov.w	r8, #0
 8003c7a:	ea48 0301 	orr.w	r3, r8, r1
 8003c7e:	ea49 0402 	orr.w	r4, r9, r2
 8003c82:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c86:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	3307      	adds	r3, #7
 8003c8e:	68b8      	ldr	r0, [r7, #8]
 8003c90:	4403      	add	r3, r0
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b2dd      	uxtb	r5, r3
 8003c96:	f04f 0600 	mov.w	r6, #0
 8003c9a:	f04f 0800 	mov.w	r8, #0
 8003c9e:	f04f 0900 	mov.w	r9, #0
 8003ca2:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8003ca6:	f04f 0800 	mov.w	r8, #0
 8003caa:	ea48 0301 	orr.w	r3, r8, r1
 8003cae:	ea49 0402 	orr.w	r4, r9, r2
 8003cb2:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 8003cb6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3730      	adds	r7, #48	; 0x30
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cd2:	4770      	bx	lr

08003cd4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	08014e20 	.word	0x08014e20

08003cf0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	08014e38 	.word	0x08014e38

08003d0c <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd faa4 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8003d1c:	4a24      	ldr	r2, [pc, #144]	; (8003db0 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fc78 	bl	800261c <_ZN8std_msgs6HeaderC1Ev>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3318      	adds	r3, #24
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe fe07 	bl	8002944 <_ZN13geometry_msgs10QuaternionC1Ev>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	db08      	blt.n	8003d54 <_ZN11sensor_msgs3ImuC1Ev+0x48>
 8003d42:	f04f 0000 	mov.w	r0, #0
 8003d46:	f04f 0100 	mov.w	r1, #0
 8003d4a:	e9c2 0100 	strd	r0, r1, [r2]
 8003d4e:	3208      	adds	r2, #8
 8003d50:	3b01      	subs	r3, #1
 8003d52:	e7f4      	b.n	8003d3e <_ZN11sensor_msgs3ImuC1Ev+0x32>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3388      	adds	r3, #136	; 0x88
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fb8f 	bl	800347c <_ZN13geometry_msgs7Vector3C1Ev>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8003d64:	2308      	movs	r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db08      	blt.n	8003d7c <_ZN11sensor_msgs3ImuC1Ev+0x70>
 8003d6a:	f04f 0000 	mov.w	r0, #0
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	e9c2 0100 	strd	r0, r1, [r2]
 8003d76:	3208      	adds	r2, #8
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	e7f4      	b.n	8003d66 <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	33f0      	adds	r3, #240	; 0xf0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fb7b 	bl	800347c <_ZN13geometry_msgs7Vector3C1Ev>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	db08      	blt.n	8003da4 <_ZN11sensor_msgs3ImuC1Ev+0x98>
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	e9c2 0100 	strd	r0, r1, [r2]
 8003d9e:	3208      	adds	r2, #8
 8003da0:	3b01      	subs	r3, #1
 8003da2:	e7f4      	b.n	8003d8e <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	08015460 	.word	0x08015460

08003db4 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b08d      	sub	sp, #52	; 0x34
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	1d18      	adds	r0, r3, #4
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	4413      	add	r3, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f7fe fc45 	bl	800265c <_ZNK8std_msgs6Header9serializeEPh>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	4413      	add	r3, r2
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f103 0018 	add.w	r0, r3, #24
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	f7fe fdda 	bl	80029a0 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	4413      	add	r3, r2
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003df4:	2300      	movs	r3, #0
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d87e      	bhi.n	8003efc <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	3308      	adds	r3, #8
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e0c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8003e10:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	440a      	add	r2, r1
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8003e1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	f04f 0400 	mov.w	r4, #0
 8003e2a:	0a0b      	lsrs	r3, r1, #8
 8003e2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e30:	0a14      	lsrs	r4, r2, #8
 8003e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e34:	3201      	adds	r2, #1
 8003e36:	6839      	ldr	r1, [r7, #0]
 8003e38:	440a      	add	r2, r1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8003e3e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	f04f 0400 	mov.w	r4, #0
 8003e4a:	0c0b      	lsrs	r3, r1, #16
 8003e4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e50:	0c14      	lsrs	r4, r2, #16
 8003e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e54:	3202      	adds	r2, #2
 8003e56:	6839      	ldr	r1, [r7, #0]
 8003e58:	440a      	add	r2, r1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 8003e5e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	f04f 0400 	mov.w	r4, #0
 8003e6a:	0e0b      	lsrs	r3, r1, #24
 8003e6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e70:	0e14      	lsrs	r4, r2, #24
 8003e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e74:	3203      	adds	r2, #3
 8003e76:	6839      	ldr	r1, [r7, #0]
 8003e78:	440a      	add	r2, r1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 8003e7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	f04f 0400 	mov.w	r4, #0
 8003e8a:	0013      	movs	r3, r2
 8003e8c:	2400      	movs	r4, #0
 8003e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e90:	3204      	adds	r2, #4
 8003e92:	6839      	ldr	r1, [r7, #0]
 8003e94:	440a      	add	r2, r1
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 8003e9a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	f04f 0400 	mov.w	r4, #0
 8003ea6:	0a13      	lsrs	r3, r2, #8
 8003ea8:	2400      	movs	r4, #0
 8003eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eac:	3205      	adds	r2, #5
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 8003eb6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	f04f 0400 	mov.w	r4, #0
 8003ec2:	0c13      	lsrs	r3, r2, #16
 8003ec4:	2400      	movs	r4, #0
 8003ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec8:	3206      	adds	r2, #6
 8003eca:	6839      	ldr	r1, [r7, #0]
 8003ecc:	440a      	add	r2, r1
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 8003ed2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f04f 0400 	mov.w	r4, #0
 8003ede:	0e13      	lsrs	r3, r2, #24
 8003ee0:	2400      	movs	r4, #0
 8003ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee4:	3207      	adds	r2, #7
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	440a      	add	r2, r1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003efa:	e77d      	b.n	8003df8 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	4413      	add	r3, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7ff fadf 	bl	80034cc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	4413      	add	r3, r2
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d87e      	bhi.n	800401e <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	3315      	adds	r3, #21
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4413      	add	r3, r2
 8003f2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f2e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8003f32:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f38:	6839      	ldr	r1, [r7, #0]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8003f40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	f04f 0400 	mov.w	r4, #0
 8003f4c:	0a0b      	lsrs	r3, r1, #8
 8003f4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003f52:	0a14      	lsrs	r4, r2, #8
 8003f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f56:	3201      	adds	r2, #1
 8003f58:	6839      	ldr	r1, [r7, #0]
 8003f5a:	440a      	add	r2, r1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8003f60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	f04f 0400 	mov.w	r4, #0
 8003f6c:	0c0b      	lsrs	r3, r1, #16
 8003f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f72:	0c14      	lsrs	r4, r2, #16
 8003f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f76:	3202      	adds	r2, #2
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8003f80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	f04f 0400 	mov.w	r4, #0
 8003f8c:	0e0b      	lsrs	r3, r1, #24
 8003f8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f92:	0e14      	lsrs	r4, r2, #24
 8003f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f96:	3203      	adds	r2, #3
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 8003fa0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	f04f 0400 	mov.w	r4, #0
 8003fac:	0013      	movs	r3, r2
 8003fae:	2400      	movs	r4, #0
 8003fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb2:	3204      	adds	r2, #4
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8003fbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	f04f 0400 	mov.w	r4, #0
 8003fc8:	0a13      	lsrs	r3, r2, #8
 8003fca:	2400      	movs	r4, #0
 8003fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fce:	3205      	adds	r2, #5
 8003fd0:	6839      	ldr	r1, [r7, #0]
 8003fd2:	440a      	add	r2, r1
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8003fd8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	f04f 0400 	mov.w	r4, #0
 8003fe4:	0c13      	lsrs	r3, r2, #16
 8003fe6:	2400      	movs	r4, #0
 8003fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fea:	3206      	adds	r2, #6
 8003fec:	6839      	ldr	r1, [r7, #0]
 8003fee:	440a      	add	r2, r1
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8003ff4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	f04f 0400 	mov.w	r4, #0
 8004000:	0e13      	lsrs	r3, r2, #24
 8004002:	2400      	movs	r4, #0
 8004004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004006:	3207      	adds	r2, #7
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	440a      	add	r2, r1
 800400c:	b2db      	uxtb	r3, r3
 800400e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	3308      	adds	r3, #8
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	3301      	adds	r3, #1
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
 800401c:	e77d      	b.n	8003f1a <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	4413      	add	r3, r2
 800402a:	4619      	mov	r1, r3
 800402c:	f7ff fa4e 	bl	80034cc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004030:	4602      	mov	r2, r0
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	4413      	add	r3, r2
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004038:	2300      	movs	r3, #0
 800403a:	623b      	str	r3, [r7, #32]
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	2b08      	cmp	r3, #8
 8004040:	d87e      	bhi.n	8004140 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	3322      	adds	r3, #34	; 0x22
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4413      	add	r3, r2
 800404c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004050:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8004054:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405a:	6839      	ldr	r1, [r7, #0]
 800405c:	440a      	add	r2, r1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8004062:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	f04f 0400 	mov.w	r4, #0
 800406e:	0a0b      	lsrs	r3, r1, #8
 8004070:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004074:	0a14      	lsrs	r4, r2, #8
 8004076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004078:	3201      	adds	r2, #1
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	440a      	add	r2, r1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8004082:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	f04f 0400 	mov.w	r4, #0
 800408e:	0c0b      	lsrs	r3, r1, #16
 8004090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004094:	0c14      	lsrs	r4, r2, #16
 8004096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004098:	3202      	adds	r2, #2
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	440a      	add	r2, r1
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 80040a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	f04f 0400 	mov.w	r4, #0
 80040ae:	0e0b      	lsrs	r3, r1, #24
 80040b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040b4:	0e14      	lsrs	r4, r2, #24
 80040b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b8:	3203      	adds	r2, #3
 80040ba:	6839      	ldr	r1, [r7, #0]
 80040bc:	440a      	add	r2, r1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 80040c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	f04f 0400 	mov.w	r4, #0
 80040ce:	0013      	movs	r3, r2
 80040d0:	2400      	movs	r4, #0
 80040d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d4:	3204      	adds	r2, #4
 80040d6:	6839      	ldr	r1, [r7, #0]
 80040d8:	440a      	add	r2, r1
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 80040de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	f04f 0400 	mov.w	r4, #0
 80040ea:	0a13      	lsrs	r3, r2, #8
 80040ec:	2400      	movs	r4, #0
 80040ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f0:	3205      	adds	r2, #5
 80040f2:	6839      	ldr	r1, [r7, #0]
 80040f4:	440a      	add	r2, r1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 80040fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	f04f 0400 	mov.w	r4, #0
 8004106:	0c13      	lsrs	r3, r2, #16
 8004108:	2400      	movs	r4, #0
 800410a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410c:	3206      	adds	r2, #6
 800410e:	6839      	ldr	r1, [r7, #0]
 8004110:	440a      	add	r2, r1
 8004112:	b2db      	uxtb	r3, r3
 8004114:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8004116:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	f04f 0400 	mov.w	r4, #0
 8004122:	0e13      	lsrs	r3, r2, #24
 8004124:	2400      	movs	r4, #0
 8004126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004128:	3207      	adds	r2, #7
 800412a:	6839      	ldr	r1, [r7, #0]
 800412c:	440a      	add	r2, r1
 800412e:	b2db      	uxtb	r3, r3
 8004130:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	3308      	adds	r3, #8
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	3301      	adds	r3, #1
 800413c:	623b      	str	r3, [r7, #32]
 800413e:	e77d      	b.n	800403c <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004142:	4618      	mov	r0, r3
 8004144:	3734      	adds	r7, #52	; 0x34
 8004146:	46bd      	mov	sp, r7
 8004148:	bd90      	pop	{r4, r7, pc}

0800414a <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800414a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414e:	b091      	sub	sp, #68	; 0x44
 8004150:	af00      	add	r7, sp, #0
 8004152:	6178      	str	r0, [r7, #20]
 8004154:	6139      	str	r1, [r7, #16]
    {
      int offset = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->header.deserialize(inbuffer + offset);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	1d18      	adds	r0, r3, #4
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	4619      	mov	r1, r3
 8004166:	f7fe fb11 	bl	800278c <_ZN8std_msgs6Header11deserializeEPh>
 800416a:	4602      	mov	r2, r0
 800416c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800416e:	4413      	add	r3, r2
 8004170:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += this->orientation.deserialize(inbuffer + offset);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f103 0018 	add.w	r0, r3, #24
 8004178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	4619      	mov	r1, r3
 8004180:	f7fe fdf7 	bl	8002d72 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004184:	4602      	mov	r2, r0
 8004186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004188:	4413      	add	r3, r2
 800418a:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 800418c:	2300      	movs	r3, #0
 800418e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	2b08      	cmp	r3, #8
 8004194:	f200 80dd 	bhi.w	8004352 <_ZN11sensor_msgs3Imu11deserializeEPh+0x208>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	f04f 0400 	mov.w	r4, #0
 80041a0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80041a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80041a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041aa:	6938      	ldr	r0, [r7, #16]
 80041ac:	4403      	add	r3, r0
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b2dd      	uxtb	r5, r3
 80041b2:	f04f 0600 	mov.w	r6, #0
 80041b6:	ea45 0301 	orr.w	r3, r5, r1
 80041ba:	ea46 0402 	orr.w	r4, r6, r2
 80041be:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80041c2:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80041c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c8:	3301      	adds	r3, #1
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	b2d9      	uxtb	r1, r3
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	f04f 0400 	mov.w	r4, #0
 80041de:	0214      	lsls	r4, r2, #8
 80041e0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80041e4:	020b      	lsls	r3, r1, #8
 80041e6:	ea45 0503 	orr.w	r5, r5, r3
 80041ea:	ea46 0604 	orr.w	r6, r6, r4
 80041ee:	462b      	mov	r3, r5
 80041f0:	4634      	mov	r4, r6
 80041f2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80041f6:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80041fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fc:	3302      	adds	r3, #2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4413      	add	r3, r2
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	b2d9      	uxtb	r1, r3
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	f04f 0400 	mov.w	r4, #0
 8004212:	0414      	lsls	r4, r2, #16
 8004214:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8004218:	040b      	lsls	r3, r1, #16
 800421a:	ea45 0503 	orr.w	r5, r5, r3
 800421e:	ea46 0604 	orr.w	r6, r6, r4
 8004222:	462b      	mov	r3, r5
 8004224:	4634      	mov	r4, r6
 8004226:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800422a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800422e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004230:	3303      	adds	r3, #3
 8004232:	6938      	ldr	r0, [r7, #16]
 8004234:	4403      	add	r3, r0
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f04f 0400 	mov.w	r4, #0
 800423e:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8004242:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8004246:	ea41 030a 	orr.w	r3, r1, sl
 800424a:	ea42 040b 	orr.w	r4, r2, fp
 800424e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004252:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004258:	3304      	adds	r3, #4
 800425a:	6938      	ldr	r0, [r7, #16]
 800425c:	4403      	add	r3, r0
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	461c      	mov	r4, r3
 8004262:	b2e4      	uxtb	r4, r4
 8004264:	f04f 0500 	mov.w	r5, #0
 8004268:	f04f 0800 	mov.w	r8, #0
 800426c:	f04f 0900 	mov.w	r9, #0
 8004270:	4623      	mov	r3, r4
 8004272:	001b      	movs	r3, r3
 8004274:	4699      	mov	r9, r3
 8004276:	2300      	movs	r3, #0
 8004278:	4698      	mov	r8, r3
 800427a:	4643      	mov	r3, r8
 800427c:	464c      	mov	r4, r9
 800427e:	ea43 0301 	orr.w	r3, r3, r1
 8004282:	ea44 0402 	orr.w	r4, r4, r2
 8004286:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800428a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004290:	3305      	adds	r3, #5
 8004292:	6938      	ldr	r0, [r7, #16]
 8004294:	4403      	add	r3, r0
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	461c      	mov	r4, r3
 800429a:	b2e4      	uxtb	r4, r4
 800429c:	f04f 0500 	mov.w	r5, #0
 80042a0:	f04f 0800 	mov.w	r8, #0
 80042a4:	f04f 0900 	mov.w	r9, #0
 80042a8:	4623      	mov	r3, r4
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	4699      	mov	r9, r3
 80042ae:	2300      	movs	r3, #0
 80042b0:	4698      	mov	r8, r3
 80042b2:	4643      	mov	r3, r8
 80042b4:	464c      	mov	r4, r9
 80042b6:	ea43 0301 	orr.w	r3, r3, r1
 80042ba:	ea44 0402 	orr.w	r4, r4, r2
 80042be:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80042c2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80042c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c8:	3306      	adds	r3, #6
 80042ca:	6938      	ldr	r0, [r7, #16]
 80042cc:	4403      	add	r3, r0
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	461c      	mov	r4, r3
 80042d2:	b2e4      	uxtb	r4, r4
 80042d4:	f04f 0500 	mov.w	r5, #0
 80042d8:	f04f 0800 	mov.w	r8, #0
 80042dc:	f04f 0900 	mov.w	r9, #0
 80042e0:	4623      	mov	r3, r4
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	4699      	mov	r9, r3
 80042e6:	2300      	movs	r3, #0
 80042e8:	4698      	mov	r8, r3
 80042ea:	4643      	mov	r3, r8
 80042ec:	464c      	mov	r4, r9
 80042ee:	ea43 0301 	orr.w	r3, r3, r1
 80042f2:	ea44 0402 	orr.w	r4, r4, r2
 80042f6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80042fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80042fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004300:	3307      	adds	r3, #7
 8004302:	6938      	ldr	r0, [r7, #16]
 8004304:	4403      	add	r3, r0
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	461c      	mov	r4, r3
 800430a:	b2e4      	uxtb	r4, r4
 800430c:	f04f 0500 	mov.w	r5, #0
 8004310:	f04f 0800 	mov.w	r8, #0
 8004314:	f04f 0900 	mov.w	r9, #0
 8004318:	4623      	mov	r3, r4
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	4699      	mov	r9, r3
 800431e:	2300      	movs	r3, #0
 8004320:	4698      	mov	r8, r3
 8004322:	4643      	mov	r3, r8
 8004324:	464c      	mov	r4, r9
 8004326:	ea43 0301 	orr.w	r3, r3, r1
 800432a:	ea44 0402 	orr.w	r4, r4, r2
 800432e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8004332:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004336:	6979      	ldr	r1, [r7, #20]
 8004338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800433a:	3208      	adds	r2, #8
 800433c:	00d2      	lsls	r2, r2, #3
 800433e:	440a      	add	r2, r1
 8004340:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->orientation_covariance[i]);
 8004344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004346:	3308      	adds	r3, #8
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	3301      	adds	r3, #1
 800434e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004350:	e71e      	b.n	8004190 <_ZN11sensor_msgs3Imu11deserializeEPh+0x46>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8004358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	4619      	mov	r1, r3
 8004360:	f7ff fa26 	bl	80037b0 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004364:	4602      	mov	r2, r0
 8004366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004368:	4413      	add	r3, r2
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 800436c:	2300      	movs	r3, #0
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	2b08      	cmp	r3, #8
 8004374:	f200 80ca 	bhi.w	800450c <_ZN11sensor_msgs3Imu11deserializeEPh+0x3c2>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	f04f 0400 	mov.w	r4, #0
 8004380:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004384:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438a:	6938      	ldr	r0, [r7, #16]
 800438c:	4403      	add	r3, r0
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b2dd      	uxtb	r5, r3
 8004392:	f04f 0600 	mov.w	r6, #0
 8004396:	ea45 0301 	orr.w	r3, r5, r1
 800439a:	ea46 0402 	orr.w	r4, r6, r2
 800439e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80043a2:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80043a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a8:	3301      	adds	r3, #1
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2d9      	uxtb	r1, r3
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0500 	mov.w	r5, #0
 80043ba:	f04f 0600 	mov.w	r6, #0
 80043be:	0216      	lsls	r6, r2, #8
 80043c0:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 80043c4:	020d      	lsls	r5, r1, #8
 80043c6:	ea45 030a 	orr.w	r3, r5, sl
 80043ca:	ea46 040b 	orr.w	r4, r6, fp
 80043ce:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80043d2:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80043d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d8:	3302      	adds	r3, #2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4413      	add	r3, r2
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	b2d9      	uxtb	r1, r3
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0500 	mov.w	r5, #0
 80043ea:	f04f 0600 	mov.w	r6, #0
 80043ee:	0416      	lsls	r6, r2, #16
 80043f0:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80043f4:	040d      	lsls	r5, r1, #16
 80043f6:	ea45 030a 	orr.w	r3, r5, sl
 80043fa:	ea46 040b 	orr.w	r4, r6, fp
 80043fe:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004402:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004408:	3303      	adds	r3, #3
 800440a:	6938      	ldr	r0, [r7, #16]
 800440c:	4403      	add	r3, r0
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f04f 0400 	mov.w	r4, #0
 8004416:	0a18      	lsrs	r0, r3, #8
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004422:	ea43 0301 	orr.w	r3, r3, r1
 8004426:	ea44 0402 	orr.w	r4, r4, r2
 800442a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800442e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004434:	3304      	adds	r3, #4
 8004436:	6938      	ldr	r0, [r7, #16]
 8004438:	4403      	add	r3, r0
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	fa5f fa83 	uxtb.w	sl, r3
 8004440:	f04f 0b00 	mov.w	fp, #0
 8004444:	f04f 0500 	mov.w	r5, #0
 8004448:	f04f 0600 	mov.w	r6, #0
 800444c:	4656      	mov	r6, sl
 800444e:	2500      	movs	r5, #0
 8004450:	ea45 0301 	orr.w	r3, r5, r1
 8004454:	ea46 0402 	orr.w	r4, r6, r2
 8004458:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800445c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004462:	3305      	adds	r3, #5
 8004464:	6938      	ldr	r0, [r7, #16]
 8004466:	4403      	add	r3, r0
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	fa5f fa83 	uxtb.w	sl, r3
 800446e:	f04f 0b00 	mov.w	fp, #0
 8004472:	f04f 0500 	mov.w	r5, #0
 8004476:	f04f 0600 	mov.w	r6, #0
 800447a:	ea4f 260a 	mov.w	r6, sl, lsl #8
 800447e:	2500      	movs	r5, #0
 8004480:	ea45 0301 	orr.w	r3, r5, r1
 8004484:	ea46 0402 	orr.w	r4, r6, r2
 8004488:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800448c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004492:	3306      	adds	r3, #6
 8004494:	6938      	ldr	r0, [r7, #16]
 8004496:	4403      	add	r3, r0
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	fa5f fa83 	uxtb.w	sl, r3
 800449e:	f04f 0b00 	mov.w	fp, #0
 80044a2:	f04f 0500 	mov.w	r5, #0
 80044a6:	f04f 0600 	mov.w	r6, #0
 80044aa:	ea4f 460a 	mov.w	r6, sl, lsl #16
 80044ae:	2500      	movs	r5, #0
 80044b0:	ea45 0301 	orr.w	r3, r5, r1
 80044b4:	ea46 0402 	orr.w	r4, r6, r2
 80044b8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80044bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c2:	3307      	adds	r3, #7
 80044c4:	6938      	ldr	r0, [r7, #16]
 80044c6:	4403      	add	r3, r0
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	fa5f fa83 	uxtb.w	sl, r3
 80044ce:	f04f 0b00 	mov.w	fp, #0
 80044d2:	f04f 0500 	mov.w	r5, #0
 80044d6:	f04f 0600 	mov.w	r6, #0
 80044da:	ea4f 660a 	mov.w	r6, sl, lsl #24
 80044de:	2500      	movs	r5, #0
 80044e0:	ea45 0301 	orr.w	r3, r5, r1
 80044e4:	ea46 0402 	orr.w	r4, r6, r2
 80044e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 80044ec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80044f0:	6979      	ldr	r1, [r7, #20]
 80044f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044f4:	3215      	adds	r2, #21
 80044f6:	00d2      	lsls	r2, r2, #3
 80044f8:	440a      	add	r2, r1
 80044fa:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->angular_velocity_covariance[i]);
 80044fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004500:	3308      	adds	r3, #8
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8004504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004506:	3301      	adds	r3, #1
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
 800450a:	e731      	b.n	8004370 <_ZN11sensor_msgs3Imu11deserializeEPh+0x226>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	4619      	mov	r1, r3
 800451a:	f7ff f949 	bl	80037b0 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800451e:	4602      	mov	r2, r0
 8004520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004522:	4413      	add	r3, r2
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 8004526:	2300      	movs	r3, #0
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	2b08      	cmp	r3, #8
 800452e:	f200 80ca 	bhi.w	80046c6 <_ZN11sensor_msgs3Imu11deserializeEPh+0x57c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	f04f 0400 	mov.w	r4, #0
 800453a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800453e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004544:	6938      	ldr	r0, [r7, #16]
 8004546:	4403      	add	r3, r0
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	b2dd      	uxtb	r5, r3
 800454c:	f04f 0600 	mov.w	r6, #0
 8004550:	ea45 0301 	orr.w	r3, r5, r1
 8004554:	ea46 0402 	orr.w	r4, r6, r2
 8004558:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800455c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004562:	3301      	adds	r3, #1
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b2d9      	uxtb	r1, r3
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0500 	mov.w	r5, #0
 8004574:	f04f 0600 	mov.w	r6, #0
 8004578:	0216      	lsls	r6, r2, #8
 800457a:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 800457e:	020d      	lsls	r5, r1, #8
 8004580:	ea45 0308 	orr.w	r3, r5, r8
 8004584:	ea46 0409 	orr.w	r4, r6, r9
 8004588:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800458c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004592:	3302      	adds	r3, #2
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	b2d9      	uxtb	r1, r3
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0500 	mov.w	r5, #0
 80045a4:	f04f 0600 	mov.w	r6, #0
 80045a8:	0416      	lsls	r6, r2, #16
 80045aa:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80045ae:	040d      	lsls	r5, r1, #16
 80045b0:	ea45 0308 	orr.w	r3, r5, r8
 80045b4:	ea46 0409 	orr.w	r4, r6, r9
 80045b8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80045bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c2:	3303      	adds	r3, #3
 80045c4:	6938      	ldr	r0, [r7, #16]
 80045c6:	4403      	add	r3, r0
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f04f 0400 	mov.w	r4, #0
 80045d0:	0a18      	lsrs	r0, r3, #8
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	061b      	lsls	r3, r3, #24
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80045dc:	ea43 0301 	orr.w	r3, r3, r1
 80045e0:	ea44 0402 	orr.w	r4, r4, r2
 80045e4:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80045e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ee:	3304      	adds	r3, #4
 80045f0:	6938      	ldr	r0, [r7, #16]
 80045f2:	4403      	add	r3, r0
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	fa5f f883 	uxtb.w	r8, r3
 80045fa:	f04f 0900 	mov.w	r9, #0
 80045fe:	f04f 0500 	mov.w	r5, #0
 8004602:	f04f 0600 	mov.w	r6, #0
 8004606:	4646      	mov	r6, r8
 8004608:	2500      	movs	r5, #0
 800460a:	ea45 0301 	orr.w	r3, r5, r1
 800460e:	ea46 0402 	orr.w	r4, r6, r2
 8004612:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004616:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800461a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461c:	3305      	adds	r3, #5
 800461e:	6938      	ldr	r0, [r7, #16]
 8004620:	4403      	add	r3, r0
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	fa5f f883 	uxtb.w	r8, r3
 8004628:	f04f 0900 	mov.w	r9, #0
 800462c:	f04f 0500 	mov.w	r5, #0
 8004630:	f04f 0600 	mov.w	r6, #0
 8004634:	ea4f 2608 	mov.w	r6, r8, lsl #8
 8004638:	2500      	movs	r5, #0
 800463a:	ea45 0301 	orr.w	r3, r5, r1
 800463e:	ea46 0402 	orr.w	r4, r6, r2
 8004642:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004646:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800464a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464c:	3306      	adds	r3, #6
 800464e:	6938      	ldr	r0, [r7, #16]
 8004650:	4403      	add	r3, r0
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	fa5f f883 	uxtb.w	r8, r3
 8004658:	f04f 0900 	mov.w	r9, #0
 800465c:	f04f 0500 	mov.w	r5, #0
 8004660:	f04f 0600 	mov.w	r6, #0
 8004664:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8004668:	2500      	movs	r5, #0
 800466a:	ea45 0301 	orr.w	r3, r5, r1
 800466e:	ea46 0402 	orr.w	r4, r6, r2
 8004672:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004676:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467c:	3307      	adds	r3, #7
 800467e:	6938      	ldr	r0, [r7, #16]
 8004680:	4403      	add	r3, r0
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	fa5f f883 	uxtb.w	r8, r3
 8004688:	f04f 0900 	mov.w	r9, #0
 800468c:	f04f 0500 	mov.w	r5, #0
 8004690:	f04f 0600 	mov.w	r6, #0
 8004694:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8004698:	2500      	movs	r5, #0
 800469a:	ea45 0301 	orr.w	r3, r5, r1
 800469e:	ea46 0402 	orr.w	r4, r6, r2
 80046a2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 80046a6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	3222      	adds	r2, #34	; 0x22
 80046b0:	00d2      	lsls	r2, r2, #3
 80046b2:	440a      	add	r2, r1
 80046b4:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80046b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ba:	3308      	adds	r3, #8
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      for( uint32_t i = 0; i < 9; i++){
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	3301      	adds	r3, #1
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30
 80046c4:	e731      	b.n	800452a <_ZN11sensor_msgs3Imu11deserializeEPh+0x3e0>
      }
     return offset;
 80046c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80046c8:	4618      	mov	r0, r3
 80046ca:	3744      	adds	r7, #68	; 0x44
 80046cc:	46bd      	mov	sp, r7
 80046ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080046d4 <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	08014e5c 	.word	0x08014e5c

080046f0 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	08014e6c 	.word	0x08014e6c

0800470c <_ZN11sensor_msgs10JointStateC1Ev>:
      uint32_t effort_length;
      typedef double _effort_type;
      _effort_type st_effort;
      _effort_type * effort;

    JointState():
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
      header(),
      name_length(0), name(NULL),
      position_length(0), position(NULL),
      velocity_length(0), velocity(NULL),
      effort_length(0), effort(NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fc fda4 	bl	8001264 <_ZN3ros3MsgC1Ev>
 800471c:	4a12      	ldr	r2, [pc, #72]	; (8004768 <_ZN11sensor_msgs10JointStateC1Ev+0x5c>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd ff78 	bl	800261c <_ZN8std_msgs6HeaderC1Ev>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	619a      	str	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	621a      	str	r2, [r3, #32]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	625a      	str	r2, [r3, #36]	; 0x24
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	635a      	str	r2, [r3, #52]	; 0x34
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	645a      	str	r2, [r3, #68]	; 0x44
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	651a      	str	r2, [r3, #80]	; 0x50
    {
    }
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	08015448 	.word	0x08015448

0800476c <_ZNK11sensor_msgs10JointState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b08f      	sub	sp, #60	; 0x3c
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
      offset += this->header.serialize(outbuffer + offset);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	1d18      	adds	r0, r3, #4
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	4413      	add	r3, r2
 8004784:	4619      	mov	r1, r3
 8004786:	f7fd ff69 	bl	800265c <_ZNK8std_msgs6Header9serializeEPh>
 800478a:	4602      	mov	r2, r0
 800478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478e:	4413      	add	r3, r2
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
      *(outbuffer + offset + 0) = (this->name_length >> (8 * 0)) & 0xFF;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6999      	ldr	r1, [r3, #24]
 8004796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	4413      	add	r3, r2
 800479c:	b2ca      	uxtb	r2, r1
 800479e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->name_length >> (8 * 1)) & 0xFF;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	0a19      	lsrs	r1, r3, #8
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	3301      	adds	r3, #1
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	4413      	add	r3, r2
 80047ae:	b2ca      	uxtb	r2, r1
 80047b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->name_length >> (8 * 2)) & 0xFF;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	0c19      	lsrs	r1, r3, #16
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	3302      	adds	r3, #2
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	4413      	add	r3, r2
 80047c0:	b2ca      	uxtb	r2, r1
 80047c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->name_length >> (8 * 3)) & 0xFF;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	0e19      	lsrs	r1, r3, #24
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	3303      	adds	r3, #3
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	4413      	add	r3, r2
 80047d2:	b2ca      	uxtb	r2, r1
 80047d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->name_length);
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	3304      	adds	r3, #4
 80047da:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 80047dc:	2300      	movs	r3, #0
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d228      	bcs.n	800483c <_ZNK11sensor_msgs10JointState9serializeEPh+0xd0>
      uint32_t length_namei = strlen(this->name[i]);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1a      	ldr	r2, [r3, #32]
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb fcea 	bl	80001d0 <strlen>
 80047fc:	6238      	str	r0, [r7, #32]
      varToArr(outbuffer + offset, length_namei);
 80047fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	4413      	add	r3, r2
 8004804:	6a39      	ldr	r1, [r7, #32]
 8004806:	4618      	mov	r0, r3
 8004808:	f003 fd4e 	bl	80082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800480c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480e:	3304      	adds	r3, #4
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
      memcpy(outbuffer + offset, this->name[i], length_namei);
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	18d0      	adds	r0, r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1a      	ldr	r2, [r3, #32]
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	4619      	mov	r1, r3
 8004828:	f00f fdac 	bl	8014384 <memcpy>
      offset += length_namei;
 800482c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	4413      	add	r3, r2
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < name_length; i++){
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	3301      	adds	r3, #1
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
 800483a:	e7d1      	b.n	80047e0 <_ZNK11sensor_msgs10JointState9serializeEPh+0x74>
      }
      *(outbuffer + offset + 0) = (this->position_length >> (8 * 0)) & 0xFF;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	4413      	add	r3, r2
 8004846:	b2ca      	uxtb	r2, r1
 8004848:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->position_length >> (8 * 1)) & 0xFF;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	0a19      	lsrs	r1, r3, #8
 8004850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004852:	3301      	adds	r3, #1
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	4413      	add	r3, r2
 8004858:	b2ca      	uxtb	r2, r1
 800485a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->position_length >> (8 * 2)) & 0xFF;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	0c19      	lsrs	r1, r3, #16
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	3302      	adds	r3, #2
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	4413      	add	r3, r2
 800486a:	b2ca      	uxtb	r2, r1
 800486c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->position_length >> (8 * 3)) & 0xFF;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	0e19      	lsrs	r1, r3, #24
 8004874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004876:	3303      	adds	r3, #3
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	4413      	add	r3, r2
 800487c:	b2ca      	uxtb	r2, r1
 800487e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_length);
 8004880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004882:	3304      	adds	r3, #4
 8004884:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 8004886:	2300      	movs	r3, #0
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004890:	429a      	cmp	r2, r3
 8004892:	d27e      	bcs.n	8004992 <_ZNK11sensor_msgs10JointState9serializeEPh+0x226>
      union {
        double real;
        uint64_t base;
      } u_positioni;
      u_positioni.real = this->position[i];
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048a2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_positioni.base >> (8 * 0)) & 0xFF;
 80048a6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80048aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	440a      	add	r2, r1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_positioni.base >> (8 * 1)) & 0xFF;
 80048b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	f04f 0400 	mov.w	r4, #0
 80048c0:	0a0b      	lsrs	r3, r1, #8
 80048c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80048c6:	0a14      	lsrs	r4, r2, #8
 80048c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ca:	3201      	adds	r2, #1
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	440a      	add	r2, r1
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_positioni.base >> (8 * 2)) & 0xFF;
 80048d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	f04f 0400 	mov.w	r4, #0
 80048e0:	0c0b      	lsrs	r3, r1, #16
 80048e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048e6:	0c14      	lsrs	r4, r2, #16
 80048e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ea:	3202      	adds	r2, #2
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	440a      	add	r2, r1
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_positioni.base >> (8 * 3)) & 0xFF;
 80048f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	f04f 0400 	mov.w	r4, #0
 8004900:	0e0b      	lsrs	r3, r1, #24
 8004902:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004906:	0e14      	lsrs	r4, r2, #24
 8004908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800490a:	3203      	adds	r2, #3
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	440a      	add	r2, r1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_positioni.base >> (8 * 4)) & 0xFF;
 8004914:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	f04f 0400 	mov.w	r4, #0
 8004920:	0013      	movs	r3, r2
 8004922:	2400      	movs	r4, #0
 8004924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004926:	3204      	adds	r2, #4
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	440a      	add	r2, r1
 800492c:	b2db      	uxtb	r3, r3
 800492e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_positioni.base >> (8 * 5)) & 0xFF;
 8004930:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	f04f 0400 	mov.w	r4, #0
 800493c:	0a13      	lsrs	r3, r2, #8
 800493e:	2400      	movs	r4, #0
 8004940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004942:	3205      	adds	r2, #5
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	440a      	add	r2, r1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_positioni.base >> (8 * 6)) & 0xFF;
 800494c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	f04f 0400 	mov.w	r4, #0
 8004958:	0c13      	lsrs	r3, r2, #16
 800495a:	2400      	movs	r4, #0
 800495c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800495e:	3206      	adds	r2, #6
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	440a      	add	r2, r1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_positioni.base >> (8 * 7)) & 0xFF;
 8004968:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	f04f 0400 	mov.w	r4, #0
 8004974:	0e13      	lsrs	r3, r2, #24
 8004976:	2400      	movs	r4, #0
 8004978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800497a:	3207      	adds	r2, #7
 800497c:	6839      	ldr	r1, [r7, #0]
 800497e:	440a      	add	r2, r1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->position[i]);
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	3308      	adds	r3, #8
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < position_length; i++){
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	3301      	adds	r3, #1
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004990:	e77b      	b.n	800488a <_ZNK11sensor_msgs10JointState9serializeEPh+0x11e>
      }
      *(outbuffer + offset + 0) = (this->velocity_length >> (8 * 0)) & 0xFF;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	4413      	add	r3, r2
 800499c:	b2ca      	uxtb	r2, r1
 800499e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->velocity_length >> (8 * 1)) & 0xFF;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a4:	0a19      	lsrs	r1, r3, #8
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	3301      	adds	r3, #1
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	4413      	add	r3, r2
 80049ae:	b2ca      	uxtb	r2, r1
 80049b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->velocity_length >> (8 * 2)) & 0xFF;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	0c19      	lsrs	r1, r3, #16
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	3302      	adds	r3, #2
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	4413      	add	r3, r2
 80049c0:	b2ca      	uxtb	r2, r1
 80049c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->velocity_length >> (8 * 3)) & 0xFF;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c8:	0e19      	lsrs	r1, r3, #24
 80049ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049cc:	3303      	adds	r3, #3
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	4413      	add	r3, r2
 80049d2:	b2ca      	uxtb	r2, r1
 80049d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->velocity_length);
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	3304      	adds	r3, #4
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 80049dc:	2300      	movs	r3, #0
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d27e      	bcs.n	8004ae8 <_ZNK11sensor_msgs10JointState9serializeEPh+0x37c>
      union {
        double real;
        uint64_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	4413      	add	r3, r2
 80049f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049f8:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 80049fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004a00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a02:	6839      	ldr	r1, [r7, #0]
 8004a04:	440a      	add	r2, r1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 8004a0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	f04f 0400 	mov.w	r4, #0
 8004a16:	0a0b      	lsrs	r3, r1, #8
 8004a18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004a1c:	0a14      	lsrs	r4, r2, #8
 8004a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a20:	3201      	adds	r2, #1
 8004a22:	6839      	ldr	r1, [r7, #0]
 8004a24:	440a      	add	r2, r1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 8004a2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	f04f 0400 	mov.w	r4, #0
 8004a36:	0c0b      	lsrs	r3, r1, #16
 8004a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a3c:	0c14      	lsrs	r4, r2, #16
 8004a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a40:	3202      	adds	r2, #2
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	440a      	add	r2, r1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 8004a4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	f04f 0400 	mov.w	r4, #0
 8004a56:	0e0b      	lsrs	r3, r1, #24
 8004a58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a5c:	0e14      	lsrs	r4, r2, #24
 8004a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a60:	3203      	adds	r2, #3
 8004a62:	6839      	ldr	r1, [r7, #0]
 8004a64:	440a      	add	r2, r1
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_velocityi.base >> (8 * 4)) & 0xFF;
 8004a6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	f04f 0400 	mov.w	r4, #0
 8004a76:	0013      	movs	r3, r2
 8004a78:	2400      	movs	r4, #0
 8004a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a7c:	3204      	adds	r2, #4
 8004a7e:	6839      	ldr	r1, [r7, #0]
 8004a80:	440a      	add	r2, r1
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_velocityi.base >> (8 * 5)) & 0xFF;
 8004a86:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	f04f 0400 	mov.w	r4, #0
 8004a92:	0a13      	lsrs	r3, r2, #8
 8004a94:	2400      	movs	r4, #0
 8004a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a98:	3205      	adds	r2, #5
 8004a9a:	6839      	ldr	r1, [r7, #0]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_velocityi.base >> (8 * 6)) & 0xFF;
 8004aa2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	f04f 0400 	mov.w	r4, #0
 8004aae:	0c13      	lsrs	r3, r2, #16
 8004ab0:	2400      	movs	r4, #0
 8004ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ab4:	3206      	adds	r2, #6
 8004ab6:	6839      	ldr	r1, [r7, #0]
 8004ab8:	440a      	add	r2, r1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_velocityi.base >> (8 * 7)) & 0xFF;
 8004abe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	f04f 0400 	mov.w	r4, #0
 8004aca:	0e13      	lsrs	r3, r2, #24
 8004acc:	2400      	movs	r4, #0
 8004ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ad0:	3207      	adds	r2, #7
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	440a      	add	r2, r1
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->velocity[i]);
 8004ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004adc:	3308      	adds	r3, #8
 8004ade:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae6:	e77b      	b.n	80049e0 <_ZNK11sensor_msgs10JointState9serializeEPh+0x274>
      }
      *(outbuffer + offset + 0) = (this->effort_length >> (8 * 0)) & 0xFF;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	4413      	add	r3, r2
 8004af2:	b2ca      	uxtb	r2, r1
 8004af4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->effort_length >> (8 * 1)) & 0xFF;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	0a19      	lsrs	r1, r3, #8
 8004afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afe:	3301      	adds	r3, #1
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	4413      	add	r3, r2
 8004b04:	b2ca      	uxtb	r2, r1
 8004b06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->effort_length >> (8 * 2)) & 0xFF;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	0c19      	lsrs	r1, r3, #16
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b10:	3302      	adds	r3, #2
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	4413      	add	r3, r2
 8004b16:	b2ca      	uxtb	r2, r1
 8004b18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->effort_length >> (8 * 3)) & 0xFF;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	0e19      	lsrs	r1, r3, #24
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	3303      	adds	r3, #3
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	4413      	add	r3, r2
 8004b28:	b2ca      	uxtb	r2, r1
 8004b2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->effort_length);
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2e:	3304      	adds	r3, #4
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8004b32:	2300      	movs	r3, #0
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d27e      	bcs.n	8004c3e <_ZNK11sensor_msgs10JointState9serializeEPh+0x4d2>
      union {
        double real;
        uint64_t base;
      } u_efforti;
      u_efforti.real = this->effort[i];
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b4e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_efforti.base >> (8 * 0)) & 0xFF;
 8004b52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b58:	6839      	ldr	r1, [r7, #0]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_efforti.base >> (8 * 1)) & 0xFF;
 8004b60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	f04f 0400 	mov.w	r4, #0
 8004b6c:	0a0b      	lsrs	r3, r1, #8
 8004b6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b72:	0a14      	lsrs	r4, r2, #8
 8004b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b76:	3201      	adds	r2, #1
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	440a      	add	r2, r1
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_efforti.base >> (8 * 2)) & 0xFF;
 8004b80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	f04f 0400 	mov.w	r4, #0
 8004b8c:	0c0b      	lsrs	r3, r1, #16
 8004b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b92:	0c14      	lsrs	r4, r2, #16
 8004b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b96:	3202      	adds	r2, #2
 8004b98:	6839      	ldr	r1, [r7, #0]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_efforti.base >> (8 * 3)) & 0xFF;
 8004ba0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	0e0b      	lsrs	r3, r1, #24
 8004bae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004bb2:	0e14      	lsrs	r4, r2, #24
 8004bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bb6:	3203      	adds	r2, #3
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	440a      	add	r2, r1
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_efforti.base >> (8 * 4)) & 0xFF;
 8004bc0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	f04f 0400 	mov.w	r4, #0
 8004bcc:	0013      	movs	r3, r2
 8004bce:	2400      	movs	r4, #0
 8004bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bd2:	3204      	adds	r2, #4
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	440a      	add	r2, r1
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_efforti.base >> (8 * 5)) & 0xFF;
 8004bdc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	f04f 0400 	mov.w	r4, #0
 8004be8:	0a13      	lsrs	r3, r2, #8
 8004bea:	2400      	movs	r4, #0
 8004bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bee:	3205      	adds	r2, #5
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_efforti.base >> (8 * 6)) & 0xFF;
 8004bf8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	f04f 0400 	mov.w	r4, #0
 8004c04:	0c13      	lsrs	r3, r2, #16
 8004c06:	2400      	movs	r4, #0
 8004c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c0a:	3206      	adds	r2, #6
 8004c0c:	6839      	ldr	r1, [r7, #0]
 8004c0e:	440a      	add	r2, r1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_efforti.base >> (8 * 7)) & 0xFF;
 8004c14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	f04f 0400 	mov.w	r4, #0
 8004c20:	0e13      	lsrs	r3, r2, #24
 8004c22:	2400      	movs	r4, #0
 8004c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c26:	3207      	adds	r2, #7
 8004c28:	6839      	ldr	r1, [r7, #0]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->effort[i]);
 8004c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c32:	3308      	adds	r3, #8
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
      for( uint32_t i = 0; i < effort_length; i++){
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	3301      	adds	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	e77b      	b.n	8004b36 <_ZNK11sensor_msgs10JointState9serializeEPh+0x3ca>
      }
      return offset;
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004c40:	4618      	mov	r0, r3
 8004c42:	373c      	adds	r7, #60	; 0x3c
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd90      	pop	{r4, r7, pc}

08004c48 <_ZN11sensor_msgs10JointState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	b099      	sub	sp, #100	; 0x64
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6178      	str	r0, [r7, #20]
 8004c52:	6139      	str	r1, [r7, #16]
    {
      int offset = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	65fb      	str	r3, [r7, #92]	; 0x5c
      offset += this->header.deserialize(inbuffer + offset);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	1d18      	adds	r0, r3, #4
 8004c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4413      	add	r3, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	f7fd fd92 	bl	800278c <_ZN8std_msgs6Header11deserializeEPh>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c6c:	4413      	add	r3, r2
 8004c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
      uint32_t name_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	647b      	str	r3, [r7, #68]	; 0x44
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4413      	add	r3, r2
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	647b      	str	r3, [r7, #68]	; 0x44
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8e:	3302      	adds	r3, #2
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	647b      	str	r3, [r7, #68]	; 0x44
      name_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca0:	3303      	adds	r3, #3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cac:	4313      	orrs	r3, r2
 8004cae:	647b      	str	r3, [r7, #68]	; 0x44
      offset += sizeof(this->name_length);
 8004cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(name_lengthT > name_length)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d90a      	bls.n	8004cd6 <_ZN11sensor_msgs10JointState11deserializeEPh+0x8e>
        this->name = (char**)realloc(this->name, name_lengthT * sizeof(char*));
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	6a1a      	ldr	r2, [r3, #32]
 8004cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f00f fbd6 	bl	801447c <realloc>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	621a      	str	r2, [r3, #32]
      name_length = name_lengthT;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cda:	619a      	str	r2, [r3, #24]
      for( uint32_t i = 0; i < name_length; i++){
 8004cdc:	2300      	movs	r3, #0
 8004cde:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d23f      	bcs.n	8004d6a <_ZN11sensor_msgs10JointState11deserializeEPh+0x122>
      uint32_t length_st_name;
      arrToVar(length_st_name, (inbuffer + offset));
 8004cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	441a      	add	r2, r3
 8004cf0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f003 faf4 	bl	80082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cfe:	3304      	adds	r3, #4
 8004d00:	65fb      	str	r3, [r7, #92]	; 0x5c
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8004d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d04:	657b      	str	r3, [r7, #84]	; 0x54
 8004d06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0a:	4413      	add	r3, r2
 8004d0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d20c      	bcs.n	8004d2c <_ZN11sensor_msgs10JointState11deserializeEPh+0xe4>
          inbuffer[k-1]=inbuffer[k];
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d16:	441a      	add	r2, r3
 8004d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6939      	ldr	r1, [r7, #16]
 8004d1e:	440b      	add	r3, r1
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_name; ++k){
 8004d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d26:	3301      	adds	r3, #1
 8004d28:	657b      	str	r3, [r7, #84]	; 0x54
 8004d2a:	e7ec      	b.n	8004d06 <_ZN11sensor_msgs10JointState11deserializeEPh+0xbe>
      }
      inbuffer[offset+length_st_name-1]=0;
 8004d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	4413      	add	r3, r2
 8004d32:	3b01      	subs	r3, #1
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
      this->st_name = (char *)(inbuffer + offset-1);
 8004d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	441a      	add	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	61da      	str	r2, [r3, #28]
      offset += length_st_name;
 8004d48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4c:	4413      	add	r3, r2
 8004d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->name[i]), &(this->st_name), sizeof(char*));
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	6a1a      	ldr	r2, [r3, #32]
 8004d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	321c      	adds	r2, #28
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < name_length; i++){
 8004d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d64:	3301      	adds	r3, #1
 8004d66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d68:	e7ba      	b.n	8004ce0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x98>
      }
      uint32_t position_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	643b      	str	r3, [r7, #64]	; 0x40
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d76:	3301      	adds	r3, #1
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d82:	4313      	orrs	r3, r2
 8004d84:	643b      	str	r3, [r7, #64]	; 0x40
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d88:	3302      	adds	r3, #2
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	041b      	lsls	r3, r3, #16
 8004d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d94:	4313      	orrs	r3, r2
 8004d96:	643b      	str	r3, [r7, #64]	; 0x40
      position_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d9a:	3303      	adds	r3, #3
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	061b      	lsls	r3, r3, #24
 8004da4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004da6:	4313      	orrs	r3, r2
 8004da8:	643b      	str	r3, [r7, #64]	; 0x40
      offset += sizeof(this->position_length);
 8004daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dac:	3304      	adds	r3, #4
 8004dae:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(position_lengthT > position_length)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d90a      	bls.n	8004dd0 <_ZN11sensor_msgs10JointState11deserializeEPh+0x188>
        this->position = (double*)realloc(this->position, position_lengthT * sizeof(double));
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f00f fb59 	bl	801447c <realloc>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
      position_length = position_lengthT;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < position_length; i++){
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	653b      	str	r3, [r7, #80]	; 0x50
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004de0:	429a      	cmp	r2, r3
 8004de2:	f080 80e4 	bcs.w	8004fae <_ZN11sensor_msgs10JointState11deserializeEPh+0x366>
      union {
        double real;
        uint64_t base;
      } u_st_position;
      u_st_position.base = 0;
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	f04f 0400 	mov.w	r4, #0
 8004dee:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004df2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df8:	6938      	ldr	r0, [r7, #16]
 8004dfa:	4403      	add	r3, r0
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b2dd      	uxtb	r5, r3
 8004e00:	f04f 0600 	mov.w	r6, #0
 8004e04:	ea45 0301 	orr.w	r3, r5, r1
 8004e08:	ea46 0402 	orr.w	r4, r6, r2
 8004e0c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004e10:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8004e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e16:	3301      	adds	r3, #1
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	b2d9      	uxtb	r1, r3
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	f04f 0400 	mov.w	r4, #0
 8004e2c:	0214      	lsls	r4, r2, #8
 8004e2e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004e32:	020b      	lsls	r3, r1, #8
 8004e34:	ea45 0503 	orr.w	r5, r5, r3
 8004e38:	ea46 0604 	orr.w	r6, r6, r4
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	4634      	mov	r4, r6
 8004e40:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004e44:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8004e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4a:	3302      	adds	r3, #2
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	b2d9      	uxtb	r1, r3
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	f04f 0400 	mov.w	r4, #0
 8004e60:	0414      	lsls	r4, r2, #16
 8004e62:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8004e66:	040b      	lsls	r3, r1, #16
 8004e68:	ea45 0503 	orr.w	r5, r5, r3
 8004e6c:	ea46 0604 	orr.w	r6, r6, r4
 8004e70:	462b      	mov	r3, r5
 8004e72:	4634      	mov	r4, r6
 8004e74:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004e78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7e:	3303      	adds	r3, #3
 8004e80:	6938      	ldr	r0, [r7, #16]
 8004e82:	4403      	add	r3, r0
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f04f 0400 	mov.w	r4, #0
 8004e8c:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8004e90:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8004e94:	ea41 030a 	orr.w	r3, r1, sl
 8004e98:	ea42 040b 	orr.w	r4, r2, fp
 8004e9c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004ea0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	6938      	ldr	r0, [r7, #16]
 8004eaa:	4403      	add	r3, r0
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	461c      	mov	r4, r3
 8004eb0:	b2e4      	uxtb	r4, r4
 8004eb2:	f04f 0500 	mov.w	r5, #0
 8004eb6:	f04f 0800 	mov.w	r8, #0
 8004eba:	f04f 0900 	mov.w	r9, #0
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	001b      	movs	r3, r3
 8004ec2:	4699      	mov	r9, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4698      	mov	r8, r3
 8004ec8:	4643      	mov	r3, r8
 8004eca:	464c      	mov	r4, r9
 8004ecc:	ea43 0301 	orr.w	r3, r3, r1
 8004ed0:	ea44 0402 	orr.w	r4, r4, r2
 8004ed4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004ed8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ede:	3305      	adds	r3, #5
 8004ee0:	6938      	ldr	r0, [r7, #16]
 8004ee2:	4403      	add	r3, r0
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	461c      	mov	r4, r3
 8004ee8:	b2e4      	uxtb	r4, r4
 8004eea:	f04f 0500 	mov.w	r5, #0
 8004eee:	f04f 0800 	mov.w	r8, #0
 8004ef2:	f04f 0900 	mov.w	r9, #0
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	4699      	mov	r9, r3
 8004efc:	2300      	movs	r3, #0
 8004efe:	4698      	mov	r8, r3
 8004f00:	4643      	mov	r3, r8
 8004f02:	464c      	mov	r4, r9
 8004f04:	ea43 0301 	orr.w	r3, r3, r1
 8004f08:	ea44 0402 	orr.w	r4, r4, r2
 8004f0c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004f10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f16:	3306      	adds	r3, #6
 8004f18:	6938      	ldr	r0, [r7, #16]
 8004f1a:	4403      	add	r3, r0
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	461c      	mov	r4, r3
 8004f20:	b2e4      	uxtb	r4, r4
 8004f22:	f04f 0500 	mov.w	r5, #0
 8004f26:	f04f 0800 	mov.w	r8, #0
 8004f2a:	f04f 0900 	mov.w	r9, #0
 8004f2e:	4623      	mov	r3, r4
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	4699      	mov	r9, r3
 8004f34:	2300      	movs	r3, #0
 8004f36:	4698      	mov	r8, r3
 8004f38:	4643      	mov	r3, r8
 8004f3a:	464c      	mov	r4, r9
 8004f3c:	ea43 0301 	orr.w	r3, r3, r1
 8004f40:	ea44 0402 	orr.w	r4, r4, r2
 8004f44:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      u_st_position.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004f48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f4e:	3307      	adds	r3, #7
 8004f50:	6938      	ldr	r0, [r7, #16]
 8004f52:	4403      	add	r3, r0
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	461c      	mov	r4, r3
 8004f58:	b2e4      	uxtb	r4, r4
 8004f5a:	f04f 0500 	mov.w	r5, #0
 8004f5e:	f04f 0800 	mov.w	r8, #0
 8004f62:	f04f 0900 	mov.w	r9, #0
 8004f66:	4623      	mov	r3, r4
 8004f68:	061b      	lsls	r3, r3, #24
 8004f6a:	4699      	mov	r9, r3
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4698      	mov	r8, r3
 8004f70:	4643      	mov	r3, r8
 8004f72:	464c      	mov	r4, r9
 8004f74:	ea43 0301 	orr.w	r3, r3, r1
 8004f78:	ea44 0402 	orr.w	r4, r4, r2
 8004f7c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      this->st_position = u_st_position.real;
 8004f80:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
      offset += sizeof(this->st_position);
 8004f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->position[i]), &(this->st_position), sizeof(double));
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	18d0      	adds	r0, r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	3328      	adds	r3, #40	; 0x28
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f00f f9ef 	bl	8014384 <memcpy>
      for( uint32_t i = 0; i < position_length; i++){
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa8:	3301      	adds	r3, #1
 8004faa:	653b      	str	r3, [r7, #80]	; 0x50
 8004fac:	e715      	b.n	8004dda <_ZN11sensor_msgs10JointState11deserializeEPh+0x192>
      }
      uint32_t velocity_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fba:	3301      	adds	r3, #1
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fcc:	3302      	adds	r3, #2
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	041b      	lsls	r3, r3, #16
 8004fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
      velocity_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fde:	3303      	adds	r3, #3
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	061b      	lsls	r3, r3, #24
 8004fe8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fea:	4313      	orrs	r3, r2
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
      offset += sizeof(this->velocity_length);
 8004fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(velocity_lengthT > velocity_length)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d90a      	bls.n	8005014 <_ZN11sensor_msgs10JointState11deserializeEPh+0x3cc>
        this->velocity = (double*)realloc(this->velocity, velocity_lengthT * sizeof(double));
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f00f fa37 	bl	801447c <realloc>
 800500e:	4602      	mov	r2, r0
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
      velocity_length = velocity_lengthT;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005018:	635a      	str	r2, [r3, #52]	; 0x34
      for( uint32_t i = 0; i < velocity_length; i++){
 800501a:	2300      	movs	r3, #0
 800501c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005024:	429a      	cmp	r2, r3
 8005026:	f080 80d1 	bcs.w	80051cc <_ZN11sensor_msgs10JointState11deserializeEPh+0x584>
      union {
        double real;
        uint64_t base;
      } u_st_velocity;
      u_st_velocity.base = 0;
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	f04f 0400 	mov.w	r4, #0
 8005032:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005036:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800503a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503c:	6938      	ldr	r0, [r7, #16]
 800503e:	4403      	add	r3, r0
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	b2dd      	uxtb	r5, r3
 8005044:	f04f 0600 	mov.w	r6, #0
 8005048:	ea45 0301 	orr.w	r3, r5, r1
 800504c:	ea46 0402 	orr.w	r4, r6, r2
 8005050:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005054:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8005058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800505a:	3301      	adds	r3, #1
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	b2d9      	uxtb	r1, r3
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0500 	mov.w	r5, #0
 800506c:	f04f 0600 	mov.w	r6, #0
 8005070:	0216      	lsls	r6, r2, #8
 8005072:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 8005076:	020d      	lsls	r5, r1, #8
 8005078:	ea45 030a 	orr.w	r3, r5, sl
 800507c:	ea46 040b 	orr.w	r4, r6, fp
 8005080:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005084:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8005088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800508a:	3302      	adds	r3, #2
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b2d9      	uxtb	r1, r3
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0500 	mov.w	r5, #0
 800509c:	f04f 0600 	mov.w	r6, #0
 80050a0:	0416      	lsls	r6, r2, #16
 80050a2:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80050a6:	040d      	lsls	r5, r1, #16
 80050a8:	ea45 030a 	orr.w	r3, r5, sl
 80050ac:	ea46 040b 	orr.w	r4, r6, fp
 80050b0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80050b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80050b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ba:	3303      	adds	r3, #3
 80050bc:	6938      	ldr	r0, [r7, #16]
 80050be:	4403      	add	r3, r0
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f04f 0400 	mov.w	r4, #0
 80050c8:	0a18      	lsrs	r0, r3, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	061b      	lsls	r3, r3, #24
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80050d4:	ea43 0301 	orr.w	r3, r3, r1
 80050d8:	ea44 0402 	orr.w	r4, r4, r2
 80050dc:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80050e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80050e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e6:	3304      	adds	r3, #4
 80050e8:	6938      	ldr	r0, [r7, #16]
 80050ea:	4403      	add	r3, r0
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	fa5f fa83 	uxtb.w	sl, r3
 80050f2:	f04f 0b00 	mov.w	fp, #0
 80050f6:	f04f 0500 	mov.w	r5, #0
 80050fa:	f04f 0600 	mov.w	r6, #0
 80050fe:	4656      	mov	r6, sl
 8005100:	2500      	movs	r5, #0
 8005102:	ea45 0301 	orr.w	r3, r5, r1
 8005106:	ea46 0402 	orr.w	r4, r6, r2
 800510a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800510e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005114:	3305      	adds	r3, #5
 8005116:	6938      	ldr	r0, [r7, #16]
 8005118:	4403      	add	r3, r0
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	fa5f fa83 	uxtb.w	sl, r3
 8005120:	f04f 0b00 	mov.w	fp, #0
 8005124:	f04f 0500 	mov.w	r5, #0
 8005128:	f04f 0600 	mov.w	r6, #0
 800512c:	ea4f 260a 	mov.w	r6, sl, lsl #8
 8005130:	2500      	movs	r5, #0
 8005132:	ea45 0301 	orr.w	r3, r5, r1
 8005136:	ea46 0402 	orr.w	r4, r6, r2
 800513a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800513e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005144:	3306      	adds	r3, #6
 8005146:	6938      	ldr	r0, [r7, #16]
 8005148:	4403      	add	r3, r0
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	fa5f fa83 	uxtb.w	sl, r3
 8005150:	f04f 0b00 	mov.w	fp, #0
 8005154:	f04f 0500 	mov.w	r5, #0
 8005158:	f04f 0600 	mov.w	r6, #0
 800515c:	ea4f 460a 	mov.w	r6, sl, lsl #16
 8005160:	2500      	movs	r5, #0
 8005162:	ea45 0301 	orr.w	r3, r5, r1
 8005166:	ea46 0402 	orr.w	r4, r6, r2
 800516a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_st_velocity.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800516e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005174:	3307      	adds	r3, #7
 8005176:	6938      	ldr	r0, [r7, #16]
 8005178:	4403      	add	r3, r0
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	fa5f fa83 	uxtb.w	sl, r3
 8005180:	f04f 0b00 	mov.w	fp, #0
 8005184:	f04f 0500 	mov.w	r5, #0
 8005188:	f04f 0600 	mov.w	r6, #0
 800518c:	ea4f 660a 	mov.w	r6, sl, lsl #24
 8005190:	2500      	movs	r5, #0
 8005192:	ea45 0301 	orr.w	r3, r5, r1
 8005196:	ea46 0402 	orr.w	r4, r6, r2
 800519a:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->st_velocity = u_st_velocity.real;
 800519e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
      offset += sizeof(this->st_velocity);
 80051a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051aa:	3308      	adds	r3, #8
 80051ac:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->velocity[i]), &(this->st_velocity), sizeof(double));
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	18d0      	adds	r0, r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	3338      	adds	r3, #56	; 0x38
 80051bc:	2208      	movs	r2, #8
 80051be:	4619      	mov	r1, r3
 80051c0:	f00f f8e0 	bl	8014384 <memcpy>
      for( uint32_t i = 0; i < velocity_length; i++){
 80051c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c6:	3301      	adds	r3, #1
 80051c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ca:	e728      	b.n	800501e <_ZN11sensor_msgs10JointState11deserializeEPh+0x3d6>
      }
      uint32_t effort_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80051cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4413      	add	r3, r2
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	63bb      	str	r3, [r7, #56]	; 0x38
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80051d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d8:	3301      	adds	r3, #1
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051e4:	4313      	orrs	r3, r2
 80051e6:	63bb      	str	r3, [r7, #56]	; 0x38
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80051e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ea:	3302      	adds	r3, #2
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051f6:	4313      	orrs	r3, r2
 80051f8:	63bb      	str	r3, [r7, #56]	; 0x38
      effort_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80051fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051fc:	3303      	adds	r3, #3
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4413      	add	r3, r2
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	061b      	lsls	r3, r3, #24
 8005206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005208:	4313      	orrs	r3, r2
 800520a:	63bb      	str	r3, [r7, #56]	; 0x38
      offset += sizeof(this->effort_length);
 800520c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800520e:	3304      	adds	r3, #4
 8005210:	65fb      	str	r3, [r7, #92]	; 0x5c
      if(effort_lengthT > effort_length)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005218:	429a      	cmp	r2, r3
 800521a:	d90a      	bls.n	8005232 <_ZN11sensor_msgs10JointState11deserializeEPh+0x5ea>
        this->effort = (double*)realloc(this->effort, effort_lengthT * sizeof(double));
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f00f f928 	bl	801447c <realloc>
 800522c:	4602      	mov	r2, r0
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	651a      	str	r2, [r3, #80]	; 0x50
      effort_length = effort_lengthT;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005236:	645a      	str	r2, [r3, #68]	; 0x44
      for( uint32_t i = 0; i < effort_length; i++){
 8005238:	2300      	movs	r3, #0
 800523a:	64bb      	str	r3, [r7, #72]	; 0x48
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005242:	429a      	cmp	r2, r3
 8005244:	f080 80d1 	bcs.w	80053ea <_ZN11sensor_msgs10JointState11deserializeEPh+0x7a2>
      union {
        double real;
        uint64_t base;
      } u_st_effort;
      u_st_effort.base = 0;
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	f04f 0400 	mov.w	r4, #0
 8005250:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005254:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800525a:	6938      	ldr	r0, [r7, #16]
 800525c:	4403      	add	r3, r0
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	b2dd      	uxtb	r5, r3
 8005262:	f04f 0600 	mov.w	r6, #0
 8005266:	ea45 0301 	orr.w	r3, r5, r1
 800526a:	ea46 0402 	orr.w	r4, r6, r2
 800526e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005272:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8005276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005278:	3301      	adds	r3, #1
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4413      	add	r3, r2
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	b2d9      	uxtb	r1, r3
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	f04f 0500 	mov.w	r5, #0
 800528a:	f04f 0600 	mov.w	r6, #0
 800528e:	0216      	lsls	r6, r2, #8
 8005290:	ea46 6611 	orr.w	r6, r6, r1, lsr #24
 8005294:	020d      	lsls	r5, r1, #8
 8005296:	ea45 0308 	orr.w	r3, r5, r8
 800529a:	ea46 0409 	orr.w	r4, r6, r9
 800529e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80052a2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80052a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a8:	3302      	adds	r3, #2
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4413      	add	r3, r2
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b2d9      	uxtb	r1, r3
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0500 	mov.w	r5, #0
 80052ba:	f04f 0600 	mov.w	r6, #0
 80052be:	0416      	lsls	r6, r2, #16
 80052c0:	ea46 4611 	orr.w	r6, r6, r1, lsr #16
 80052c4:	040d      	lsls	r5, r1, #16
 80052c6:	ea45 0308 	orr.w	r3, r5, r8
 80052ca:	ea46 0409 	orr.w	r4, r6, r9
 80052ce:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80052d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d8:	3303      	adds	r3, #3
 80052da:	6938      	ldr	r0, [r7, #16]
 80052dc:	4403      	add	r3, r0
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f04f 0400 	mov.w	r4, #0
 80052e6:	0a18      	lsrs	r0, r3, #8
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	061b      	lsls	r3, r3, #24
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052f2:	ea43 0301 	orr.w	r3, r3, r1
 80052f6:	ea44 0402 	orr.w	r4, r4, r2
 80052fa:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80052fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005304:	3304      	adds	r3, #4
 8005306:	6938      	ldr	r0, [r7, #16]
 8005308:	4403      	add	r3, r0
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	fa5f f883 	uxtb.w	r8, r3
 8005310:	f04f 0900 	mov.w	r9, #0
 8005314:	f04f 0500 	mov.w	r5, #0
 8005318:	f04f 0600 	mov.w	r6, #0
 800531c:	4646      	mov	r6, r8
 800531e:	2500      	movs	r5, #0
 8005320:	ea45 0301 	orr.w	r3, r5, r1
 8005324:	ea46 0402 	orr.w	r4, r6, r2
 8005328:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800532c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005332:	3305      	adds	r3, #5
 8005334:	6938      	ldr	r0, [r7, #16]
 8005336:	4403      	add	r3, r0
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	fa5f f883 	uxtb.w	r8, r3
 800533e:	f04f 0900 	mov.w	r9, #0
 8005342:	f04f 0500 	mov.w	r5, #0
 8005346:	f04f 0600 	mov.w	r6, #0
 800534a:	ea4f 2608 	mov.w	r6, r8, lsl #8
 800534e:	2500      	movs	r5, #0
 8005350:	ea45 0301 	orr.w	r3, r5, r1
 8005354:	ea46 0402 	orr.w	r4, r6, r2
 8005358:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800535c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005362:	3306      	adds	r3, #6
 8005364:	6938      	ldr	r0, [r7, #16]
 8005366:	4403      	add	r3, r0
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	fa5f f883 	uxtb.w	r8, r3
 800536e:	f04f 0900 	mov.w	r9, #0
 8005372:	f04f 0500 	mov.w	r5, #0
 8005376:	f04f 0600 	mov.w	r6, #0
 800537a:	ea4f 4608 	mov.w	r6, r8, lsl #16
 800537e:	2500      	movs	r5, #0
 8005380:	ea45 0301 	orr.w	r3, r5, r1
 8005384:	ea46 0402 	orr.w	r4, r6, r2
 8005388:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_st_effort.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800538c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005392:	3307      	adds	r3, #7
 8005394:	6938      	ldr	r0, [r7, #16]
 8005396:	4403      	add	r3, r0
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	fa5f f883 	uxtb.w	r8, r3
 800539e:	f04f 0900 	mov.w	r9, #0
 80053a2:	f04f 0500 	mov.w	r5, #0
 80053a6:	f04f 0600 	mov.w	r6, #0
 80053aa:	ea4f 6608 	mov.w	r6, r8, lsl #24
 80053ae:	2500      	movs	r5, #0
 80053b0:	ea45 0301 	orr.w	r3, r5, r1
 80053b4:	ea46 0402 	orr.w	r4, r6, r2
 80053b8:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->st_effort = u_st_effort.real;
 80053bc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
      offset += sizeof(this->st_effort);
 80053c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c8:	3308      	adds	r3, #8
 80053ca:	65fb      	str	r3, [r7, #92]	; 0x5c
        memcpy( &(this->effort[i]), &(this->st_effort), sizeof(double));
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	18d0      	adds	r0, r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	3348      	adds	r3, #72	; 0x48
 80053da:	2208      	movs	r2, #8
 80053dc:	4619      	mov	r1, r3
 80053de:	f00e ffd1 	bl	8014384 <memcpy>
      for( uint32_t i = 0; i < effort_length; i++){
 80053e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e4:	3301      	adds	r3, #1
 80053e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053e8:	e728      	b.n	800523c <_ZN11sensor_msgs10JointState11deserializeEPh+0x5f4>
      }
     return offset;
 80053ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    }
 80053ec:	4618      	mov	r0, r3
 80053ee:	3764      	adds	r7, #100	; 0x64
 80053f0:	46bd      	mov	sp, r7
 80053f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080053f8 <_ZN11sensor_msgs10JointState7getTypeEv>:

    const char * getType(){ return "sensor_msgs/JointState"; };
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <_ZN11sensor_msgs10JointState7getTypeEv+0x18>)
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	08014e90 	.word	0x08014e90

08005414 <_ZN11sensor_msgs10JointState6getMD5Ev>:
    const char * getMD5(){ return "3066dcd76a6cfaef579bd0f34173e9fd"; };
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <_ZN11sensor_msgs10JointState6getMD5Ev+0x18>)
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	08014ea8 	.word	0x08014ea8

08005430 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4618      	mov	r0, r3
 800543c:	f7fb ff12 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3308      	adds	r3, #8
 800544a:	4618      	mov	r0, r3
 800544c:	f7fe f816 	bl	800347c <_ZN13geometry_msgs7Vector3C1Ev>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3328      	adds	r3, #40	; 0x28
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe f811 	bl	800347c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	08015430 	.word	0x08015430

08005468 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f103 0008 	add.w	r0, r3, #8
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	4413      	add	r3, r2
 8005482:	4619      	mov	r1, r3
 8005484:	f7fe f822 	bl	80034cc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005488:	4602      	mov	r2, r0
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	4413      	add	r3, r2
 800549c:	4619      	mov	r1, r3
 800549e:	f7fe f815 	bl	80034cc <_ZNK13geometry_msgs7Vector39serializeEPh>
 80054a2:	4602      	mov	r2, r0
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
      return offset;
 80054aa:	68fb      	ldr	r3, [r7, #12]
    }
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f103 0008 	add.w	r0, r3, #8
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	4413      	add	r3, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	f7fe f96e 	bl	80037b0 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	4413      	add	r3, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	f7fe f961 	bl	80037b0 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
     return offset;
 80054f6:	68fb      	ldr	r3, [r7, #12]
    }
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	4b03      	ldr	r3, [pc, #12]	; (8005518 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	08014ecc 	.word	0x08014ecc

0800551c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	08014ee0 	.word	0x08014ee0

08005538 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4618      	mov	r0, r3
 8005544:	f7fb fe8e 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8005548:	4a08      	ldr	r2, [pc, #32]	; (800556c <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3308      	adds	r3, #8
 8005552:	4618      	mov	r0, r3
 8005554:	f7fd ff92 	bl	800347c <_ZN13geometry_msgs7Vector3C1Ev>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3328      	adds	r3, #40	; 0x28
 800555c:	4618      	mov	r0, r3
 800555e:	f7fd f9f1 	bl	8002944 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	08015418 	.word	0x08015418

08005570 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f103 0008 	add.w	r0, r3, #8
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	4413      	add	r3, r2
 800558a:	4619      	mov	r1, r3
 800558c:	f7fd ff9e 	bl	80034cc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005590:	4602      	mov	r2, r0
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	4413      	add	r3, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	f7fd f9fb 	bl	80029a0 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80055aa:	4602      	mov	r2, r0
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80055b2:	68fb      	ldr	r3, [r7, #12]
    }
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f103 0008 	add.w	r0, r3, #8
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	4413      	add	r3, r2
 80055d6:	4619      	mov	r1, r3
 80055d8:	f7fe f8ea 	bl	80037b0 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80055dc:	4602      	mov	r2, r0
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	f7fd fbbe 	bl	8002d72 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
     return offset;
 80055fe:	68fb      	ldr	r3, [r7, #12]
    }
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <_ZN13geometry_msgs9Transform7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Transform"; };
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	4b03      	ldr	r3, [pc, #12]	; (8005620 <_ZN13geometry_msgs9Transform7getTypeEv+0x18>)
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	08014f04 	.word	0x08014f04

08005624 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <_ZN13geometry_msgs9Transform6getMD5Ev+0x18>)
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	08014f1c 	.word	0x08014f1c

08005640 <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4618      	mov	r0, r3
 800564c:	f7fb fe0a 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8005650:	4a0a      	ldr	r2, [pc, #40]	; (800567c <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3304      	adds	r3, #4
 800565a:	4618      	mov	r0, r3
 800565c:	f7fc ffde 	bl	800261c <_ZN8std_msgs6HeaderC1Ev>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a07      	ldr	r2, [pc, #28]	; (8005680 <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 8005664:	619a      	str	r2, [r3, #24]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3320      	adds	r3, #32
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff ff64 	bl	8005538 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	08015400 	.word	0x08015400
 8005680:	08014cb4 	.word	0x08014cb4

08005684 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	1d18      	adds	r0, r3, #4
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	4413      	add	r3, r2
 800569c:	4619      	mov	r1, r3
 800569e:	f7fc ffdd 	bl	800265c <_ZNK8std_msgs6Header9serializeEPh>
 80056a2:	4602      	mov	r2, r0
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fa fd8e 	bl	80001d0 <strlen>
 80056b4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	4413      	add	r3, r2
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f002 fdf2 	bl	80082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3304      	adds	r3, #4
 80056c8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	18d0      	adds	r0, r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	4619      	mov	r1, r3
 80056d8:	f00e fe54 	bl	8014384 <memcpy>
      offset += length_child_frame_id;
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4413      	add	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f103 0020 	add.w	r0, r3, #32
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	4413      	add	r3, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	f7ff ff3d 	bl	8005570 <_ZNK13geometry_msgs9Transform9serializeEPh>
 80056f6:	4602      	mov	r2, r0
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
      return offset;
 80056fe:	68fb      	ldr	r3, [r7, #12]
    }
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	1d18      	adds	r0, r3, #4
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	4413      	add	r3, r2
 8005720:	4619      	mov	r1, r3
 8005722:	f7fd f833 	bl	800278c <_ZN8std_msgs6Header11deserializeEPh>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4413      	add	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	441a      	add	r2, r3
 8005734:	f107 030c 	add.w	r3, r7, #12
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f002 fdd2 	bl	80082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3304      	adds	r3, #4
 8005744:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	429a      	cmp	r2, r3
 8005754:	d20c      	bcs.n	8005770 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	441a      	add	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3b01      	subs	r3, #1
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	440b      	add	r3, r1
 8005764:	7812      	ldrb	r2, [r2, #0]
 8005766:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	3301      	adds	r3, #1
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e7ec      	b.n	800574a <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4413      	add	r3, r2
 8005776:	3b01      	subs	r3, #1
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	4413      	add	r3, r2
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	3b01      	subs	r3, #1
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	441a      	add	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f103 0020 	add.w	r0, r3, #32
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	4413      	add	r3, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	f7ff ff0b 	bl	80055bc <_ZN13geometry_msgs9Transform11deserializeEPh>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
     return offset;
 80057ae:	693b      	ldr	r3, [r7, #16]
    }
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x18>)
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	08014f40 	.word	0x08014f40

080057d4 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	4b03      	ldr	r3, [pc, #12]	; (80057ec <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x18>)
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	08014f60 	.word	0x08014f60

080057f0 <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 80057f0:	b590      	push	{r4, r7, lr}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	e9c7 2300 	strd	r2, r3, [r7]
  geometry_msgs::Quaternion q;
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7fd f8a1 	bl	8002944 <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = 0;
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	f04f 0400 	mov.w	r4, #0
 800580c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  q.y = 0;
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	f04f 0400 	mov.w	r4, #0
 800581a:	e9c2 3404 	strd	r3, r4, [r2, #16]
  q.z = sin(yaw * 0.5);
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	4b19      	ldr	r3, [pc, #100]	; (8005888 <_ZN2tfL23createQuaternionFromYawEd+0x98>)
 8005824:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005828:	f7fa fee6 	bl	80005f8 <__aeabi_dmul>
 800582c:	4603      	mov	r3, r0
 800582e:	460c      	mov	r4, r1
 8005830:	ec44 3b17 	vmov	d7, r3, r4
 8005834:	eeb0 0a47 	vmov.f32	s0, s14
 8005838:	eef0 0a67 	vmov.f32	s1, s15
 800583c:	f00d f9e4 	bl	8012c08 <sin>
 8005840:	eeb0 7a40 	vmov.f32	s14, s0
 8005844:	eef0 7a60 	vmov.f32	s15, s1
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	ed83 7b06 	vstr	d7, [r3, #24]
  q.w = cos(yaw * 0.5);
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <_ZN2tfL23createQuaternionFromYawEd+0x98>)
 8005854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005858:	f7fa fece 	bl	80005f8 <__aeabi_dmul>
 800585c:	4603      	mov	r3, r0
 800585e:	460c      	mov	r4, r1
 8005860:	ec44 3b17 	vmov	d7, r3, r4
 8005864:	eeb0 0a47 	vmov.f32	s0, s14
 8005868:	eef0 0a67 	vmov.f32	s1, s15
 800586c:	f00d f97c 	bl	8012b68 <cos>
 8005870:	eeb0 7a40 	vmov.f32	s14, s0
 8005874:	eef0 7a60 	vmov.f32	s15, s1
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	ed83 7b08 	vstr	d7, [r3, #32]
  return q;
 800587e:	bf00      	nop
}
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	bd90      	pop	{r4, r7, pc}
 8005888:	3fe00000 	.word	0x3fe00000

0800588c <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
      transforms_length(0), transforms(NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4618      	mov	r0, r3
 8005898:	f7fb fce4 	bl	8001264 <_ZN3ros3MsgC1Ev>
 800589c:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <_ZN2tf9tfMessageC1Ev+0x38>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	605a      	str	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3308      	adds	r3, #8
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff fec7 	bl	8005640 <_ZN13geometry_msgs16TransformStampedC1Ev>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	679a      	str	r2, [r3, #120]	; 0x78
    {
    }
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	080153e8 	.word	0x080153e8

080058c8 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	4413      	add	r3, r2
 80058e0:	b2ca      	uxtb	r2, r1
 80058e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	0a19      	lsrs	r1, r3, #8
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	4413      	add	r3, r2
 80058f2:	b2ca      	uxtb	r2, r1
 80058f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	0c19      	lsrs	r1, r3, #16
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3302      	adds	r3, #2
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	4413      	add	r3, r2
 8005904:	b2ca      	uxtb	r2, r1
 8005906:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	0e19      	lsrs	r1, r3, #24
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3303      	adds	r3, #3
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	4413      	add	r3, r2
 8005916:	b2ca      	uxtb	r2, r1
 8005918:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3304      	adds	r3, #4
 800591e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8005920:	2300      	movs	r3, #0
 8005922:	60bb      	str	r3, [r7, #8]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	d223      	bcs.n	8005976 <_ZNK2tf9tfMessage9serializeEPh+0xae>
      offset += this->transforms[i].serialize(outbuffer + offset);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	4613      	mov	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	18c8      	adds	r0, r1, r3
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4613      	mov	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	440b      	add	r3, r1
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	440a      	add	r2, r1
 8005962:	4611      	mov	r1, r2
 8005964:	4798      	blx	r3
 8005966:	4602      	mov	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	3301      	adds	r3, #1
 8005972:	60bb      	str	r3, [r7, #8]
 8005974:	e7d6      	b.n	8005924 <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 8005976:	68fb      	ldr	r3, [r7, #12]
    }
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	4413      	add	r3, r2
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	3301      	adds	r3, #1
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	4413      	add	r3, r2
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	3302      	adds	r3, #2
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	4413      	add	r3, r2
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	3303      	adds	r3, #3
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	4413      	add	r3, r2
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	061b      	lsls	r3, r3, #24
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	3304      	adds	r3, #4
 80059d2:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d90c      	bls.n	80059f8 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	f00e fd45 	bl	801447c <realloc>
 80059f2:	4602      	mov	r2, r0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	679a      	str	r2, [r3, #120]	; 0x78
      transforms_length = transforms_lengthT;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 80059fe:	2300      	movs	r3, #0
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d21e      	bcs.n	8005a4a <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f103 0008 	add.w	r0, r3, #8
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	4413      	add	r3, r2
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f7ff fe75 	bl	8005708 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	18c8      	adds	r0, r1, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	2270      	movs	r2, #112	; 0x70
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	f00e fca1 	bl	8014384 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3301      	adds	r3, #1
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	e7db      	b.n	8005a02 <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 8005a4a:	697b      	ldr	r3, [r7, #20]
    }
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <_ZN2tf9tfMessage7getTypeEv>:

    const char * getType(){ return "tf/tfMessage"; };
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <_ZN2tf9tfMessage7getTypeEv+0x18>)
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	08014f84 	.word	0x08014f84

08005a70 <_ZN2tf9tfMessage6getMD5Ev>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	4b03      	ldr	r3, [pc, #12]	; (8005a88 <_ZN2tf9tfMessage6getMD5Ev+0x18>)
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	08014f94 	.word	0x08014f94

08005a8c <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff fef8 	bl	800588c <_ZN2tf9tfMessageC1Ev>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4904      	ldr	r1, [pc, #16]	; (8005ab8 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 8005aa8:	f7fc faae 	bl	8002008 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	08014fb8 	.word	0x08014fb8

08005abc <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEE>:

  void init(ros::NodeHandle &nh)
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  {
    nh.advertise(publisher_);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3380      	adds	r3, #128	; 0x80
 8005aca:	4619      	mov	r1, r3
 8005acc:	6838      	ldr	r0, [r7, #0]
 8005ace:	f002 fc2e 	bl	800832e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
  }
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>:

  void sendTransform(geometry_msgs::TransformStamped &transform)
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  {
    internal_msg.transforms_length = 1;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	605a      	str	r2, [r3, #4]
    internal_msg.transforms = &transform;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	679a      	str	r2, [r3, #120]	; 0x78
    publisher_.publish(&internal_msg);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3380      	adds	r3, #128	; 0x80
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fc fa9c 	bl	8002036 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fb fba6 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8005b18:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	f04f 0400 	mov.w	r4, #0
 8005b28:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	f04f 0400 	mov.w	r4, #0
 8005b36:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	e9c2 3406 	strd	r3, r4, [r2, #24]
    {
    }
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd90      	pop	{r4, r7, pc}
 8005b52:	bf00      	nop
 8005b54:	080153bc 	.word	0x080153bc

08005b58 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005b58:	b490      	push	{r4, r7}
 8005b5a:	b08a      	sub	sp, #40	; 0x28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8005b6c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8005b70:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	440a      	add	r2, r1
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8005b7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	f04f 0400 	mov.w	r4, #0
 8005b8a:	0a0b      	lsrs	r3, r1, #8
 8005b8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b90:	0a14      	lsrs	r4, r2, #8
 8005b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b94:	3201      	adds	r2, #1
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	440a      	add	r2, r1
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8005b9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	f04f 0400 	mov.w	r4, #0
 8005baa:	0c0b      	lsrs	r3, r1, #16
 8005bac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bb0:	0c14      	lsrs	r4, r2, #16
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb4:	3202      	adds	r2, #2
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	440a      	add	r2, r1
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8005bbe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	f04f 0400 	mov.w	r4, #0
 8005bca:	0e0b      	lsrs	r3, r1, #24
 8005bcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005bd0:	0e14      	lsrs	r4, r2, #24
 8005bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd4:	3203      	adds	r2, #3
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	440a      	add	r2, r1
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8005bde:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	f04f 0400 	mov.w	r4, #0
 8005bea:	0013      	movs	r3, r2
 8005bec:	2400      	movs	r4, #0
 8005bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf0:	3204      	adds	r2, #4
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8005bfa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	f04f 0400 	mov.w	r4, #0
 8005c06:	0a13      	lsrs	r3, r2, #8
 8005c08:	2400      	movs	r4, #0
 8005c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0c:	3205      	adds	r2, #5
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	440a      	add	r2, r1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8005c16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	f04f 0400 	mov.w	r4, #0
 8005c22:	0c13      	lsrs	r3, r2, #16
 8005c24:	2400      	movs	r4, #0
 8005c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c28:	3206      	adds	r2, #6
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8005c32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	f04f 0400 	mov.w	r4, #0
 8005c3e:	0e13      	lsrs	r3, r2, #24
 8005c40:	2400      	movs	r4, #0
 8005c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c44:	3207      	adds	r2, #7
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	440a      	add	r2, r1
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->x);
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	3308      	adds	r3, #8
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005c5a:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8005c5e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	440a      	add	r2, r1
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8005c6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	f04f 0400 	mov.w	r4, #0
 8005c78:	0a0b      	lsrs	r3, r1, #8
 8005c7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005c7e:	0a14      	lsrs	r4, r2, #8
 8005c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c82:	3201      	adds	r2, #1
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	440a      	add	r2, r1
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8005c8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	f04f 0400 	mov.w	r4, #0
 8005c98:	0c0b      	lsrs	r3, r1, #16
 8005c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c9e:	0c14      	lsrs	r4, r2, #16
 8005ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca2:	3202      	adds	r2, #2
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8005cac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	f04f 0400 	mov.w	r4, #0
 8005cb8:	0e0b      	lsrs	r3, r1, #24
 8005cba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cbe:	0e14      	lsrs	r4, r2, #24
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc2:	3203      	adds	r2, #3
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8005ccc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	f04f 0400 	mov.w	r4, #0
 8005cd8:	0013      	movs	r3, r2
 8005cda:	2400      	movs	r4, #0
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	3204      	adds	r2, #4
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	440a      	add	r2, r1
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8005ce8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	f04f 0400 	mov.w	r4, #0
 8005cf4:	0a13      	lsrs	r3, r2, #8
 8005cf6:	2400      	movs	r4, #0
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	3205      	adds	r2, #5
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	440a      	add	r2, r1
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8005d04:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d08:	f04f 0300 	mov.w	r3, #0
 8005d0c:	f04f 0400 	mov.w	r4, #0
 8005d10:	0c13      	lsrs	r3, r2, #16
 8005d12:	2400      	movs	r4, #0
 8005d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d16:	3206      	adds	r2, #6
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8005d20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	f04f 0400 	mov.w	r4, #0
 8005d2c:	0e13      	lsrs	r3, r2, #24
 8005d2e:	2400      	movs	r4, #0
 8005d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d32:	3207      	adds	r2, #7
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	440a      	add	r2, r1
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->y);
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	3308      	adds	r3, #8
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8005d48:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8005d4c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	440a      	add	r2, r1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8005d5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	f04f 0400 	mov.w	r4, #0
 8005d66:	0a0b      	lsrs	r3, r1, #8
 8005d68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d6c:	0a14      	lsrs	r4, r2, #8
 8005d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d70:	3201      	adds	r2, #1
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	440a      	add	r2, r1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8005d7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	f04f 0400 	mov.w	r4, #0
 8005d86:	0c0b      	lsrs	r3, r1, #16
 8005d88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d8c:	0c14      	lsrs	r4, r2, #16
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d90:	3202      	adds	r2, #2
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	440a      	add	r2, r1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8005d9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	f04f 0400 	mov.w	r4, #0
 8005da6:	0e0b      	lsrs	r3, r1, #24
 8005da8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dac:	0e14      	lsrs	r4, r2, #24
 8005dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db0:	3203      	adds	r2, #3
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	440a      	add	r2, r1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8005dba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	f04f 0400 	mov.w	r4, #0
 8005dc6:	0013      	movs	r3, r2
 8005dc8:	2400      	movs	r4, #0
 8005dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dcc:	3204      	adds	r2, #4
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8005dd6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dda:	f04f 0300 	mov.w	r3, #0
 8005dde:	f04f 0400 	mov.w	r4, #0
 8005de2:	0a13      	lsrs	r3, r2, #8
 8005de4:	2400      	movs	r4, #0
 8005de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de8:	3205      	adds	r2, #5
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	440a      	add	r2, r1
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8005df2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	f04f 0400 	mov.w	r4, #0
 8005dfe:	0c13      	lsrs	r3, r2, #16
 8005e00:	2400      	movs	r4, #0
 8005e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e04:	3206      	adds	r2, #6
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	440a      	add	r2, r1
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8005e0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	f04f 0400 	mov.w	r4, #0
 8005e1a:	0e13      	lsrs	r3, r2, #24
 8005e1c:	2400      	movs	r4, #0
 8005e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e20:	3207      	adds	r2, #7
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	440a      	add	r2, r1
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->z);
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005e32:	4618      	mov	r0, r3
 8005e34:	3728      	adds	r7, #40	; 0x28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc90      	pop	{r4, r7}
 8005e3a:	4770      	bx	lr

08005e3c <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005e3c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e40:	b08c      	sub	sp, #48	; 0x30
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	f04f 0400 	mov.w	r4, #0
 8005e54:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005e58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	68b8      	ldr	r0, [r7, #8]
 8005e60:	4403      	add	r3, r0
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	461c      	mov	r4, r3
 8005e66:	b2e4      	uxtb	r4, r4
 8005e68:	f04f 0500 	mov.w	r5, #0
 8005e6c:	4623      	mov	r3, r4
 8005e6e:	462c      	mov	r4, r5
 8005e70:	ea43 0301 	orr.w	r3, r3, r1
 8005e74:	ea44 0402 	orr.w	r4, r4, r2
 8005e78:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005e7c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005e80:	461d      	mov	r5, r3
 8005e82:	4626      	mov	r6, r4
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	3301      	adds	r3, #1
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	b2d9      	uxtb	r1, r3
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	f04f 0400 	mov.w	r4, #0
 8005e9c:	0214      	lsls	r4, r2, #8
 8005e9e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005ea2:	020b      	lsls	r3, r1, #8
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4632      	mov	r2, r6
 8005ea8:	ea41 0103 	orr.w	r1, r1, r3
 8005eac:	ea42 0204 	orr.w	r2, r2, r4
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4614      	mov	r4, r2
 8005eb4:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005eb8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005ebc:	461d      	mov	r5, r3
 8005ebe:	4626      	mov	r6, r4
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	b2d9      	uxtb	r1, r3
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	f04f 0400 	mov.w	r4, #0
 8005ed8:	0414      	lsls	r4, r2, #16
 8005eda:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8005ede:	040b      	lsls	r3, r1, #16
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	ea41 0103 	orr.w	r1, r1, r3
 8005ee8:	ea42 0204 	orr.w	r2, r2, r4
 8005eec:	460b      	mov	r3, r1
 8005eee:	4614      	mov	r4, r2
 8005ef0:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005ef4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	3303      	adds	r3, #3
 8005efc:	68b8      	ldr	r0, [r7, #8]
 8005efe:	4403      	add	r3, r0
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f04f 0400 	mov.w	r4, #0
 8005f08:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8005f0c:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 8005f10:	ea41 030a 	orr.w	r3, r1, sl
 8005f14:	ea42 040b 	orr.w	r4, r2, fp
 8005f18:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005f1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	3304      	adds	r3, #4
 8005f24:	68b8      	ldr	r0, [r7, #8]
 8005f26:	4403      	add	r3, r0
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	fa5f fa83 	uxtb.w	sl, r3
 8005f2e:	f04f 0b00 	mov.w	fp, #0
 8005f32:	f04f 0300 	mov.w	r3, #0
 8005f36:	f04f 0400 	mov.w	r4, #0
 8005f3a:	4625      	mov	r5, r4
 8005f3c:	461c      	mov	r4, r3
 8005f3e:	4653      	mov	r3, sl
 8005f40:	461d      	mov	r5, r3
 8005f42:	2300      	movs	r3, #0
 8005f44:	461c      	mov	r4, r3
 8005f46:	4623      	mov	r3, r4
 8005f48:	462c      	mov	r4, r5
 8005f4a:	ea43 0301 	orr.w	r3, r3, r1
 8005f4e:	ea44 0402 	orr.w	r4, r4, r2
 8005f52:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005f56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	3305      	adds	r3, #5
 8005f5e:	68b8      	ldr	r0, [r7, #8]
 8005f60:	4403      	add	r3, r0
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	fa5f fa83 	uxtb.w	sl, r3
 8005f68:	f04f 0b00 	mov.w	fp, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	f04f 0400 	mov.w	r4, #0
 8005f74:	4625      	mov	r5, r4
 8005f76:	461c      	mov	r4, r3
 8005f78:	ea4f 230a 	mov.w	r3, sl, lsl #8
 8005f7c:	461d      	mov	r5, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	461c      	mov	r4, r3
 8005f82:	4623      	mov	r3, r4
 8005f84:	462c      	mov	r4, r5
 8005f86:	ea43 0301 	orr.w	r3, r3, r1
 8005f8a:	ea44 0402 	orr.w	r4, r4, r2
 8005f8e:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005f92:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	3306      	adds	r3, #6
 8005f9a:	68b8      	ldr	r0, [r7, #8]
 8005f9c:	4403      	add	r3, r0
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	fa5f fa83 	uxtb.w	sl, r3
 8005fa4:	f04f 0b00 	mov.w	fp, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	f04f 0400 	mov.w	r4, #0
 8005fb0:	4625      	mov	r5, r4
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8005fb8:	461d      	mov	r5, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	461c      	mov	r4, r3
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	462c      	mov	r4, r5
 8005fc2:	ea43 0301 	orr.w	r3, r3, r1
 8005fc6:	ea44 0402 	orr.w	r4, r4, r2
 8005fca:	e9c7 3408 	strd	r3, r4, [r7, #32]
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005fce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	3307      	adds	r3, #7
 8005fd6:	68b8      	ldr	r0, [r7, #8]
 8005fd8:	4403      	add	r3, r0
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	fa5f fa83 	uxtb.w	sl, r3
 8005fe0:	f04f 0b00 	mov.w	fp, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	f04f 0400 	mov.w	r4, #0
 8005fec:	4625      	mov	r5, r4
 8005fee:	461c      	mov	r4, r3
 8005ff0:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8005ff4:	461d      	mov	r5, r3
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	461c      	mov	r4, r3
 8005ffa:	4623      	mov	r3, r4
 8005ffc:	462c      	mov	r4, r5
 8005ffe:	ea43 0301 	orr.w	r3, r3, r1
 8006002:	ea44 0402 	orr.w	r4, r4, r2
 8006006:	e9c7 3408 	strd	r3, r4, [r7, #32]
      this->x = u_x.real;
 800600a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->x);
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	3308      	adds	r3, #8
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	f04f 0400 	mov.w	r4, #0
 8006022:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006026:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	68b8      	ldr	r0, [r7, #8]
 800602e:	4403      	add	r3, r0
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	fa5f fa83 	uxtb.w	sl, r3
 8006036:	f04f 0b00 	mov.w	fp, #0
 800603a:	ea4a 0301 	orr.w	r3, sl, r1
 800603e:	ea4b 0402 	orr.w	r4, fp, r2
 8006042:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006046:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604c:	3301      	adds	r3, #1
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	4413      	add	r3, r2
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b2d9      	uxtb	r1, r3
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	f04f 0400 	mov.w	r4, #0
 8006062:	4625      	mov	r5, r4
 8006064:	461c      	mov	r4, r3
 8006066:	0213      	lsls	r3, r2, #8
 8006068:	461d      	mov	r5, r3
 800606a:	462b      	mov	r3, r5
 800606c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8006070:	461d      	mov	r5, r3
 8006072:	020b      	lsls	r3, r1, #8
 8006074:	461c      	mov	r4, r3
 8006076:	4623      	mov	r3, r4
 8006078:	462c      	mov	r4, r5
 800607a:	ea43 030a 	orr.w	r3, r3, sl
 800607e:	ea44 040b 	orr.w	r4, r4, fp
 8006082:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006086:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	3302      	adds	r3, #2
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	4413      	add	r3, r2
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b2d9      	uxtb	r1, r3
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	f04f 0400 	mov.w	r4, #0
 80060a2:	4625      	mov	r5, r4
 80060a4:	461c      	mov	r4, r3
 80060a6:	0413      	lsls	r3, r2, #16
 80060a8:	461d      	mov	r5, r3
 80060aa:	462b      	mov	r3, r5
 80060ac:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80060b0:	461d      	mov	r5, r3
 80060b2:	040b      	lsls	r3, r1, #16
 80060b4:	461c      	mov	r4, r3
 80060b6:	4623      	mov	r3, r4
 80060b8:	462c      	mov	r4, r5
 80060ba:	ea43 030a 	orr.w	r3, r3, sl
 80060be:	ea44 040b 	orr.w	r4, r4, fp
 80060c2:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80060c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	3303      	adds	r3, #3
 80060ce:	68b8      	ldr	r0, [r7, #8]
 80060d0:	4403      	add	r3, r0
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f04f 0400 	mov.w	r4, #0
 80060da:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80060de:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80060e2:	ea41 0308 	orr.w	r3, r1, r8
 80060e6:	ea42 0409 	orr.w	r4, r2, r9
 80060ea:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80060ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	3304      	adds	r3, #4
 80060f6:	68b8      	ldr	r0, [r7, #8]
 80060f8:	4403      	add	r3, r0
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	fa5f f883 	uxtb.w	r8, r3
 8006100:	f04f 0900 	mov.w	r9, #0
 8006104:	f04f 0a00 	mov.w	sl, #0
 8006108:	f04f 0b00 	mov.w	fp, #0
 800610c:	46c3      	mov	fp, r8
 800610e:	f04f 0a00 	mov.w	sl, #0
 8006112:	ea4a 0301 	orr.w	r3, sl, r1
 8006116:	ea4b 0402 	orr.w	r4, fp, r2
 800611a:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800611e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	3305      	adds	r3, #5
 8006126:	68b8      	ldr	r0, [r7, #8]
 8006128:	4403      	add	r3, r0
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	fa5f f883 	uxtb.w	r8, r3
 8006130:	f04f 0900 	mov.w	r9, #0
 8006134:	f04f 0a00 	mov.w	sl, #0
 8006138:	f04f 0b00 	mov.w	fp, #0
 800613c:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 8006140:	f04f 0a00 	mov.w	sl, #0
 8006144:	ea4a 0301 	orr.w	r3, sl, r1
 8006148:	ea4b 0402 	orr.w	r4, fp, r2
 800614c:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006150:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	3306      	adds	r3, #6
 8006158:	68b8      	ldr	r0, [r7, #8]
 800615a:	4403      	add	r3, r0
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	fa5f f883 	uxtb.w	r8, r3
 8006162:	f04f 0900 	mov.w	r9, #0
 8006166:	f04f 0a00 	mov.w	sl, #0
 800616a:	f04f 0b00 	mov.w	fp, #0
 800616e:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8006172:	f04f 0a00 	mov.w	sl, #0
 8006176:	ea4a 0301 	orr.w	r3, sl, r1
 800617a:	ea4b 0402 	orr.w	r4, fp, r2
 800617e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006182:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	3307      	adds	r3, #7
 800618a:	68b8      	ldr	r0, [r7, #8]
 800618c:	4403      	add	r3, r0
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	fa5f f883 	uxtb.w	r8, r3
 8006194:	f04f 0900 	mov.w	r9, #0
 8006198:	f04f 0a00 	mov.w	sl, #0
 800619c:	f04f 0b00 	mov.w	fp, #0
 80061a0:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 80061a4:	f04f 0a00 	mov.w	sl, #0
 80061a8:	ea4a 0301 	orr.w	r3, sl, r1
 80061ac:	ea4b 0402 	orr.w	r4, fp, r2
 80061b0:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->y = u_y.real;
 80061b4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->y);
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	3308      	adds	r3, #8
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	f04f 0400 	mov.w	r4, #0
 80061cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80061d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	68b8      	ldr	r0, [r7, #8]
 80061d8:	4403      	add	r3, r0
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	fa5f f883 	uxtb.w	r8, r3
 80061e0:	f04f 0900 	mov.w	r9, #0
 80061e4:	ea48 0301 	orr.w	r3, r8, r1
 80061e8:	ea49 0402 	orr.w	r4, r9, r2
 80061ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80061f0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80061f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f6:	3301      	adds	r3, #1
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	4413      	add	r3, r2
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b2d9      	uxtb	r1, r3
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0a00 	mov.w	sl, #0
 8006208:	f04f 0b00 	mov.w	fp, #0
 800620c:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8006210:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8006214:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8006218:	ea4a 0308 	orr.w	r3, sl, r8
 800621c:	ea4b 0409 	orr.w	r4, fp, r9
 8006220:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006224:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	3302      	adds	r3, #2
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	4413      	add	r3, r2
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b2d9      	uxtb	r1, r3
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0a00 	mov.w	sl, #0
 800623c:	f04f 0b00 	mov.w	fp, #0
 8006240:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8006244:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8006248:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 800624c:	ea4a 0308 	orr.w	r3, sl, r8
 8006250:	ea4b 0409 	orr.w	r4, fp, r9
 8006254:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006258:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	3303      	adds	r3, #3
 8006260:	68b8      	ldr	r0, [r7, #8]
 8006262:	4403      	add	r3, r0
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f04f 0400 	mov.w	r4, #0
 800626c:	0a18      	lsrs	r0, r3, #8
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	061b      	lsls	r3, r3, #24
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006278:	ea43 0301 	orr.w	r3, r3, r1
 800627c:	ea44 0402 	orr.w	r4, r4, r2
 8006280:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006284:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	3304      	adds	r3, #4
 800628c:	68b8      	ldr	r0, [r7, #8]
 800628e:	4403      	add	r3, r0
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	b2dd      	uxtb	r5, r3
 8006294:	f04f 0600 	mov.w	r6, #0
 8006298:	f04f 0800 	mov.w	r8, #0
 800629c:	f04f 0900 	mov.w	r9, #0
 80062a0:	46a9      	mov	r9, r5
 80062a2:	f04f 0800 	mov.w	r8, #0
 80062a6:	ea48 0301 	orr.w	r3, r8, r1
 80062aa:	ea49 0402 	orr.w	r4, r9, r2
 80062ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80062b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	3305      	adds	r3, #5
 80062ba:	68b8      	ldr	r0, [r7, #8]
 80062bc:	4403      	add	r3, r0
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	b2dd      	uxtb	r5, r3
 80062c2:	f04f 0600 	mov.w	r6, #0
 80062c6:	f04f 0800 	mov.w	r8, #0
 80062ca:	f04f 0900 	mov.w	r9, #0
 80062ce:	ea4f 2905 	mov.w	r9, r5, lsl #8
 80062d2:	f04f 0800 	mov.w	r8, #0
 80062d6:	ea48 0301 	orr.w	r3, r8, r1
 80062da:	ea49 0402 	orr.w	r4, r9, r2
 80062de:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80062e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	3306      	adds	r3, #6
 80062ea:	68b8      	ldr	r0, [r7, #8]
 80062ec:	4403      	add	r3, r0
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	b2dd      	uxtb	r5, r3
 80062f2:	f04f 0600 	mov.w	r6, #0
 80062f6:	f04f 0800 	mov.w	r8, #0
 80062fa:	f04f 0900 	mov.w	r9, #0
 80062fe:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8006302:	f04f 0800 	mov.w	r8, #0
 8006306:	ea48 0301 	orr.w	r3, r8, r1
 800630a:	ea49 0402 	orr.w	r4, r9, r2
 800630e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006312:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	3307      	adds	r3, #7
 800631a:	68b8      	ldr	r0, [r7, #8]
 800631c:	4403      	add	r3, r0
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b2dd      	uxtb	r5, r3
 8006322:	f04f 0600 	mov.w	r6, #0
 8006326:	f04f 0800 	mov.w	r8, #0
 800632a:	f04f 0900 	mov.w	r9, #0
 800632e:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8006332:	f04f 0800 	mov.w	r8, #0
 8006336:	ea48 0301 	orr.w	r3, r8, r1
 800633a:	ea49 0402 	orr.w	r4, r9, r2
 800633e:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->z = u_z.real;
 8006342:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	e9c2 3406 	strd	r3, r4, [r2, #24]
      offset += sizeof(this->z);
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	3308      	adds	r3, #8
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006354:	4618      	mov	r0, r3
 8006356:	3730      	adds	r7, #48	; 0x30
 8006358:	46bd      	mov	sp, r7
 800635a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800635e:	4770      	bx	lr

08006360 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	4b03      	ldr	r3, [pc, #12]	; (8006378 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	08014fbc 	.word	0x08014fbc

0800637c <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	4b03      	ldr	r3, [pc, #12]	; (8006394 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	08014e38 	.word	0x08014e38

08006398 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fa ff5e 	bl	8001264 <_ZN3ros3MsgC1Ev>
 80063a8:	4a08      	ldr	r2, [pc, #32]	; (80063cc <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3308      	adds	r3, #8
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fba8 	bl	8005b08 <_ZN13geometry_msgs5PointC1Ev>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3328      	adds	r3, #40	; 0x28
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fc fac1 	bl	8002944 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	080153a4 	.word	0x080153a4

080063d0 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f103 0008 	add.w	r0, r3, #8
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	4413      	add	r3, r2
 80063ea:	4619      	mov	r1, r3
 80063ec:	f7ff fbb4 	bl	8005b58 <_ZNK13geometry_msgs5Point9serializeEPh>
 80063f0:	4602      	mov	r2, r0
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	4413      	add	r3, r2
 8006404:	4619      	mov	r1, r3
 8006406:	f7fc facb 	bl	80029a0 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 800640a:	4602      	mov	r2, r0
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
      return offset;
 8006412:	68fb      	ldr	r3, [r7, #12]
    }
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f103 0008 	add.w	r0, r3, #8
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	4413      	add	r3, r2
 8006436:	4619      	mov	r1, r3
 8006438:	f7ff fd00 	bl	8005e3c <_ZN13geometry_msgs5Point11deserializeEPh>
 800643c:	4602      	mov	r2, r0
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	4413      	add	r3, r2
 8006450:	4619      	mov	r1, r3
 8006452:	f7fc fc8e 	bl	8002d72 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8006456:	4602      	mov	r2, r0
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
     return offset;
 800645e:	68fb      	ldr	r3, [r7, #12]
    }
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	4b03      	ldr	r3, [pc, #12]	; (8006480 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	08014fd0 	.word	0x08014fd0

08006484 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	4b03      	ldr	r3, [pc, #12]	; (800649c <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	08014fe4 	.word	0x08014fe4

080064a0 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      double covariance[36];

    PoseWithCovariance():
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fa feda 	bl	8001264 <_ZN3ros3MsgC1Ev>
 80064b0:	4a0d      	ldr	r2, [pc, #52]	; (80064e8 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x48>)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3308      	adds	r3, #8
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff ff6c 	bl	8006398 <_ZN13geometry_msgs4PoseC1Ev>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80064c6:	2323      	movs	r3, #35	; 0x23
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db08      	blt.n	80064de <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x3e>
 80064cc:	f04f 0000 	mov.w	r0, #0
 80064d0:	f04f 0100 	mov.w	r1, #0
 80064d4:	e9c2 0100 	strd	r0, r1, [r2]
 80064d8:	3208      	adds	r2, #8
 80064da:	3b01      	subs	r3, #1
 80064dc:	e7f4      	b.n	80064c8 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	0801538c 	.word	0x0801538c

080064ec <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f103 0008 	add.w	r0, r3, #8
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	4413      	add	r3, r2
 8006506:	4619      	mov	r1, r3
 8006508:	f7ff ff62 	bl	80063d0 <_ZNK13geometry_msgs4Pose9serializeEPh>
 800650c:	4602      	mov	r2, r0
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4413      	add	r3, r2
 8006512:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006514:	2300      	movs	r3, #0
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b23      	cmp	r3, #35	; 0x23
 800651c:	d87e      	bhi.n	800661c <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	330b      	adds	r3, #11
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	4413      	add	r3, r2
 8006528:	e9d3 3400 	ldrd	r3, r4, [r3]
 800652c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8006530:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	440a      	add	r2, r1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 800653e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	f04f 0400 	mov.w	r4, #0
 800654a:	0a0b      	lsrs	r3, r1, #8
 800654c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006550:	0a14      	lsrs	r4, r2, #8
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	3201      	adds	r2, #1
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	440a      	add	r2, r1
 800655a:	b2db      	uxtb	r3, r3
 800655c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 800655e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	f04f 0400 	mov.w	r4, #0
 800656a:	0c0b      	lsrs	r3, r1, #16
 800656c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006570:	0c14      	lsrs	r4, r2, #16
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	3202      	adds	r2, #2
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	440a      	add	r2, r1
 800657a:	b2db      	uxtb	r3, r3
 800657c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 800657e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006582:	f04f 0300 	mov.w	r3, #0
 8006586:	f04f 0400 	mov.w	r4, #0
 800658a:	0e0b      	lsrs	r3, r1, #24
 800658c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006590:	0e14      	lsrs	r4, r2, #24
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	3203      	adds	r2, #3
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	440a      	add	r2, r1
 800659a:	b2db      	uxtb	r3, r3
 800659c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 800659e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	f04f 0400 	mov.w	r4, #0
 80065aa:	0013      	movs	r3, r2
 80065ac:	2400      	movs	r4, #0
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	3204      	adds	r2, #4
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	440a      	add	r2, r1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 80065ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	f04f 0400 	mov.w	r4, #0
 80065c6:	0a13      	lsrs	r3, r2, #8
 80065c8:	2400      	movs	r4, #0
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	3205      	adds	r2, #5
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	440a      	add	r2, r1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 80065d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065da:	f04f 0300 	mov.w	r3, #0
 80065de:	f04f 0400 	mov.w	r4, #0
 80065e2:	0c13      	lsrs	r3, r2, #16
 80065e4:	2400      	movs	r4, #0
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	3206      	adds	r2, #6
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	440a      	add	r2, r1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 80065f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	f04f 0400 	mov.w	r4, #0
 80065fe:	0e13      	lsrs	r3, r2, #24
 8006600:	2400      	movs	r4, #0
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	3207      	adds	r2, #7
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	440a      	add	r2, r1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->covariance[i]);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	3308      	adds	r3, #8
 8006612:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	3301      	adds	r3, #1
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	e77d      	b.n	8006518 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 800661c:	697b      	ldr	r3, [r7, #20]
    }
 800661e:	4618      	mov	r0, r3
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	bd90      	pop	{r4, r7, pc}

08006626 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006626:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
      offset += this->pose.deserialize(inbuffer + offset);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f103 0008 	add.w	r0, r3, #8
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	4413      	add	r3, r2
 8006642:	4619      	mov	r1, r3
 8006644:	f7ff feea 	bl	800641c <_ZN13geometry_msgs4Pose11deserializeEPh>
 8006648:	4602      	mov	r2, r0
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	4413      	add	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006650:	2300      	movs	r3, #0
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b23      	cmp	r3, #35	; 0x23
 8006658:	f200 80cf 	bhi.w	80067fa <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x1d4>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	f04f 0400 	mov.w	r4, #0
 8006664:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006668:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	6838      	ldr	r0, [r7, #0]
 8006670:	4403      	add	r3, r0
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	fa5f f883 	uxtb.w	r8, r3
 8006678:	f04f 0900 	mov.w	r9, #0
 800667c:	ea48 0301 	orr.w	r3, r8, r1
 8006680:	ea49 0402 	orr.w	r4, r9, r2
 8006684:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006688:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	3301      	adds	r3, #1
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	4413      	add	r3, r2
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b2d9      	uxtb	r1, r3
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0b00 	mov.w	fp, #0
 80066a0:	f04f 0c00 	mov.w	ip, #0
 80066a4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80066a8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80066ac:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80066b0:	ea4b 0308 	orr.w	r3, fp, r8
 80066b4:	ea4c 0409 	orr.w	r4, ip, r9
 80066b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80066bc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	3302      	adds	r3, #2
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	4413      	add	r3, r2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b2d9      	uxtb	r1, r3
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0b00 	mov.w	fp, #0
 80066d4:	f04f 0c00 	mov.w	ip, #0
 80066d8:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 80066dc:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 80066e0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80066e4:	ea4b 0308 	orr.w	r3, fp, r8
 80066e8:	ea4c 0409 	orr.w	r4, ip, r9
 80066ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80066f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	3303      	adds	r3, #3
 80066f8:	6838      	ldr	r0, [r7, #0]
 80066fa:	4403      	add	r3, r0
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f04f 0400 	mov.w	r4, #0
 8006704:	0a1e      	lsrs	r6, r3, #8
 8006706:	061d      	lsls	r5, r3, #24
 8006708:	ea41 0305 	orr.w	r3, r1, r5
 800670c:	ea42 0406 	orr.w	r4, r2, r6
 8006710:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006714:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3304      	adds	r3, #4
 800671c:	6838      	ldr	r0, [r7, #0]
 800671e:	4403      	add	r3, r0
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	fa5f f883 	uxtb.w	r8, r3
 8006726:	f04f 0900 	mov.w	r9, #0
 800672a:	f04f 0b00 	mov.w	fp, #0
 800672e:	f04f 0c00 	mov.w	ip, #0
 8006732:	46c4      	mov	ip, r8
 8006734:	f04f 0b00 	mov.w	fp, #0
 8006738:	ea4b 0301 	orr.w	r3, fp, r1
 800673c:	ea4c 0402 	orr.w	r4, ip, r2
 8006740:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006744:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3305      	adds	r3, #5
 800674c:	6838      	ldr	r0, [r7, #0]
 800674e:	4403      	add	r3, r0
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	fa5f f883 	uxtb.w	r8, r3
 8006756:	f04f 0900 	mov.w	r9, #0
 800675a:	f04f 0b00 	mov.w	fp, #0
 800675e:	f04f 0c00 	mov.w	ip, #0
 8006762:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 8006766:	f04f 0b00 	mov.w	fp, #0
 800676a:	ea4b 0301 	orr.w	r3, fp, r1
 800676e:	ea4c 0402 	orr.w	r4, ip, r2
 8006772:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006776:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	3306      	adds	r3, #6
 800677e:	6838      	ldr	r0, [r7, #0]
 8006780:	4403      	add	r3, r0
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	fa5f f883 	uxtb.w	r8, r3
 8006788:	f04f 0900 	mov.w	r9, #0
 800678c:	f04f 0b00 	mov.w	fp, #0
 8006790:	f04f 0c00 	mov.w	ip, #0
 8006794:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 8006798:	f04f 0b00 	mov.w	fp, #0
 800679c:	ea4b 0301 	orr.w	r3, fp, r1
 80067a0:	ea4c 0402 	orr.w	r4, ip, r2
 80067a4:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80067a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	3307      	adds	r3, #7
 80067b0:	6838      	ldr	r0, [r7, #0]
 80067b2:	4403      	add	r3, r0
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	fa5f f883 	uxtb.w	r8, r3
 80067ba:	f04f 0900 	mov.w	r9, #0
 80067be:	f04f 0b00 	mov.w	fp, #0
 80067c2:	f04f 0c00 	mov.w	ip, #0
 80067c6:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 80067ca:	f04f 0b00 	mov.w	fp, #0
 80067ce:	ea4b 0301 	orr.w	r3, fp, r1
 80067d2:	ea4c 0402 	orr.w	r4, ip, r2
 80067d6:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->covariance[i] = u_covariancei.real;
 80067da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	320b      	adds	r2, #11
 80067e4:	00d2      	lsls	r2, r2, #3
 80067e6:	440a      	add	r2, r1
 80067e8:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->covariance[i]);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	3308      	adds	r3, #8
 80067f0:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	3301      	adds	r3, #1
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	e72c      	b.n	8006654 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2e>
      }
     return offset;
 80067fa:	697b      	ldr	r3, [r7, #20]
    }
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

08006808 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	4b03      	ldr	r3, [pc, #12]	; (8006820 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	08015008 	.word	0x08015008

08006824 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	4b03      	ldr	r3, [pc, #12]	; (800683c <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	0801502c 	.word	0x0801502c

08006840 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      double covariance[36];

    TwistWithCovariance():
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4618      	mov	r0, r3
 800684c:	f7fa fd0a 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8006850:	4a0d      	ldr	r2, [pc, #52]	; (8006888 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x48>)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3308      	adds	r3, #8
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fde8 	bl	8005430 <_ZN13geometry_msgs5TwistC1Ev>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8006866:	2323      	movs	r3, #35	; 0x23
 8006868:	2b00      	cmp	r3, #0
 800686a:	db08      	blt.n	800687e <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x3e>
 800686c:	f04f 0000 	mov.w	r0, #0
 8006870:	f04f 0100 	mov.w	r1, #0
 8006874:	e9c2 0100 	strd	r0, r1, [r2]
 8006878:	3208      	adds	r2, #8
 800687a:	3b01      	subs	r3, #1
 800687c:	e7f4      	b.n	8006868 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	08015374 	.word	0x08015374

0800688c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f103 0008 	add.w	r0, r3, #8
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	4413      	add	r3, r2
 80068a6:	4619      	mov	r1, r3
 80068a8:	f7fe fdde 	bl	8005468 <_ZNK13geometry_msgs5Twist9serializeEPh>
 80068ac:	4602      	mov	r2, r0
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4413      	add	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b23      	cmp	r3, #35	; 0x23
 80068bc:	d87e      	bhi.n	80069bc <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	330a      	adds	r3, #10
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	4413      	add	r3, r2
 80068c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068cc:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 80068d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	440a      	add	r2, r1
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 80068de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	f04f 0400 	mov.w	r4, #0
 80068ea:	0a0b      	lsrs	r3, r1, #8
 80068ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80068f0:	0a14      	lsrs	r4, r2, #8
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	3201      	adds	r2, #1
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	440a      	add	r2, r1
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 80068fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	f04f 0400 	mov.w	r4, #0
 800690a:	0c0b      	lsrs	r3, r1, #16
 800690c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006910:	0c14      	lsrs	r4, r2, #16
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	3202      	adds	r2, #2
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	440a      	add	r2, r1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 800691e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	f04f 0400 	mov.w	r4, #0
 800692a:	0e0b      	lsrs	r3, r1, #24
 800692c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006930:	0e14      	lsrs	r4, r2, #24
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	3203      	adds	r2, #3
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	440a      	add	r2, r1
 800693a:	b2db      	uxtb	r3, r3
 800693c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 800693e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	f04f 0400 	mov.w	r4, #0
 800694a:	0013      	movs	r3, r2
 800694c:	2400      	movs	r4, #0
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	3204      	adds	r2, #4
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	440a      	add	r2, r1
 8006956:	b2db      	uxtb	r3, r3
 8006958:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 800695a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	f04f 0400 	mov.w	r4, #0
 8006966:	0a13      	lsrs	r3, r2, #8
 8006968:	2400      	movs	r4, #0
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	3205      	adds	r2, #5
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	440a      	add	r2, r1
 8006972:	b2db      	uxtb	r3, r3
 8006974:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8006976:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	f04f 0400 	mov.w	r4, #0
 8006982:	0c13      	lsrs	r3, r2, #16
 8006984:	2400      	movs	r4, #0
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	3206      	adds	r2, #6
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	440a      	add	r2, r1
 800698e:	b2db      	uxtb	r3, r3
 8006990:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8006992:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	f04f 0400 	mov.w	r4, #0
 800699e:	0e13      	lsrs	r3, r2, #24
 80069a0:	2400      	movs	r4, #0
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	3207      	adds	r2, #7
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	440a      	add	r2, r1
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->covariance[i]);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	3308      	adds	r3, #8
 80069b2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	3301      	adds	r3, #1
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	e77d      	b.n	80068b8 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 80069bc:	697b      	ldr	r3, [r7, #20]
    }
 80069be:	4618      	mov	r0, r3
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd90      	pop	{r4, r7, pc}

080069c6 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80069c6:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]
      offset += this->twist.deserialize(inbuffer + offset);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f103 0008 	add.w	r0, r3, #8
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	4413      	add	r3, r2
 80069e2:	4619      	mov	r1, r3
 80069e4:	f7fe fd66 	bl	80054b4 <_ZN13geometry_msgs5Twist11deserializeEPh>
 80069e8:	4602      	mov	r2, r0
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	4413      	add	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	2b23      	cmp	r3, #35	; 0x23
 80069f8:	f200 80cf 	bhi.w	8006b9a <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x1d4>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	f04f 0400 	mov.w	r4, #0
 8006a04:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006a08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	6838      	ldr	r0, [r7, #0]
 8006a10:	4403      	add	r3, r0
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	fa5f f883 	uxtb.w	r8, r3
 8006a18:	f04f 0900 	mov.w	r9, #0
 8006a1c:	ea48 0301 	orr.w	r3, r8, r1
 8006a20:	ea49 0402 	orr.w	r4, r9, r2
 8006a24:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006a28:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	4413      	add	r3, r2
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	b2d9      	uxtb	r1, r3
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0b00 	mov.w	fp, #0
 8006a40:	f04f 0c00 	mov.w	ip, #0
 8006a44:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8006a48:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8006a4c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8006a50:	ea4b 0308 	orr.w	r3, fp, r8
 8006a54:	ea4c 0409 	orr.w	r4, ip, r9
 8006a58:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006a5c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	3302      	adds	r3, #2
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	4413      	add	r3, r2
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	b2d9      	uxtb	r1, r3
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0b00 	mov.w	fp, #0
 8006a74:	f04f 0c00 	mov.w	ip, #0
 8006a78:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 8006a7c:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 8006a80:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8006a84:	ea4b 0308 	orr.w	r3, fp, r8
 8006a88:	ea4c 0409 	orr.w	r4, ip, r9
 8006a8c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006a90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	3303      	adds	r3, #3
 8006a98:	6838      	ldr	r0, [r7, #0]
 8006a9a:	4403      	add	r3, r0
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f04f 0400 	mov.w	r4, #0
 8006aa4:	0a1e      	lsrs	r6, r3, #8
 8006aa6:	061d      	lsls	r5, r3, #24
 8006aa8:	ea41 0305 	orr.w	r3, r1, r5
 8006aac:	ea42 0406 	orr.w	r4, r2, r6
 8006ab0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006ab4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	3304      	adds	r3, #4
 8006abc:	6838      	ldr	r0, [r7, #0]
 8006abe:	4403      	add	r3, r0
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	fa5f f883 	uxtb.w	r8, r3
 8006ac6:	f04f 0900 	mov.w	r9, #0
 8006aca:	f04f 0b00 	mov.w	fp, #0
 8006ace:	f04f 0c00 	mov.w	ip, #0
 8006ad2:	46c4      	mov	ip, r8
 8006ad4:	f04f 0b00 	mov.w	fp, #0
 8006ad8:	ea4b 0301 	orr.w	r3, fp, r1
 8006adc:	ea4c 0402 	orr.w	r4, ip, r2
 8006ae0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006ae4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	3305      	adds	r3, #5
 8006aec:	6838      	ldr	r0, [r7, #0]
 8006aee:	4403      	add	r3, r0
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	fa5f f883 	uxtb.w	r8, r3
 8006af6:	f04f 0900 	mov.w	r9, #0
 8006afa:	f04f 0b00 	mov.w	fp, #0
 8006afe:	f04f 0c00 	mov.w	ip, #0
 8006b02:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 8006b06:	f04f 0b00 	mov.w	fp, #0
 8006b0a:	ea4b 0301 	orr.w	r3, fp, r1
 8006b0e:	ea4c 0402 	orr.w	r4, ip, r2
 8006b12:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006b16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	3306      	adds	r3, #6
 8006b1e:	6838      	ldr	r0, [r7, #0]
 8006b20:	4403      	add	r3, r0
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	fa5f f883 	uxtb.w	r8, r3
 8006b28:	f04f 0900 	mov.w	r9, #0
 8006b2c:	f04f 0b00 	mov.w	fp, #0
 8006b30:	f04f 0c00 	mov.w	ip, #0
 8006b34:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 8006b38:	f04f 0b00 	mov.w	fp, #0
 8006b3c:	ea4b 0301 	orr.w	r3, fp, r1
 8006b40:	ea4c 0402 	orr.w	r4, ip, r2
 8006b44:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006b48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	3307      	adds	r3, #7
 8006b50:	6838      	ldr	r0, [r7, #0]
 8006b52:	4403      	add	r3, r0
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	fa5f f883 	uxtb.w	r8, r3
 8006b5a:	f04f 0900 	mov.w	r9, #0
 8006b5e:	f04f 0b00 	mov.w	fp, #0
 8006b62:	f04f 0c00 	mov.w	ip, #0
 8006b66:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 8006b6a:	f04f 0b00 	mov.w	fp, #0
 8006b6e:	ea4b 0301 	orr.w	r3, fp, r1
 8006b72:	ea4c 0402 	orr.w	r4, ip, r2
 8006b76:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->covariance[i] = u_covariancei.real;
 8006b7a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	320a      	adds	r2, #10
 8006b84:	00d2      	lsls	r2, r2, #3
 8006b86:	440a      	add	r2, r1
 8006b88:	e9c2 3400 	strd	r3, r4, [r2]
      offset += sizeof(this->covariance[i]);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	3301      	adds	r3, #1
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	e72c      	b.n	80069f4 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2e>
      }
     return offset;
 8006b9a:	697b      	ldr	r3, [r7, #20]
    }
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

08006ba8 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	08015050 	.word	0x08015050

08006bc4 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	08015074 	.word	0x08015074

08006be0 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fa fb3a 	bl	8001264 <_ZN3ros3MsgC1Ev>
 8006bf0:	4a0d      	ldr	r2, [pc, #52]	; (8006c28 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fb fd0e 	bl	800261c <_ZN8std_msgs6HeaderC1Ev>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a0a      	ldr	r2, [pc, #40]	; (8006c2c <_ZN8nav_msgs8OdometryC1Ev+0x4c>)
 8006c04:	619a      	str	r2, [r3, #24]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3320      	adds	r3, #32
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff fc48 	bl	80064a0 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff fe12 	bl	8006840 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	0801535c 	.word	0x0801535c
 8006c2c:	08014cb4 	.word	0x08014cb4

08006c30 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	1d18      	adds	r0, r3, #4
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	4413      	add	r3, r2
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f7fb fd07 	bl	800265c <_ZNK8std_msgs6Header9serializeEPh>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7f9 fab8 	bl	80001d0 <strlen>
 8006c60:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	4413      	add	r3, r2
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 fb1c 	bl	80082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3304      	adds	r3, #4
 8006c74:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	18d0      	adds	r0, r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	4619      	mov	r1, r3
 8006c84:	f00d fb7e 	bl	8014384 <memcpy>
      offset += length_child_frame_id;
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f103 0020 	add.w	r0, r3, #32
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	f7ff fc25 	bl	80064ec <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f7ff fde8 	bl	800688c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
      return offset;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
    }
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b086      	sub	sp, #24
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1d18      	adds	r0, r3, #4
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f7fb fd50 	bl	800278c <_ZN8std_msgs6Header11deserializeEPh>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	441a      	add	r2, r3
 8006cfa:	f107 030c 	add.w	r3, r7, #12
 8006cfe:	4611      	mov	r1, r2
 8006d00:	4618      	mov	r0, r3
 8006d02:	f001 faef 	bl	80082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d20c      	bcs.n	8006d36 <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	441a      	add	r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	440b      	add	r3, r1
 8006d2a:	7812      	ldrb	r2, [r2, #0]
 8006d2c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	3301      	adds	r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	e7ec      	b.n	8006d10 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	4413      	add	r3, r2
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	441a      	add	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f103 0020 	add.w	r0, r3, #32
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	4413      	add	r3, r2
 8006d66:	4619      	mov	r1, r3
 8006d68:	f7ff fc5d 	bl	8006626 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	4413      	add	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	4413      	add	r3, r2
 8006d80:	4619      	mov	r1, r3
 8006d82:	f7ff fe20 	bl	80069c6 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
     return offset;
 8006d8e:	693b      	ldr	r3, [r7, #16]
    }
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	4b03      	ldr	r3, [pc, #12]	; (8006db0 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	08015098 	.word	0x08015098

08006db4 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	4b03      	ldr	r3, [pc, #12]	; (8006dcc <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	080150ac 	.word	0x080150ac

08006dd0 <_ZL9main_taskPv>:
/* USER CODE END Includes */
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

static void main_task(void* arg)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	/* Initialize system */
		system_init();
 8006dd8:	f00a fbe8 	bl	80115ac <system_init>

	/* Initialize motor */
	    robot_motor_init();
 8006ddc:	f7fa f8b4 	bl	8000f48 <robot_motor_init>

	    /* Initialize IMU */
	    robot_imu_init();
 8006de0:	f7fa f8c0 	bl	8000f64 <robot_imu_init>

	    /* Set up ROS */
	    ros_setup();
 8006de4:	f000 f8a4 	bl	8006f30 <_Z9ros_setupv>
	while(1)
	{
				uint32_t t =  millis();              /*!< Update time counter */
 8006de8:	f7fa f944 	bl	8001074 <millis>
 8006dec:	6178      	str	r0, [r7, #20]
		        updateTime();                       /*!< Update ROS time */
 8006dee:	f000 fbb9 	bl	8007564 <_Z10updateTimev>
		        updateVariable(nh.connected());     /*!< Update variable */
 8006df2:	483d      	ldr	r0, [pc, #244]	; (8006ee8 <_ZL9main_taskPv+0x118>)
 8006df4:	f001 fbc0 	bl	8008578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9connectedEv>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fae8 	bl	80073d0 <_Z14updateVariableb>
		        updateTFPrefix(nh.connected());     /*!< Update TF */
 8006e00:	4839      	ldr	r0, [pc, #228]	; (8006ee8 <_ZL9main_taskPv+0x118>)
 8006e02:	f001 fbb9 	bl	8008578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9connectedEv>
 8006e06:	4603      	mov	r3, r0
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fcf3 	bl	80077f4 <_Z14updateTFPrefixb>

		        /* Control motor*/
		        if ((t - tTime[CONTROL_MOTOR_TIME_INDEX] >= 1000 / CONTROL_MOTOR_SPEED_FREQUENCY))
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b63      	cmp	r3, #99	; 0x63
 8006e18:	d912      	bls.n	8006e40 <_ZL9main_taskPv+0x70>
		        {
		        	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		            updateGoalVelocity();
 8006e1a:	f000 fcd7 	bl	80077cc <_Z18updateGoalVelocityv>
		            if ((t - tTime[CONTROL_MOTOR_TIMEOUT_TIME_INDEX]) > CONTROL_MOTOR_TIMEOUT)
 8006e1e:	4b33      	ldr	r3, [pc, #204]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006e2a:	d903      	bls.n	8006e34 <_ZL9main_taskPv+0x64>
		            {
		                controlMotor(zero_velocity);
 8006e2c:	4830      	ldr	r0, [pc, #192]	; (8006ef0 <_ZL9main_taskPv+0x120>)
 8006e2e:	f001 f98f 	bl	8008150 <_Z12controlMotorPf>
 8006e32:	e002      	b.n	8006e3a <_ZL9main_taskPv+0x6a>
		            }
		            else
		            {
		                controlMotor(goal_velocity);
 8006e34:	482f      	ldr	r0, [pc, #188]	; (8006ef4 <_ZL9main_taskPv+0x124>)
 8006e36:	f001 f98b 	bl	8008150 <_Z12controlMotorPf>
		            }
		            tTime[CONTROL_MOTOR_TIME_INDEX] = t;
 8006e3a:	4a2c      	ldr	r2, [pc, #176]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	6013      	str	r3, [r2, #0]
		        }

		        /* Publish motor speed to "cmd_vel_motor" topic */
		        if ((t - tTime[CMD_VEL_PUBLISH_TIME_INDEX]) >= (1000 / CMD_VEL_PUBLISH_FREQUENCY))
 8006e40:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b63      	cmp	r3, #99	; 0x63
 8006e4a:	d907      	bls.n	8006e5c <_ZL9main_taskPv+0x8c>
		        {
		            getMotorSpeed(goal_velocity_from_motor);
 8006e4c:	482a      	ldr	r0, [pc, #168]	; (8006ef8 <_ZL9main_taskPv+0x128>)
 8006e4e:	f001 fa15 	bl	800827c <_Z13getMotorSpeedPf>
		            publishCmdVelFromMotorMsg();
 8006e52:	f000 f931 	bl	80070b8 <_Z25publishCmdVelFromMotorMsgv>
		            tTime[CMD_VEL_PUBLISH_TIME_INDEX] = t;
 8006e56:	4a25      	ldr	r2, [pc, #148]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	6053      	str	r3, [r2, #4]
		        }

		        /* Publish driver information */
		        if ((t - tTime[READ_ENCODER]) >= SAMPLE_TIME)
 8006e5c:	4b23      	ldr	r3, [pc, #140]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b63      	cmp	r3, #99	; 0x63
 8006e66:	d927      	bls.n	8006eb8 <_ZL9main_taskPv+0xe8>
		        {
		        	time_sample = t - tTime[READ_ENCODER];
 8006e68:	4b20      	ldr	r3, [pc, #128]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	4a22      	ldr	r2, [pc, #136]	; (8006efc <_ZL9main_taskPv+0x12c>)
 8006e72:	6013      	str	r3, [r2, #0]
		            /* Update motor tick */
		            int32_t left_tick, right_tick;
		            robot_encoder_left_get_tick(&left_tick);
 8006e74:	f107 0310 	add.w	r3, r7, #16
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fa f8d7 	bl	800102c <robot_encoder_left_get_tick>
		            robot_encoder_right_get_tick(&right_tick);
 8006e7e:	f107 030c 	add.w	r3, r7, #12
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fa f8e4 	bl	8001050 <robot_encoder_right_get_tick>
		            updateMotorInfo(left_tick, right_tick);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fabe 	bl	8007410 <_Z15updateMotorInfoll>

		            /* Publish Odom, TF and JointState, */
		            if ((t - tTime[DRIVE_INFORMATION_PUBLISH_TIME_INDEX]) >= (1000 / DRIVE_INFORMATION_PUBLISH_FREQUENCY))
 8006e94:	4b15      	ldr	r3, [pc, #84]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b63      	cmp	r3, #99	; 0x63
 8006e9e:	d908      	bls.n	8006eb2 <_ZL9main_taskPv+0xe2>
		            {
		            	publishDriveInformation(left_tick, right_tick);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fa2e 	bl	8007308 <_Z23publishDriveInformationll>
		            	tTime[DRIVE_INFORMATION_PUBLISH_TIME_INDEX] = t;
 8006eac:	4a0f      	ldr	r2, [pc, #60]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	6093      	str	r3, [r2, #8]
		            }

		            tTime[READ_ENCODER] = t;
 8006eb2:	4a0e      	ldr	r2, [pc, #56]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	6113      	str	r3, [r2, #16]

		        }

		        /* Publish IMU to "imu" topic */
		        if ((t - tTime[IMU_PUBLISH_TIME_INDEX]) >= (1000 / IMU_PUBLISH_FREQUENCY))
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b41      	cmp	r3, #65	; 0x41
 8006ec2:	d904      	bls.n	8006ece <_ZL9main_taskPv+0xfe>
		        {
		            publishImuMsg();
 8006ec4:	f000 f9f4 	bl	80072b0 <_Z13publishImuMsgv>
		            tTime[IMU_PUBLISH_TIME_INDEX] = t;
 8006ec8:	4a08      	ldr	r2, [pc, #32]	; (8006eec <_ZL9main_taskPv+0x11c>)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	60d3      	str	r3, [r2, #12]


		        }
		        sendLogMsg();                       /*!< Send log message */
 8006ece:	f000 ff99 	bl	8007e04 <_Z10sendLogMsgv>
		        nh.spinOnce();                      /*!< Spin NodeHandle to keep synchorus */
 8006ed2:	4805      	ldr	r0, [pc, #20]	; (8006ee8 <_ZL9main_taskPv+0x118>)
 8006ed4:	f001 fb5f 	bl	8008596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>
		        waitForSerialLink(nh.connected());
 8006ed8:	4803      	ldr	r0, [pc, #12]	; (8006ee8 <_ZL9main_taskPv+0x118>)
 8006eda:	f001 fb4d 	bl	8008578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9connectedEv>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 ffe5 	bl	8007eb0 <_Z17waitForSerialLinkb>
	}
 8006ee6:	e77f      	b.n	8006de8 <_ZL9main_taskPv+0x18>
 8006ee8:	200022c8 	.word	0x200022c8
 8006eec:	20004b70 	.word	0x20004b70
 8006ef0:	20004bb0 	.word	0x20004bb0
 8006ef4:	20004bb8 	.word	0x20004bb8
 8006ef8:	20004bc8 	.word	0x20004bc8
 8006efc:	20002260 	.word	0x20002260

08006f00 <main>:
}

int main(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af02      	add	r7, sp, #8
  xTaskCreate(main_task, "main_task", 2048, NULL, 1, NULL);
 8006f06:	2300      	movs	r3, #0
 8006f08:	9301      	str	r3, [sp, #4]
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f14:	4904      	ldr	r1, [pc, #16]	; (8006f28 <main+0x28>)
 8006f16:	4805      	ldr	r0, [pc, #20]	; (8006f2c <main+0x2c>)
 8006f18:	f00b f805 	bl	8011f26 <xTaskCreate>
  vTaskStartScheduler();
 8006f1c:	f00b f930 	bl	8012180 <vTaskStartScheduler>
}
 8006f20:	2300      	movs	r3, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	080150d0 	.word	0x080150d0
 8006f2c:	08006dd1 	.word	0x08006dd1

08006f30 <_Z9ros_setupv>:


/* USER CODE BEGIN 4 */
void ros_setup(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
    nh.initNode();                      /*!< Init ROS node handle */
 8006f34:	4816      	ldr	r0, [pc, #88]	; (8006f90 <_Z9ros_setupv+0x60>)
 8006f36:	f001 fd8c 	bl	8008a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8initNodeEv>

    nh.subscribe(cmd_vel_sub);          /*!< Subscribe "cmd_vel" topic to get motor cmd */
 8006f3a:	4916      	ldr	r1, [pc, #88]	; (8006f94 <_Z9ros_setupv+0x64>)
 8006f3c:	4814      	ldr	r0, [pc, #80]	; (8006f90 <_Z9ros_setupv+0x60>)
 8006f3e:	f001 fdad 	bl	8008a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(reset_sub);            /*!< Subscribe "reset" topic */
 8006f42:	4915      	ldr	r1, [pc, #84]	; (8006f98 <_Z9ros_setupv+0x68>)
 8006f44:	4812      	ldr	r0, [pc, #72]	; (8006f90 <_Z9ros_setupv+0x60>)
 8006f46:	f001 fdd6 	bl	8008af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_>

    nh.advertise(imu_pub);              /*!< Register the publisher to "imu" topic */
 8006f4a:	4914      	ldr	r1, [pc, #80]	; (8006f9c <_Z9ros_setupv+0x6c>)
 8006f4c:	4810      	ldr	r0, [pc, #64]	; (8006f90 <_Z9ros_setupv+0x60>)
 8006f4e:	f001 f9ee 	bl	800832e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
    nh.advertise(cmd_vel_motor_pub);    /*!< Register the publisher to "cmd_vel_motor" topic */
 8006f52:	4913      	ldr	r1, [pc, #76]	; (8006fa0 <_Z9ros_setupv+0x70>)
 8006f54:	480e      	ldr	r0, [pc, #56]	; (8006f90 <_Z9ros_setupv+0x60>)
 8006f56:	f001 f9ea 	bl	800832e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
    nh.advertise(odom_pub);             /*!< Register the publisher to "odom" topic */
 8006f5a:	4912      	ldr	r1, [pc, #72]	; (8006fa4 <_Z9ros_setupv+0x74>)
 8006f5c:	480c      	ldr	r0, [pc, #48]	; (8006f90 <_Z9ros_setupv+0x60>)
 8006f5e:	f001 f9e6 	bl	800832e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
    nh.advertise(joint_states_pub);     /*!< Register the publisher to "joint_states" topic */
 8006f62:	4911      	ldr	r1, [pc, #68]	; (8006fa8 <_Z9ros_setupv+0x78>)
 8006f64:	480a      	ldr	r0, [pc, #40]	; (8006f90 <_Z9ros_setupv+0x60>)
 8006f66:	f001 f9e2 	bl	800832e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>

    tf_broadcaster.init(nh);            /*!< Init TransformBroadcaster */
 8006f6a:	4909      	ldr	r1, [pc, #36]	; (8006f90 <_Z9ros_setupv+0x60>)
 8006f6c:	480f      	ldr	r0, [pc, #60]	; (8006fac <_Z9ros_setupv+0x7c>)
 8006f6e:	f7fe fda5 	bl	8005abc <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEE>
    initOdom();                         /*!< Init odometry value */
 8006f72:	f000 fd25 	bl	80079c0 <_Z8initOdomv>
    initJointStates();                  /*!< Init joint state */
 8006f76:	f000 fd8d 	bl	8007a94 <_Z15initJointStatesv>

    prev_update_time = millis();        /*!< Update time */
 8006f7a:	f7fa f87b 	bl	8001074 <millis>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <_Z9ros_setupv+0x80>)
 8006f82:	601a      	str	r2, [r3, #0]
    setup_end = true;                   /*!< Flag for setup completed */
 8006f84:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <_Z9ros_setupv+0x84>)
 8006f86:	2201      	movs	r2, #1
 8006f88:	701a      	strb	r2, [r3, #0]
}
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	200022c8 	.word	0x200022c8
 8006f94:	20004490 	.word	0x20004490
 8006f98:	200044f0 	.word	0x200044f0
 8006f9c:	20004660 	.word	0x20004660
 8006fa0:	200046c0 	.word	0x200046c0
 8006fa4:	200049e0 	.word	0x200049e0
 8006fa8:	20004a50 	.word	0x20004a50
 8006fac:	20004ad8 	.word	0x20004ad8
 8006fb0:	20004bd0 	.word	0x20004bd0
 8006fb4:	20004bec 	.word	0x20004bec

08006fb8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE>:

void commandVelocityCallback(const geometry_msgs::Twist& cmd_vel_msg)
{
 8006fb8:	b590      	push	{r4, r7, lr}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
    /* Get goal velocity */
    goal_velocity_from_cmd[LINEAR] = cmd_vel_msg.linear.x;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	4621      	mov	r1, r4
 8006fca:	f7f9 fded 	bl	8000ba8 <__aeabi_d2f>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	; (800703c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x84>)
 8006fd2:	601a      	str	r2, [r3, #0]
    goal_velocity_from_cmd[ANGULAR] = cmd_vel_msg.angular.z;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8006fda:	4618      	mov	r0, r3
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f7f9 fde3 	bl	8000ba8 <__aeabi_d2f>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4b15      	ldr	r3, [pc, #84]	; (800703c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x84>)
 8006fe6:	605a      	str	r2, [r3, #4]

    /* Constrain velocity */
    goal_velocity_from_cmd[LINEAR]  = constrain(goal_velocity_from_cmd[LINEAR],  MIN_LINEAR_VELOCITY, MAX_LINEAR_VELOCITY);
 8006fe8:	4b14      	ldr	r3, [pc, #80]	; (800703c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x84>)
 8006fea:	edd3 7a00 	vldr	s15, [r3]
 8006fee:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8007040 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x88>
 8006ff2:	eddf 0a14 	vldr	s1, [pc, #80]	; 8007044 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x8c>
 8006ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8006ffa:	f7fa f842 	bl	8001082 <constrain>
 8006ffe:	eef0 7a40 	vmov.f32	s15, s0
 8007002:	4b0e      	ldr	r3, [pc, #56]	; (800703c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x84>)
 8007004:	edc3 7a00 	vstr	s15, [r3]
    goal_velocity_from_cmd[ANGULAR] = constrain(goal_velocity_from_cmd[ANGULAR], MIN_ANGULAR_VELOCITY, MAX_ANGULAR_VELOCITY);
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x84>)
 800700a:	edd3 7a01 	vldr	s15, [r3, #4]
 800700e:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8007048 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x90>
 8007012:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800704c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x94>
 8007016:	eeb0 0a67 	vmov.f32	s0, s15
 800701a:	f7fa f832 	bl	8001082 <constrain>
 800701e:	eef0 7a40 	vmov.f32	s15, s0
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x84>)
 8007024:	edc3 7a01 	vstr	s15, [r3, #4]

    /* Update time */
    tTime[CONTROL_MOTOR_TIMEOUT_TIME_INDEX] = millis();
 8007028:	f7fa f824 	bl	8001074 <millis>
 800702c:	4602      	mov	r2, r0
 800702e:	4b08      	ldr	r3, [pc, #32]	; (8007050 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x98>)
 8007030:	619a      	str	r2, [r3, #24]
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	bd90      	pop	{r4, r7, pc}
 800703a:	bf00      	nop
 800703c:	20004bc0 	.word	0x20004bc0
 8007040:	3f5d2b0a 	.word	0x3f5d2b0a
 8007044:	bf5d2b0a 	.word	0xbf5d2b0a
 8007048:	412cc9a0 	.word	0x412cc9a0
 800704c:	c12cc9a0 	.word	0xc12cc9a0
 8007050:	20004b70 	.word	0x20004b70

08007054 <_Z13resetCallbackRKN8std_msgs5EmptyE>:

void resetCallback(const std_msgs::Empty &reset_msg)
{
 8007054:	b5b0      	push	{r4, r5, r7, lr}
 8007056:	b090      	sub	sp, #64	; 0x40
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
    char log_msg[50];

    (void)(reset_msg);

    sprintf(log_msg, "Start Calibration of Gyro");
 800705c:	f107 030c 	add.w	r3, r7, #12
 8007060:	4a12      	ldr	r2, [pc, #72]	; (80070ac <_Z13resetCallbackRKN8std_msgs5EmptyE+0x58>)
 8007062:	461c      	mov	r4, r3
 8007064:	4615      	mov	r5, r2
 8007066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800706a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800706e:	c403      	stmia	r4!, {r0, r1}
 8007070:	8022      	strh	r2, [r4, #0]
    nh.loginfo(log_msg);
 8007072:	f107 030c 	add.w	r3, r7, #12
 8007076:	4619      	mov	r1, r3
 8007078:	480d      	ldr	r0, [pc, #52]	; (80070b0 <_Z13resetCallbackRKN8std_msgs5EmptyE+0x5c>)
 800707a:	f001 fd69 	bl	8008b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>

    initOdom();
 800707e:	f000 fc9f 	bl	80079c0 <_Z8initOdomv>

    sprintf(log_msg, "Reset Odometry");
 8007082:	f107 030c 	add.w	r3, r7, #12
 8007086:	4a0b      	ldr	r2, [pc, #44]	; (80070b4 <_Z13resetCallbackRKN8std_msgs5EmptyE+0x60>)
 8007088:	461c      	mov	r4, r3
 800708a:	4613      	mov	r3, r2
 800708c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800708e:	c407      	stmia	r4!, {r0, r1, r2}
 8007090:	8023      	strh	r3, [r4, #0]
 8007092:	3402      	adds	r4, #2
 8007094:	0c1b      	lsrs	r3, r3, #16
 8007096:	7023      	strb	r3, [r4, #0]
    nh.loginfo(log_msg);
 8007098:	f107 030c 	add.w	r3, r7, #12
 800709c:	4619      	mov	r1, r3
 800709e:	4804      	ldr	r0, [pc, #16]	; (80070b0 <_Z13resetCallbackRKN8std_msgs5EmptyE+0x5c>)
 80070a0:	f001 fd56 	bl	8008b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>
}
 80070a4:	bf00      	nop
 80070a6:	3740      	adds	r7, #64	; 0x40
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bdb0      	pop	{r4, r5, r7, pc}
 80070ac:	080150dc 	.word	0x080150dc
 80070b0:	200022c8 	.word	0x200022c8
 80070b4:	080150f8 	.word	0x080150f8

080070b8 <_Z25publishCmdVelFromMotorMsgv>:

void publishCmdVelFromMotorMsg(void)
{
 80070b8:	b598      	push	{r3, r4, r7, lr}
 80070ba:	af00      	add	r7, sp, #0
    /* Get motor velocity */
    cmd_vel_motor_msg.linear.x = goal_velocity_from_motor[LINEAR];
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <_Z25publishCmdVelFromMotorMsgv+0x38>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7f9 fa41 	bl	8000548 <__aeabi_f2d>
 80070c6:	4603      	mov	r3, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	4a0a      	ldr	r2, [pc, #40]	; (80070f4 <_Z25publishCmdVelFromMotorMsgv+0x3c>)
 80070cc:	e9c2 3404 	strd	r3, r4, [r2, #16]
    cmd_vel_motor_msg.angular.z = goal_velocity_from_motor[ANGULAR];
 80070d0:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <_Z25publishCmdVelFromMotorMsgv+0x38>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7f9 fa37 	bl	8000548 <__aeabi_f2d>
 80070da:	4603      	mov	r3, r0
 80070dc:	460c      	mov	r4, r1
 80070de:	4a05      	ldr	r2, [pc, #20]	; (80070f4 <_Z25publishCmdVelFromMotorMsgv+0x3c>)
 80070e0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    /* Publish veloctiy to "cmd_vel_motor" topic */
    cmd_vel_motor_pub.publish(&cmd_vel_motor_msg);
 80070e4:	4903      	ldr	r1, [pc, #12]	; (80070f4 <_Z25publishCmdVelFromMotorMsgv+0x3c>)
 80070e6:	4804      	ldr	r0, [pc, #16]	; (80070f8 <_Z25publishCmdVelFromMotorMsgv+0x40>)
 80070e8:	f7fa ffa5 	bl	8002036 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80070ec:	bf00      	nop
 80070ee:	bd98      	pop	{r3, r4, r7, pc}
 80070f0:	20004bc8 	.word	0x20004bc8
 80070f4:	20004678 	.word	0x20004678
 80070f8:	200046c0 	.word	0x200046c0

080070fc <_ZN3ros3MsgaSEOS0_>:
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <_ZN8std_msgs6HeaderaSEOS0_>:
  class Header : public ros::Msg
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	4611      	mov	r1, r2
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff ffe9 	bl	80070fc <_ZN3ros3MsgaSEOS0_>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	3208      	adds	r2, #8
 800713a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800713e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691a      	ldr	r2, [r3, #16]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	611a      	str	r2, [r3, #16]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <_ZN13geometry_msgs10QuaternionaSEOS0_>:
  class Quaternion : public ros::Msg
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	4611      	mov	r1, r2
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff ffc9 	bl	80070fc <_ZN3ros3MsgaSEOS0_>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd90      	pop	{r4, r7, pc}

080071a4 <_ZN13geometry_msgs7Vector3aSEOS0_>:
  class Vector3 : public ros::Msg
 80071a4:	b590      	push	{r4, r7, lr}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	4611      	mov	r1, r2
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff ffa1 	bl	80070fc <_ZN3ros3MsgaSEOS0_>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd90      	pop	{r4, r7, pc}

080071e8 <_ZN11sensor_msgs3ImuaSEOS0_>:
  class Imu : public ros::Msg
 80071e8:	b5b0      	push	{r4, r5, r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	4611      	mov	r1, r2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff ff7f 	bl	80070fc <_ZN3ros3MsgaSEOS0_>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	1d1a      	adds	r2, r3, #4
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	3304      	adds	r3, #4
 8007206:	4619      	mov	r1, r3
 8007208:	4610      	mov	r0, r2
 800720a:	f7ff ff83 	bl	8007114 <_ZN8std_msgs6HeaderaSEOS0_>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f103 0218 	add.w	r2, r3, #24
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	3318      	adds	r3, #24
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f7ff ff9a 	bl	8007154 <_ZN13geometry_msgs10QuaternionaSEOS0_>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8007226:	2208      	movs	r2, #8
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	3340      	adds	r3, #64	; 0x40
 800722c:	2a00      	cmp	r2, #0
 800722e:	db07      	blt.n	8007240 <_ZN11sensor_msgs3ImuaSEOS0_+0x58>
 8007230:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007234:	e9c1 4500 	strd	r4, r5, [r1]
 8007238:	3108      	adds	r1, #8
 800723a:	3308      	adds	r3, #8
 800723c:	3a01      	subs	r2, #1
 800723e:	e7f5      	b.n	800722c <_ZN11sensor_msgs3ImuaSEOS0_+0x44>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	3388      	adds	r3, #136	; 0x88
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7ff ffa9 	bl	80071a4 <_ZN13geometry_msgs7Vector3aSEOS0_>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8007258:	2208      	movs	r2, #8
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	33a8      	adds	r3, #168	; 0xa8
 800725e:	2a00      	cmp	r2, #0
 8007260:	db07      	blt.n	8007272 <_ZN11sensor_msgs3ImuaSEOS0_+0x8a>
 8007262:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007266:	e9c1 4500 	strd	r4, r5, [r1]
 800726a:	3108      	adds	r1, #8
 800726c:	3308      	adds	r3, #8
 800726e:	3a01      	subs	r2, #1
 8007270:	e7f5      	b.n	800725e <_ZN11sensor_msgs3ImuaSEOS0_+0x76>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	33f0      	adds	r3, #240	; 0xf0
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f7ff ff90 	bl	80071a4 <_ZN13geometry_msgs7Vector3aSEOS0_>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f503 7188 	add.w	r1, r3, #272	; 0x110
 800728a:	2208      	movs	r2, #8
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8007292:	2a00      	cmp	r2, #0
 8007294:	db07      	blt.n	80072a6 <_ZN11sensor_msgs3ImuaSEOS0_+0xbe>
 8007296:	e9d3 4500 	ldrd	r4, r5, [r3]
 800729a:	e9c1 4500 	strd	r4, r5, [r1]
 800729e:	3108      	adds	r1, #8
 80072a0:	3308      	adds	r3, #8
 80072a2:	3a01      	subs	r2, #1
 80072a4:	e7f5      	b.n	8007292 <_ZN11sensor_msgs3ImuaSEOS0_+0xaa>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bdb0      	pop	{r4, r5, r7, pc}

080072b0 <_Z13publishImuMsgv>:

void publishImuMsg(void)
{
 80072b0:	b590      	push	{r4, r7, lr}
 80072b2:	b0d9      	sub	sp, #356	; 0x164
 80072b4:	af00      	add	r7, sp, #0
    /* Get IMU data (accelerometer, gyroscope, quaternion and variance ) */
    imu_msg = getIMU();
 80072b6:	f107 0308 	add.w	r3, r7, #8
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fe18 	bl	8007ef0 <_Z6getIMUv>
 80072c0:	f107 0308 	add.w	r3, r7, #8
 80072c4:	4619      	mov	r1, r3
 80072c6:	480d      	ldr	r0, [pc, #52]	; (80072fc <_Z13publishImuMsgv+0x4c>)
 80072c8:	f7ff ff8e 	bl	80071e8 <_ZN11sensor_msgs3ImuaSEOS0_>

    imu_msg.header.stamp = rosNow();
 80072cc:	4c0b      	ldr	r4, [pc, #44]	; (80072fc <_Z13publishImuMsgv+0x4c>)
 80072ce:	463b      	mov	r3, r7
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 f965 	bl	80075a0 <_Z6rosNowv>
 80072d6:	463a      	mov	r2, r7
 80072d8:	f104 030c 	add.w	r3, r4, #12
 80072dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072e0:	e883 0003 	stmia.w	r3, {r0, r1}
    imu_msg.header.frame_id = imu_frame_id;
 80072e4:	4b05      	ldr	r3, [pc, #20]	; (80072fc <_Z13publishImuMsgv+0x4c>)
 80072e6:	4a06      	ldr	r2, [pc, #24]	; (8007300 <_Z13publishImuMsgv+0x50>)
 80072e8:	615a      	str	r2, [r3, #20]

    /* Publish IMU messages */
    imu_pub.publish(&imu_msg);
 80072ea:	4904      	ldr	r1, [pc, #16]	; (80072fc <_Z13publishImuMsgv+0x4c>)
 80072ec:	4805      	ldr	r0, [pc, #20]	; (8007304 <_Z13publishImuMsgv+0x54>)
 80072ee:	f7fa fea2 	bl	8002036 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80072f2:	bf00      	nop
 80072f4:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd90      	pop	{r4, r7, pc}
 80072fc:	20004508 	.word	0x20004508
 8007300:	20004450 	.word	0x20004450
 8007304:	20004660 	.word	0x20004660

08007308 <_Z23publishDriveInformationll>:

void publishDriveInformation(int32_t left_tick, int32_t right_tick)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
    /* Update time */
    unsigned long time_now = millis();
 8007312:	f7f9 feaf 	bl	8001074 <millis>
 8007316:	6178      	str	r0, [r7, #20]
    unsigned long step_time = time_now - prev_update_time;
 8007318:	4b25      	ldr	r3, [pc, #148]	; (80073b0 <_Z23publishDriveInformationll+0xa8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	613b      	str	r3, [r7, #16]
    prev_update_time = time_now;
 8007322:	4a23      	ldr	r2, [pc, #140]	; (80073b0 <_Z23publishDriveInformationll+0xa8>)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	6013      	str	r3, [r2, #0]
    ros::Time stamp_now = rosNow();
 8007328:	f107 0308 	add.w	r3, r7, #8
 800732c:	4618      	mov	r0, r3
 800732e:	f000 f937 	bl	80075a0 <_Z6rosNowv>

    /* Calculate odometry */
    calcOdometry((float)(step_time * 0.001f),left_tick,right_tick);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	ee07 3a90 	vmov	s15, r3
 8007338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80073b4 <_Z23publishDriveInformationll+0xac>
 8007340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	eeb0 0a67 	vmov.f32	s0, s15
 800734c:	f000 fbc4 	bl	8007ad8 <_Z12calcOdometryfll>

    /* Publish odometry message */
    updateOdometry();
 8007350:	f000 f936 	bl	80075c0 <_Z14updateOdometryv>
    odom.header.stamp = stamp_now;
 8007354:	4b18      	ldr	r3, [pc, #96]	; (80073b8 <_Z23publishDriveInformationll+0xb0>)
 8007356:	330c      	adds	r3, #12
 8007358:	f107 0208 	add.w	r2, r7, #8
 800735c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007360:	e883 0003 	stmia.w	r3, {r0, r1}
    odom_pub.publish(&odom);
 8007364:	4914      	ldr	r1, [pc, #80]	; (80073b8 <_Z23publishDriveInformationll+0xb0>)
 8007366:	4815      	ldr	r0, [pc, #84]	; (80073bc <_Z23publishDriveInformationll+0xb4>)
 8007368:	f7fa fe65 	bl	8002036 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

    /* Publish TF message */
    updateTF(odom_tf);
 800736c:	4814      	ldr	r0, [pc, #80]	; (80073c0 <_Z23publishDriveInformationll+0xb8>)
 800736e:	f000 f9fd 	bl	800776c <_Z8updateTFRN13geometry_msgs16TransformStampedE>
    odom_tf.header.stamp = stamp_now;
 8007372:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <_Z23publishDriveInformationll+0xb8>)
 8007374:	330c      	adds	r3, #12
 8007376:	f107 0208 	add.w	r2, r7, #8
 800737a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800737e:	e883 0003 	stmia.w	r3, {r0, r1}
    tf_broadcaster.sendTransform(odom_tf);
 8007382:	490f      	ldr	r1, [pc, #60]	; (80073c0 <_Z23publishDriveInformationll+0xb8>)
 8007384:	480f      	ldr	r0, [pc, #60]	; (80073c4 <_Z23publishDriveInformationll+0xbc>)
 8007386:	f7fe fba8 	bl	8005ada <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>

    /* Publish jointStates message */
    updateJointStates();
 800738a:	f000 f973 	bl	8007674 <_Z17updateJointStatesv>
    joint_states.header.stamp = stamp_now;
 800738e:	4b0e      	ldr	r3, [pc, #56]	; (80073c8 <_Z23publishDriveInformationll+0xc0>)
 8007390:	330c      	adds	r3, #12
 8007392:	f107 0208 	add.w	r2, r7, #8
 8007396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800739a:	e883 0003 	stmia.w	r3, {r0, r1}
    joint_states_pub.publish(&joint_states);
 800739e:	490a      	ldr	r1, [pc, #40]	; (80073c8 <_Z23publishDriveInformationll+0xc0>)
 80073a0:	480a      	ldr	r0, [pc, #40]	; (80073cc <_Z23publishDriveInformationll+0xc4>)
 80073a2:	f7fa fe48 	bl	8002036 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80073a6:	bf00      	nop
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20004bd0 	.word	0x20004bd0
 80073b4:	3a83126f 	.word	0x3a83126f
 80073b8:	200046d8 	.word	0x200046d8
 80073bc:	200049e0 	.word	0x200049e0
 80073c0:	20004a68 	.word	0x20004a68
 80073c4:	20004ad8 	.word	0x20004ad8
 80073c8:	200049f8 	.word	0x200049f8
 80073cc:	20004a50 	.word	0x20004a50

080073d0 <_Z14updateVariableb>:

void updateVariable(bool isConnected)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	71fb      	strb	r3, [r7, #7]
    static bool variable_flag = false;

    if (isConnected)
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00c      	beq.n	80073fa <_Z14updateVariableb+0x2a>
    {
        if (variable_flag == false)
 80073e0:	4b09      	ldr	r3, [pc, #36]	; (8007408 <_Z14updateVariableb+0x38>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	f083 0301 	eor.w	r3, r3, #1
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <_Z14updateVariableb+0x30>
        {
            //initIMU();
            initOdom();
 80073ee:	f000 fae7 	bl	80079c0 <_Z8initOdomv>

            variable_flag = true;
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <_Z14updateVariableb+0x38>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        variable_flag = false;
    }
}
 80073f8:	e002      	b.n	8007400 <_Z14updateVariableb+0x30>
        variable_flag = false;
 80073fa:	4b03      	ldr	r3, [pc, #12]	; (8007408 <_Z14updateVariableb+0x38>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	701a      	strb	r2, [r3, #0]
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20004bed 	.word	0x20004bed
 800740c:	00000000 	.word	0x00000000

08007410 <_Z15updateMotorInfoll>:

void updateMotorInfo(int32_t left_tick, int32_t right_tick)
{
 8007410:	b5b0      	push	{r4, r5, r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
//    int32_t current_tick = 0;
//	__HAL_TIM_GET_COUNTER(&htim2) = 0;
//	__HAL_TIM_GET_COUNTER(&htim5) = 0;


	int32_t current_tick = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	60bb      	str	r3, [r7, #8]
	    static int32_t last_tick[WHEEL_NUM] = {0, 0};

	    if (init_encoder)
 800741e:	4b4c      	ldr	r3, [pc, #304]	; (8007550 <_Z15updateMotorInfoll+0x140>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d02a      	beq.n	800747c <_Z15updateMotorInfoll+0x6c>
	    {
	        for (int index = 0; index < WHEEL_NUM; index++)
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b01      	cmp	r3, #1
 800742e:	dc1b      	bgt.n	8007468 <_Z15updateMotorInfoll+0x58>
	        {
	            last_diff_tick[index] = 0;
 8007430:	4a48      	ldr	r2, [pc, #288]	; (8007554 <_Z15updateMotorInfoll+0x144>)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2100      	movs	r1, #0
 8007436:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	            last_tick[index]      = 0;
 800743a:	4a47      	ldr	r2, [pc, #284]	; (8007558 <_Z15updateMotorInfoll+0x148>)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2100      	movs	r1, #0
 8007440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	            last_rad[index]       = 0.0f;
 8007444:	4a45      	ldr	r2, [pc, #276]	; (800755c <_Z15updateMotorInfoll+0x14c>)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	601a      	str	r2, [r3, #0]

	            last_velocity[index]  = 0.0f;
 8007452:	4a43      	ldr	r2, [pc, #268]	; (8007560 <_Z15updateMotorInfoll+0x150>)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
	        for (int index = 0; index < WHEEL_NUM; index++)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	e7e0      	b.n	800742a <_Z15updateMotorInfoll+0x1a>
	        }

	        last_tick[LEFT] = left_tick;
 8007468:	4a3b      	ldr	r2, [pc, #236]	; (8007558 <_Z15updateMotorInfoll+0x148>)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6013      	str	r3, [r2, #0]
	        last_tick[RIGHT] = right_tick;
 800746e:	4a3a      	ldr	r2, [pc, #232]	; (8007558 <_Z15updateMotorInfoll+0x148>)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	6053      	str	r3, [r2, #4]

	        init_encoder = false;
 8007474:	4b36      	ldr	r3, [pc, #216]	; (8007550 <_Z15updateMotorInfoll+0x140>)
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]
	        return;
 800747a:	e05f      	b.n	800753c <_Z15updateMotorInfoll+0x12c>
	    }

	    current_tick = left_tick;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60bb      	str	r3, [r7, #8]

	    last_diff_tick[LEFT] = current_tick - last_tick[LEFT];
 8007480:	4b35      	ldr	r3, [pc, #212]	; (8007558 <_Z15updateMotorInfoll+0x148>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	4a32      	ldr	r2, [pc, #200]	; (8007554 <_Z15updateMotorInfoll+0x144>)
 800748a:	6013      	str	r3, [r2, #0]
	    last_tick[LEFT]      = current_tick;
 800748c:	4a32      	ldr	r2, [pc, #200]	; (8007558 <_Z15updateMotorInfoll+0x148>)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6013      	str	r3, [r2, #0]
	    last_rad[LEFT]       += TICK2RAD * (float)last_diff_tick[LEFT];
 8007492:	4b32      	ldr	r3, [pc, #200]	; (800755c <_Z15updateMotorInfoll+0x14c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f7f9 f856 	bl	8000548 <__aeabi_f2d>
 800749c:	4604      	mov	r4, r0
 800749e:	460d      	mov	r5, r1
 80074a0:	4b2c      	ldr	r3, [pc, #176]	; (8007554 <_Z15updateMotorInfoll+0x144>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ac:	ee17 0a90 	vmov	r0, s15
 80074b0:	f7f9 f84a 	bl	8000548 <__aeabi_f2d>
 80074b4:	a324      	add	r3, pc, #144	; (adr r3, 8007548 <_Z15updateMotorInfoll+0x138>)
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f7f9 f89d 	bl	80005f8 <__aeabi_dmul>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4620      	mov	r0, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	f7f8 fee1 	bl	800028c <__adddf3>
 80074ca:	4603      	mov	r3, r0
 80074cc:	460c      	mov	r4, r1
 80074ce:	4618      	mov	r0, r3
 80074d0:	4621      	mov	r1, r4
 80074d2:	f7f9 fb69 	bl	8000ba8 <__aeabi_d2f>
 80074d6:	4602      	mov	r2, r0
 80074d8:	4b20      	ldr	r3, [pc, #128]	; (800755c <_Z15updateMotorInfoll+0x14c>)
 80074da:	601a      	str	r2, [r3, #0]
	    //last_rad[LEFT] = (float)left_tick;;

	    current_tick = right_tick;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	60bb      	str	r3, [r7, #8]

	    last_diff_tick[RIGHT] = current_tick - last_tick[RIGHT];
 80074e0:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <_Z15updateMotorInfoll+0x148>)
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <_Z15updateMotorInfoll+0x144>)
 80074ea:	6053      	str	r3, [r2, #4]
	    last_tick[RIGHT]      = current_tick;
 80074ec:	4a1a      	ldr	r2, [pc, #104]	; (8007558 <_Z15updateMotorInfoll+0x148>)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6053      	str	r3, [r2, #4]
	    last_rad[RIGHT]       += TICK2RAD * (float)last_diff_tick[RIGHT];
 80074f2:	4b1a      	ldr	r3, [pc, #104]	; (800755c <_Z15updateMotorInfoll+0x14c>)
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7f9 f826 	bl	8000548 <__aeabi_f2d>
 80074fc:	4604      	mov	r4, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	4b14      	ldr	r3, [pc, #80]	; (8007554 <_Z15updateMotorInfoll+0x144>)
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	ee07 3a90 	vmov	s15, r3
 8007508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800750c:	ee17 0a90 	vmov	r0, s15
 8007510:	f7f9 f81a 	bl	8000548 <__aeabi_f2d>
 8007514:	a30c      	add	r3, pc, #48	; (adr r3, 8007548 <_Z15updateMotorInfoll+0x138>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f7f9 f86d 	bl	80005f8 <__aeabi_dmul>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	f7f8 feb1 	bl	800028c <__adddf3>
 800752a:	4603      	mov	r3, r0
 800752c:	460c      	mov	r4, r1
 800752e:	4618      	mov	r0, r3
 8007530:	4621      	mov	r1, r4
 8007532:	f7f9 fb39 	bl	8000ba8 <__aeabi_d2f>
 8007536:	4602      	mov	r2, r0
 8007538:	4b08      	ldr	r3, [pc, #32]	; (800755c <_Z15updateMotorInfoll+0x14c>)
 800753a:	605a      	str	r2, [r3, #4]
	    //last_rad[RIGHT] = (float)right_tick;



}
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bdb0      	pop	{r4, r5, r7, pc}
 8007542:	bf00      	nop
 8007544:	f3af 8000 	nop.w
 8007548:	c85a214a 	.word	0xc85a214a
 800754c:	3f737f35 	.word	0x3f737f35
 8007550:	20000004 	.word	0x20000004
 8007554:	20004b98 	.word	0x20004b98
 8007558:	20004bf0 	.word	0x20004bf0
 800755c:	20004ba0 	.word	0x20004ba0
 8007560:	20004ba8 	.word	0x20004ba8

08007564 <_Z10updateTimev>:

void updateTime(void)
{
 8007564:	b590      	push	{r4, r7, lr}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
    current_offset = millis();
 800756a:	f7f9 fd83 	bl	8001074 <millis>
 800756e:	4602      	mov	r2, r0
 8007570:	4b08      	ldr	r3, [pc, #32]	; (8007594 <_Z10updateTimev+0x30>)
 8007572:	601a      	str	r2, [r3, #0]
    current_time = nh.now();
 8007574:	4c08      	ldr	r4, [pc, #32]	; (8007598 <_Z10updateTimev+0x34>)
 8007576:	463b      	mov	r3, r7
 8007578:	4908      	ldr	r1, [pc, #32]	; (800759c <_Z10updateTimev+0x38>)
 800757a:	4618      	mov	r0, r3
 800757c:	f001 faf6 	bl	8008b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3nowEv>
 8007580:	4622      	mov	r2, r4
 8007582:	463b      	mov	r3, r7
 8007584:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007588:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	bd90      	pop	{r4, r7, pc}
 8007594:	20004400 	.word	0x20004400
 8007598:	200043f8 	.word	0x200043f8
 800759c:	200022c8 	.word	0x200022c8

080075a0 <_Z6rosNowv>:

ros::Time rosNow(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
    return nh.now();
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4904      	ldr	r1, [pc, #16]	; (80075bc <_Z6rosNowv+0x1c>)
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fadd 	bl	8008b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3nowEv>
}
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	200022c8 	.word	0x200022c8

080075c0 <_Z14updateOdometryv>:

    return ros::Time(sec, nsec);
}

void updateOdometry(void)
{
 80075c0:	b590      	push	{r4, r7, lr}
 80075c2:	b08b      	sub	sp, #44	; 0x2c
 80075c4:	af00      	add	r7, sp, #0
    odom.header.frame_id = odom_header_frame_id;
 80075c6:	4b25      	ldr	r3, [pc, #148]	; (800765c <_Z14updateOdometryv+0x9c>)
 80075c8:	4a25      	ldr	r2, [pc, #148]	; (8007660 <_Z14updateOdometryv+0xa0>)
 80075ca:	615a      	str	r2, [r3, #20]
    odom.child_frame_id  = odom_child_frame_id;
 80075cc:	4b23      	ldr	r3, [pc, #140]	; (800765c <_Z14updateOdometryv+0x9c>)
 80075ce:	4a25      	ldr	r2, [pc, #148]	; (8007664 <_Z14updateOdometryv+0xa4>)
 80075d0:	619a      	str	r2, [r3, #24]

    odom.pose.pose.position.x = odom_pose[0];
 80075d2:	4b25      	ldr	r3, [pc, #148]	; (8007668 <_Z14updateOdometryv+0xa8>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7f8 ffb6 	bl	8000548 <__aeabi_f2d>
 80075dc:	4603      	mov	r3, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	4a1e      	ldr	r2, [pc, #120]	; (800765c <_Z14updateOdometryv+0x9c>)
 80075e2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    odom.pose.pose.position.y = odom_pose[1];
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <_Z14updateOdometryv+0xa8>)
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7f8 ffac 	bl	8000548 <__aeabi_f2d>
 80075f0:	4603      	mov	r3, r0
 80075f2:	460c      	mov	r4, r1
 80075f4:	4a19      	ldr	r2, [pc, #100]	; (800765c <_Z14updateOdometryv+0x9c>)
 80075f6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    odom.pose.pose.position.z = 0;
 80075fa:	4a18      	ldr	r2, [pc, #96]	; (800765c <_Z14updateOdometryv+0x9c>)
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	f04f 0400 	mov.w	r4, #0
 8007604:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    odom.pose.pose.orientation = tf::createQuaternionFromYaw(odom_pose[2]);
 8007608:	4b17      	ldr	r3, [pc, #92]	; (8007668 <_Z14updateOdometryv+0xa8>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4618      	mov	r0, r3
 800760e:	f7f8 ff9b 	bl	8000548 <__aeabi_f2d>
 8007612:	4603      	mov	r3, r0
 8007614:	460c      	mov	r4, r1
 8007616:	4639      	mov	r1, r7
 8007618:	461a      	mov	r2, r3
 800761a:	4623      	mov	r3, r4
 800761c:	4608      	mov	r0, r1
 800761e:	f7fe f8e7 	bl	80057f0 <_ZN2tfL23createQuaternionFromYawEd>
 8007622:	463b      	mov	r3, r7
 8007624:	4619      	mov	r1, r3
 8007626:	4811      	ldr	r0, [pc, #68]	; (800766c <_Z14updateOdometryv+0xac>)
 8007628:	f7ff fd94 	bl	8007154 <_ZN13geometry_msgs10QuaternionaSEOS0_>

    odom.twist.twist.linear.x  = odom_vel[0];
 800762c:	4b10      	ldr	r3, [pc, #64]	; (8007670 <_Z14updateOdometryv+0xb0>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4618      	mov	r0, r3
 8007632:	f7f8 ff89 	bl	8000548 <__aeabi_f2d>
 8007636:	4603      	mov	r3, r0
 8007638:	460c      	mov	r4, r1
 800763a:	4a08      	ldr	r2, [pc, #32]	; (800765c <_Z14updateOdometryv+0x9c>)
 800763c:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
    odom.twist.twist.angular.z = odom_vel[2];
 8007640:	4b0b      	ldr	r3, [pc, #44]	; (8007670 <_Z14updateOdometryv+0xb0>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4618      	mov	r0, r3
 8007646:	f7f8 ff7f 	bl	8000548 <__aeabi_f2d>
 800764a:	4603      	mov	r3, r0
 800764c:	460c      	mov	r4, r1
 800764e:	4a03      	ldr	r2, [pc, #12]	; (800765c <_Z14updateOdometryv+0x9c>)
 8007650:	e9c2 3478 	strd	r3, r4, [r2, #480]	; 0x1e0
}
 8007654:	bf00      	nop
 8007656:	372c      	adds	r7, #44	; 0x2c
 8007658:	46bd      	mov	sp, r7
 800765a:	bd90      	pop	{r4, r7, pc}
 800765c:	200046d8 	.word	0x200046d8
 8007660:	20004410 	.word	0x20004410
 8007664:	20004430 	.word	0x20004430
 8007668:	20004bd4 	.word	0x20004bd4
 800766c:	20004728 	.word	0x20004728
 8007670:	20004be0 	.word	0x20004be0

08007674 <_Z17updateJointStatesv>:

void updateJointStates(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
    static float joint_states_pos[WHEEL_NUM] = {0.0, 0.0};
    static float joint_states_vel[WHEEL_NUM] = {0.0, 0.0};
    //static float joint_states_eff[WHEEL_NUM] = {0.0, 0.0};

    joint_states_pos[LEFT]  = last_rad[LEFT];
 8007678:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <_Z17updateJointStatesv+0x3c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a0d      	ldr	r2, [pc, #52]	; (80076b4 <_Z17updateJointStatesv+0x40>)
 800767e:	6013      	str	r3, [r2, #0]
    joint_states_pos[RIGHT] = last_rad[RIGHT];
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <_Z17updateJointStatesv+0x3c>)
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	4a0b      	ldr	r2, [pc, #44]	; (80076b4 <_Z17updateJointStatesv+0x40>)
 8007686:	6053      	str	r3, [r2, #4]

    joint_states_vel[LEFT]  = last_velocity[LEFT];
 8007688:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <_Z17updateJointStatesv+0x44>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a0b      	ldr	r2, [pc, #44]	; (80076bc <_Z17updateJointStatesv+0x48>)
 800768e:	6013      	str	r3, [r2, #0]
    joint_states_vel[RIGHT] = last_velocity[RIGHT];
 8007690:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <_Z17updateJointStatesv+0x44>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	4a09      	ldr	r2, [pc, #36]	; (80076bc <_Z17updateJointStatesv+0x48>)
 8007696:	6053      	str	r3, [r2, #4]

    joint_states.position = (double *)joint_states_pos;
 8007698:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <_Z17updateJointStatesv+0x4c>)
 800769a:	4a06      	ldr	r2, [pc, #24]	; (80076b4 <_Z17updateJointStatesv+0x40>)
 800769c:	631a      	str	r2, [r3, #48]	; 0x30
    joint_states.velocity = (double *)joint_states_vel;
 800769e:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <_Z17updateJointStatesv+0x4c>)
 80076a0:	4a06      	ldr	r2, [pc, #24]	; (80076bc <_Z17updateJointStatesv+0x48>)
 80076a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80076a4:	bf00      	nop
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	20004ba0 	.word	0x20004ba0
 80076b4:	20004bf8 	.word	0x20004bf8
 80076b8:	20004ba8 	.word	0x20004ba8
 80076bc:	20004c00 	.word	0x20004c00
 80076c0:	200049f8 	.word	0x200049f8

080076c4 <_ZN3ros3MsgaSERKS0_>:
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <_ZN8std_msgs6HeaderaSERKS0_>:
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	4611      	mov	r1, r2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff ffe9 	bl	80076c4 <_ZN3ros3MsgaSERKS0_>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	605a      	str	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	3208      	adds	r2, #8
 8007702:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007706:	e883 0003 	stmia.w	r3, {r0, r1}
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	691a      	ldr	r2, [r3, #16]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	611a      	str	r2, [r3, #16]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <_ZN13geometry_msgs10QuaternionaSERKS0_>:
 800771c:	b590      	push	{r4, r7, lr}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	4611      	mov	r1, r2
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff ffc9 	bl	80076c4 <_ZN3ros3MsgaSERKS0_>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	e9c2 3402 	strd	r3, r4, [r2, #8]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bd90      	pop	{r4, r7, pc}

0800776c <_Z8updateTFRN13geometry_msgs16TransformStampedE>:
{

}

void updateTF(geometry_msgs::TransformStamped& odom_tf)
{
 800776c:	b590      	push	{r4, r7, lr}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
    odom_tf.header = odom.header;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3304      	adds	r3, #4
 8007778:	4911      	ldr	r1, [pc, #68]	; (80077c0 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x54>)
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff ffae 	bl	80076dc <_ZN8std_msgs6HeaderaSERKS0_>
    odom_tf.child_frame_id = odom.child_frame_id;
 8007780:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x58>)
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	619a      	str	r2, [r3, #24]
    odom_tf.transform.translation.x = odom.pose.pose.position.x;
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x58>)
 800778a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    odom_tf.transform.translation.y = odom.pose.pose.position.y;
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x58>)
 8007796:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    odom_tf.transform.translation.z = odom.pose.pose.position.z;
 80077a0:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x58>)
 80077a2:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    odom_tf.transform.rotation      = odom.pose.pose.orientation;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3348      	adds	r3, #72	; 0x48
 80077b0:	4905      	ldr	r1, [pc, #20]	; (80077c8 <_Z8updateTFRN13geometry_msgs16TransformStampedE+0x5c>)
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff ffb2 	bl	800771c <_ZN13geometry_msgs10QuaternionaSERKS0_>
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}
 80077c0:	200046dc 	.word	0x200046dc
 80077c4:	200046d8 	.word	0x200046d8
 80077c8:	20004728 	.word	0x20004728

080077cc <_Z18updateGoalVelocityv>:
        isEnded = false;
    }
}

void updateGoalVelocity(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
    goal_velocity[LINEAR]  = goal_velocity_from_cmd[LINEAR];
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <_Z18updateGoalVelocityv+0x20>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a06      	ldr	r2, [pc, #24]	; (80077f0 <_Z18updateGoalVelocityv+0x24>)
 80077d6:	6013      	str	r3, [r2, #0]
    goal_velocity[ANGULAR] = goal_velocity_from_cmd[ANGULAR];
 80077d8:	4b04      	ldr	r3, [pc, #16]	; (80077ec <_Z18updateGoalVelocityv+0x20>)
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	4a04      	ldr	r2, [pc, #16]	; (80077f0 <_Z18updateGoalVelocityv+0x24>)
 80077de:	6053      	str	r3, [r2, #4]
}
 80077e0:	bf00      	nop
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	20004bc0 	.word	0x20004bc0
 80077f0:	20004bb8 	.word	0x20004bb8

080077f4 <_Z14updateTFPrefixb>:

void updateTFPrefix(bool isConnected)
{
 80077f4:	b5b0      	push	{r4, r5, r7, lr}
 80077f6:	b092      	sub	sp, #72	; 0x48
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	4603      	mov	r3, r0
 80077fc:	71fb      	strb	r3, [r7, #7]
    static bool isChecked = false;
    char log_msg[50];

    if (isConnected)
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80af 	beq.w	8007964 <_Z14updateTFPrefixb+0x170>
    {
        if (isChecked == false)
 8007806:	4b5b      	ldr	r3, [pc, #364]	; (8007974 <_Z14updateTFPrefixb+0x180>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f083 0301 	eor.w	r3, r3, #1
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 80aa 	beq.w	800796a <_Z14updateTFPrefixb+0x176>
        {
            nh.getParam("~tf_prefix", &get_tf_prefix);
 8007816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	2301      	movs	r3, #1
 800781e:	4a56      	ldr	r2, [pc, #344]	; (8007978 <_Z14updateTFPrefixb+0x184>)
 8007820:	4956      	ldr	r1, [pc, #344]	; (800797c <_Z14updateTFPrefixb+0x188>)
 8007822:	4857      	ldr	r0, [pc, #348]	; (8007980 <_Z14updateTFPrefixb+0x18c>)
 8007824:	f001 f9dc 	bl	8008be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8getParamEPKcPPcii>

            if (!strcmp(get_tf_prefix, ""))
 8007828:	4b53      	ldr	r3, [pc, #332]	; (8007978 <_Z14updateTFPrefixb+0x184>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d11a      	bne.n	8007868 <_Z14updateTFPrefixb+0x74>
            {
                sprintf(odom_header_frame_id, "odom");
 8007832:	4b54      	ldr	r3, [pc, #336]	; (8007984 <_Z14updateTFPrefixb+0x190>)
 8007834:	4a54      	ldr	r2, [pc, #336]	; (8007988 <_Z14updateTFPrefixb+0x194>)
 8007836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800783a:	6018      	str	r0, [r3, #0]
 800783c:	3304      	adds	r3, #4
 800783e:	7019      	strb	r1, [r3, #0]
                sprintf(odom_child_frame_id, "base_footprint");
 8007840:	4a52      	ldr	r2, [pc, #328]	; (800798c <_Z14updateTFPrefixb+0x198>)
 8007842:	4b53      	ldr	r3, [pc, #332]	; (8007990 <_Z14updateTFPrefixb+0x19c>)
 8007844:	4614      	mov	r4, r2
 8007846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007848:	c407      	stmia	r4!, {r0, r1, r2}
 800784a:	8023      	strh	r3, [r4, #0]
 800784c:	3402      	adds	r4, #2
 800784e:	0c1b      	lsrs	r3, r3, #16
 8007850:	7023      	strb	r3, [r4, #0]

                sprintf(imu_frame_id, "imu_link");
 8007852:	4b50      	ldr	r3, [pc, #320]	; (8007994 <_Z14updateTFPrefixb+0x1a0>)
 8007854:	4a50      	ldr	r2, [pc, #320]	; (8007998 <_Z14updateTFPrefixb+0x1a4>)
 8007856:	ca07      	ldmia	r2, {r0, r1, r2}
 8007858:	c303      	stmia	r3!, {r0, r1}
 800785a:	701a      	strb	r2, [r3, #0]
                sprintf(joint_state_header_frame_id, "base_link");
 800785c:	4b4f      	ldr	r3, [pc, #316]	; (800799c <_Z14updateTFPrefixb+0x1a8>)
 800785e:	4a50      	ldr	r2, [pc, #320]	; (80079a0 <_Z14updateTFPrefixb+0x1ac>)
 8007860:	ca07      	ldmia	r2, {r0, r1, r2}
 8007862:	c303      	stmia	r3!, {r0, r1}
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	e052      	b.n	800790e <_Z14updateTFPrefixb+0x11a>
            }
            else
            {
                strcpy(odom_header_frame_id, get_tf_prefix);
 8007868:	4b43      	ldr	r3, [pc, #268]	; (8007978 <_Z14updateTFPrefixb+0x184>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4619      	mov	r1, r3
 800786e:	4845      	ldr	r0, [pc, #276]	; (8007984 <_Z14updateTFPrefixb+0x190>)
 8007870:	f00c fe80 	bl	8014574 <strcpy>
                strcpy(odom_child_frame_id, get_tf_prefix);
 8007874:	4b40      	ldr	r3, [pc, #256]	; (8007978 <_Z14updateTFPrefixb+0x184>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4619      	mov	r1, r3
 800787a:	4844      	ldr	r0, [pc, #272]	; (800798c <_Z14updateTFPrefixb+0x198>)
 800787c:	f00c fe7a 	bl	8014574 <strcpy>

                strcpy(imu_frame_id, get_tf_prefix);
 8007880:	4b3d      	ldr	r3, [pc, #244]	; (8007978 <_Z14updateTFPrefixb+0x184>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4619      	mov	r1, r3
 8007886:	4843      	ldr	r0, [pc, #268]	; (8007994 <_Z14updateTFPrefixb+0x1a0>)
 8007888:	f00c fe74 	bl	8014574 <strcpy>
                strcpy(joint_state_header_frame_id, get_tf_prefix);
 800788c:	4b3a      	ldr	r3, [pc, #232]	; (8007978 <_Z14updateTFPrefixb+0x184>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4619      	mov	r1, r3
 8007892:	4842      	ldr	r0, [pc, #264]	; (800799c <_Z14updateTFPrefixb+0x1a8>)
 8007894:	f00c fe6e 	bl	8014574 <strcpy>

                strcat(odom_header_frame_id, "/odom");
 8007898:	483a      	ldr	r0, [pc, #232]	; (8007984 <_Z14updateTFPrefixb+0x190>)
 800789a:	f7f8 fc99 	bl	80001d0 <strlen>
 800789e:	4603      	mov	r3, r0
 80078a0:	461a      	mov	r2, r3
 80078a2:	4b38      	ldr	r3, [pc, #224]	; (8007984 <_Z14updateTFPrefixb+0x190>)
 80078a4:	4413      	add	r3, r2
 80078a6:	4a3f      	ldr	r2, [pc, #252]	; (80079a4 <_Z14updateTFPrefixb+0x1b0>)
 80078a8:	6810      	ldr	r0, [r2, #0]
 80078aa:	6018      	str	r0, [r3, #0]
 80078ac:	8892      	ldrh	r2, [r2, #4]
 80078ae:	809a      	strh	r2, [r3, #4]
                strcat(odom_child_frame_id, "/base_footprint");
 80078b0:	4836      	ldr	r0, [pc, #216]	; (800798c <_Z14updateTFPrefixb+0x198>)
 80078b2:	f7f8 fc8d 	bl	80001d0 <strlen>
 80078b6:	4603      	mov	r3, r0
 80078b8:	461a      	mov	r2, r3
 80078ba:	4b34      	ldr	r3, [pc, #208]	; (800798c <_Z14updateTFPrefixb+0x198>)
 80078bc:	4413      	add	r3, r2
 80078be:	4a3a      	ldr	r2, [pc, #232]	; (80079a8 <_Z14updateTFPrefixb+0x1b4>)
 80078c0:	461c      	mov	r4, r3
 80078c2:	4615      	mov	r5, r2
 80078c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078c6:	6020      	str	r0, [r4, #0]
 80078c8:	6061      	str	r1, [r4, #4]
 80078ca:	60a2      	str	r2, [r4, #8]
 80078cc:	60e3      	str	r3, [r4, #12]

                strcat(imu_frame_id, "/imu_link");
 80078ce:	4831      	ldr	r0, [pc, #196]	; (8007994 <_Z14updateTFPrefixb+0x1a0>)
 80078d0:	f7f8 fc7e 	bl	80001d0 <strlen>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	4b2e      	ldr	r3, [pc, #184]	; (8007994 <_Z14updateTFPrefixb+0x1a0>)
 80078da:	4413      	add	r3, r2
 80078dc:	4933      	ldr	r1, [pc, #204]	; (80079ac <_Z14updateTFPrefixb+0x1b8>)
 80078de:	461a      	mov	r2, r3
 80078e0:	460b      	mov	r3, r1
 80078e2:	cb03      	ldmia	r3!, {r0, r1}
 80078e4:	6010      	str	r0, [r2, #0]
 80078e6:	6051      	str	r1, [r2, #4]
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	8113      	strh	r3, [r2, #8]
                strcat(joint_state_header_frame_id, "/base_link");
 80078ec:	482b      	ldr	r0, [pc, #172]	; (800799c <_Z14updateTFPrefixb+0x1a8>)
 80078ee:	f7f8 fc6f 	bl	80001d0 <strlen>
 80078f2:	4603      	mov	r3, r0
 80078f4:	461a      	mov	r2, r3
 80078f6:	4b29      	ldr	r3, [pc, #164]	; (800799c <_Z14updateTFPrefixb+0x1a8>)
 80078f8:	4413      	add	r3, r2
 80078fa:	492d      	ldr	r1, [pc, #180]	; (80079b0 <_Z14updateTFPrefixb+0x1bc>)
 80078fc:	461a      	mov	r2, r3
 80078fe:	460b      	mov	r3, r1
 8007900:	cb03      	ldmia	r3!, {r0, r1}
 8007902:	6010      	str	r0, [r2, #0]
 8007904:	6051      	str	r1, [r2, #4]
 8007906:	8819      	ldrh	r1, [r3, #0]
 8007908:	789b      	ldrb	r3, [r3, #2]
 800790a:	8111      	strh	r1, [r2, #8]
 800790c:	7293      	strb	r3, [r2, #10]
            }

            sprintf(log_msg, "Setup TF on Odometry [%s]", odom_header_frame_id);
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	4a1c      	ldr	r2, [pc, #112]	; (8007984 <_Z14updateTFPrefixb+0x190>)
 8007914:	4927      	ldr	r1, [pc, #156]	; (80079b4 <_Z14updateTFPrefixb+0x1c0>)
 8007916:	4618      	mov	r0, r3
 8007918:	f00c fe0c 	bl	8014534 <siprintf>
            nh.loginfo(log_msg);
 800791c:	f107 030c 	add.w	r3, r7, #12
 8007920:	4619      	mov	r1, r3
 8007922:	4817      	ldr	r0, [pc, #92]	; (8007980 <_Z14updateTFPrefixb+0x18c>)
 8007924:	f001 f914 	bl	8008b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>

            sprintf(log_msg, "Setup TF on IMU [%s]", imu_frame_id);
 8007928:	f107 030c 	add.w	r3, r7, #12
 800792c:	4a19      	ldr	r2, [pc, #100]	; (8007994 <_Z14updateTFPrefixb+0x1a0>)
 800792e:	4922      	ldr	r1, [pc, #136]	; (80079b8 <_Z14updateTFPrefixb+0x1c4>)
 8007930:	4618      	mov	r0, r3
 8007932:	f00c fdff 	bl	8014534 <siprintf>
            nh.loginfo(log_msg);
 8007936:	f107 030c 	add.w	r3, r7, #12
 800793a:	4619      	mov	r1, r3
 800793c:	4810      	ldr	r0, [pc, #64]	; (8007980 <_Z14updateTFPrefixb+0x18c>)
 800793e:	f001 f907 	bl	8008b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>

            sprintf(log_msg, "Setup TF on JointState [%s]", joint_state_header_frame_id);
 8007942:	f107 030c 	add.w	r3, r7, #12
 8007946:	4a15      	ldr	r2, [pc, #84]	; (800799c <_Z14updateTFPrefixb+0x1a8>)
 8007948:	491c      	ldr	r1, [pc, #112]	; (80079bc <_Z14updateTFPrefixb+0x1c8>)
 800794a:	4618      	mov	r0, r3
 800794c:	f00c fdf2 	bl	8014534 <siprintf>
            nh.loginfo(log_msg);
 8007950:	f107 030c 	add.w	r3, r7, #12
 8007954:	4619      	mov	r1, r3
 8007956:	480a      	ldr	r0, [pc, #40]	; (8007980 <_Z14updateTFPrefixb+0x18c>)
 8007958:	f001 f8fa 	bl	8008b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>

            isChecked = true;
 800795c:	4b05      	ldr	r3, [pc, #20]	; (8007974 <_Z14updateTFPrefixb+0x180>)
 800795e:	2201      	movs	r2, #1
 8007960:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        isChecked = false;
    }
}
 8007962:	e002      	b.n	800796a <_Z14updateTFPrefixb+0x176>
        isChecked = false;
 8007964:	4b03      	ldr	r3, [pc, #12]	; (8007974 <_Z14updateTFPrefixb+0x180>)
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
}
 800796a:	bf00      	nop
 800796c:	3740      	adds	r7, #64	; 0x40
 800796e:	46bd      	mov	sp, r7
 8007970:	bdb0      	pop	{r4, r5, r7, pc}
 8007972:	bf00      	nop
 8007974:	20004c08 	.word	0x20004c08
 8007978:	20000000 	.word	0x20000000
 800797c:	08015118 	.word	0x08015118
 8007980:	200022c8 	.word	0x200022c8
 8007984:	20004410 	.word	0x20004410
 8007988:	08015124 	.word	0x08015124
 800798c:	20004430 	.word	0x20004430
 8007990:	0801512c 	.word	0x0801512c
 8007994:	20004450 	.word	0x20004450
 8007998:	0801513c 	.word	0x0801513c
 800799c:	20004470 	.word	0x20004470
 80079a0:	08015148 	.word	0x08015148
 80079a4:	08015154 	.word	0x08015154
 80079a8:	0801515c 	.word	0x0801515c
 80079ac:	0801516c 	.word	0x0801516c
 80079b0:	08015178 	.word	0x08015178
 80079b4:	08015184 	.word	0x08015184
 80079b8:	080151a0 	.word	0x080151a0
 80079bc:	080151b8 	.word	0x080151b8

080079c0 <_Z8initOdomv>:

void initOdom(void)
{
 80079c0:	b490      	push	{r4, r7}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
    init_encoder = true;
 80079c6:	4b2f      	ldr	r3, [pc, #188]	; (8007a84 <_Z8initOdomv+0xc4>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	701a      	strb	r2, [r3, #0]

    for (int index = 0; index < 3; index++)
 80079cc:	2300      	movs	r3, #0
 80079ce:	607b      	str	r3, [r7, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	dc11      	bgt.n	80079fa <_Z8initOdomv+0x3a>
    {
        odom_pose[index] = 0.0;
 80079d6:	4a2c      	ldr	r2, [pc, #176]	; (8007a88 <_Z8initOdomv+0xc8>)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
        odom_vel[index]  = 0.0;
 80079e4:	4a29      	ldr	r2, [pc, #164]	; (8007a8c <_Z8initOdomv+0xcc>)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
    for (int index = 0; index < 3; index++)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3301      	adds	r3, #1
 80079f6:	607b      	str	r3, [r7, #4]
 80079f8:	e7ea      	b.n	80079d0 <_Z8initOdomv+0x10>
    }

    odom.pose.pose.position.x = 0.0;
 80079fa:	4a25      	ldr	r2, [pc, #148]	; (8007a90 <_Z8initOdomv+0xd0>)
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	f04f 0400 	mov.w	r4, #0
 8007a04:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    odom.pose.pose.position.y = 0.0;
 8007a08:	4a21      	ldr	r2, [pc, #132]	; (8007a90 <_Z8initOdomv+0xd0>)
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	f04f 0400 	mov.w	r4, #0
 8007a12:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    odom.pose.pose.position.z = 0.0;
 8007a16:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <_Z8initOdomv+0xd0>)
 8007a18:	f04f 0300 	mov.w	r3, #0
 8007a1c:	f04f 0400 	mov.w	r4, #0
 8007a20:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

    odom.pose.pose.orientation.x = 0.0;
 8007a24:	4a1a      	ldr	r2, [pc, #104]	; (8007a90 <_Z8initOdomv+0xd0>)
 8007a26:	f04f 0300 	mov.w	r3, #0
 8007a2a:	f04f 0400 	mov.w	r4, #0
 8007a2e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
    odom.pose.pose.orientation.y = 0.0;
 8007a32:	4a17      	ldr	r2, [pc, #92]	; (8007a90 <_Z8initOdomv+0xd0>)
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	f04f 0400 	mov.w	r4, #0
 8007a3c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
    odom.pose.pose.orientation.z = 0.0;
 8007a40:	4a13      	ldr	r2, [pc, #76]	; (8007a90 <_Z8initOdomv+0xd0>)
 8007a42:	f04f 0300 	mov.w	r3, #0
 8007a46:	f04f 0400 	mov.w	r4, #0
 8007a4a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    odom.pose.pose.orientation.w = 0.0;
 8007a4e:	4a10      	ldr	r2, [pc, #64]	; (8007a90 <_Z8initOdomv+0xd0>)
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	f04f 0400 	mov.w	r4, #0
 8007a58:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

    odom.twist.twist.linear.x  = 0.0;
 8007a5c:	4a0c      	ldr	r2, [pc, #48]	; (8007a90 <_Z8initOdomv+0xd0>)
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	f04f 0400 	mov.w	r4, #0
 8007a66:	e9c2 346c 	strd	r3, r4, [r2, #432]	; 0x1b0
    odom.twist.twist.angular.z = 0.0;
 8007a6a:	4a09      	ldr	r2, [pc, #36]	; (8007a90 <_Z8initOdomv+0xd0>)
 8007a6c:	f04f 0300 	mov.w	r3, #0
 8007a70:	f04f 0400 	mov.w	r4, #0
 8007a74:	e9c2 3478 	strd	r3, r4, [r2, #480]	; 0x1e0
}
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc90      	pop	{r4, r7}
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	20000004 	.word	0x20000004
 8007a88:	20004bd4 	.word	0x20004bd4
 8007a8c:	20004be0 	.word	0x20004be0
 8007a90:	200046d8 	.word	0x200046d8

08007a94 <_Z15initJointStatesv>:

void initJointStates(void)
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
    static char *joint_states_name[] = {(char*)"wheel_left_joint", (char*)"wheel_right_joint"};

    joint_states.header.frame_id = joint_state_header_frame_id;
 8007a98:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <_Z15initJointStatesv+0x34>)
 8007a9a:	4a0c      	ldr	r2, [pc, #48]	; (8007acc <_Z15initJointStatesv+0x38>)
 8007a9c:	615a      	str	r2, [r3, #20]
    joint_states.name            = joint_states_name;
 8007a9e:	4b0a      	ldr	r3, [pc, #40]	; (8007ac8 <_Z15initJointStatesv+0x34>)
 8007aa0:	4a0b      	ldr	r2, [pc, #44]	; (8007ad0 <_Z15initJointStatesv+0x3c>)
 8007aa2:	621a      	str	r2, [r3, #32]

    joint_states.name_length     = WHEEL_NUM;
 8007aa4:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <_Z15initJointStatesv+0x34>)
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	619a      	str	r2, [r3, #24]
    joint_states.position_length = WHEEL_NUM;
 8007aaa:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <_Z15initJointStatesv+0x34>)
 8007aac:	2202      	movs	r2, #2
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24
    joint_states.velocity_length = WHEEL_NUM;
 8007ab0:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <_Z15initJointStatesv+0x34>)
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	635a      	str	r2, [r3, #52]	; 0x34
    joint_states.effort_length   = WHEEL_NUM;
 8007ab6:	4b04      	ldr	r3, [pc, #16]	; (8007ac8 <_Z15initJointStatesv+0x34>)
 8007ab8:	2202      	movs	r2, #2
 8007aba:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007abc:	bf00      	nop
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	200049f8 	.word	0x200049f8
 8007acc:	20004470 	.word	0x20004470
 8007ad0:	20000008 	.word	0x20000008
 8007ad4:	00000000 	.word	0x00000000

08007ad8 <_Z12calcOdometryfll>:

bool calcOdometry(float diff_time,int32_t left_tick, int32_t right_tick)
{
 8007ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007adc:	b090      	sub	sp, #64	; 0x40
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	ed87 0a03 	vstr	s0, [r7, #12]
 8007ae4:	60b8      	str	r0, [r7, #8]
 8007ae6:	6079      	str	r1, [r7, #4]
    float delta_s, theta, delta_theta;
    static float last_theta = 0.0f;
    float v, w;                  // v = translational velocity [m/s], w = rotational velocity [rad/s]
    float step_time;

    wheel_l = wheel_r = 0.0f;
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af0:	63fb      	str	r3, [r7, #60]	; 0x3c
    delta_s = delta_theta = theta = 0.0f;
 8007af2:	f04f 0300 	mov.w	r3, #0
 8007af6:	637b      	str	r3, [r7, #52]	; 0x34
 8007af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afa:	633b      	str	r3, [r7, #48]	; 0x30
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    v = w = 0.0f;
 8007b00:	f04f 0300 	mov.w	r3, #0
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
    step_time = 0.0f;
 8007b0a:	f04f 0300 	mov.w	r3, #0
 8007b0e:	623b      	str	r3, [r7, #32]

    step_time = diff_time;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	623b      	str	r3, [r7, #32]

    if (step_time == 0)
 8007b14:	edd7 7a08 	vldr	s15, [r7, #32]
 8007b18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b20:	d101      	bne.n	8007b26 <_Z12calcOdometryfll+0x4e>
        return false;
 8007b22:	2300      	movs	r3, #0
 8007b24:	e154      	b.n	8007dd0 <_Z12calcOdometryfll+0x2f8>

    wheel_l = TICK2RAD * (float)last_diff_tick[LEFT];
 8007b26:	4bb2      	ldr	r3, [pc, #712]	; (8007df0 <_Z12calcOdometryfll+0x318>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b32:	ee17 0a90 	vmov	r0, s15
 8007b36:	f7f8 fd07 	bl	8000548 <__aeabi_f2d>
 8007b3a:	a3a9      	add	r3, pc, #676	; (adr r3, 8007de0 <_Z12calcOdometryfll+0x308>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fd5a 	bl	80005f8 <__aeabi_dmul>
 8007b44:	4603      	mov	r3, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	4618      	mov	r0, r3
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	f7f9 f82c 	bl	8000ba8 <__aeabi_d2f>
 8007b50:	4603      	mov	r3, r0
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    wheel_r = TICK2RAD * (float)last_diff_tick[RIGHT];
 8007b54:	4ba6      	ldr	r3, [pc, #664]	; (8007df0 <_Z12calcOdometryfll+0x318>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	ee07 3a90 	vmov	s15, r3
 8007b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b60:	ee17 0a90 	vmov	r0, s15
 8007b64:	f7f8 fcf0 	bl	8000548 <__aeabi_f2d>
 8007b68:	a39d      	add	r3, pc, #628	; (adr r3, 8007de0 <_Z12calcOdometryfll+0x308>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fd43 	bl	80005f8 <__aeabi_dmul>
 8007b72:	4603      	mov	r3, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	4618      	mov	r0, r3
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f7f9 f815 	bl	8000ba8 <__aeabi_d2f>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	63bb      	str	r3, [r7, #56]	; 0x38

    if (isnan(wheel_l))
 8007b82:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8007b86:	f7f9 fb45 	bl	8001214 <_ZSt5isnanf>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <_Z12calcOdometryfll+0xbe>
        wheel_l = 0.0f;
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (isnan(wheel_r))
 8007b96:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8007b9a:	f7f9 fb3b 	bl	8001214 <_ZSt5isnanf>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <_Z12calcOdometryfll+0xd2>
        wheel_r = 0.0f;
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	63bb      	str	r3, [r7, #56]	; 0x38

    delta_s     = WHEEL_RADIUS * (wheel_r + wheel_l) / 2.0f;
 8007baa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007bae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bb6:	ee17 0a90 	vmov	r0, s15
 8007bba:	f7f8 fcc5 	bl	8000548 <__aeabi_f2d>
 8007bbe:	a38a      	add	r3, pc, #552	; (adr r3, 8007de8 <_Z12calcOdometryfll+0x310>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f7f8 fd18 	bl	80005f8 <__aeabi_dmul>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	4618      	mov	r0, r3
 8007bce:	4621      	mov	r1, r4
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bd8:	f7f8 fe38 	bl	800084c <__aeabi_ddiv>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	4618      	mov	r0, r3
 8007be2:	4621      	mov	r1, r4
 8007be4:	f7f8 ffe0 	bl	8000ba8 <__aeabi_d2f>
 8007be8:	4603      	mov	r3, r0
 8007bea:	62fb      	str	r3, [r7, #44]	; 0x2c
//     theta = WHEEL_RADIUS * (wheel_r - wheel_l) / WHEEL_SEPARATION;

    float quat_data[4];
    robot_imu_get_quat(quat_data);
 8007bec:	f107 0310 	add.w	r3, r7, #16
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7f9 f9e5 	bl	8000fc0 <robot_imu_get_quat>
    theta = atan2f(quat_data[0] * quat_data[3] + quat_data[1] * quat_data[2], 0.5f - quat_data[2] * quat_data[2] - quat_data[3] * quat_data[3]);
 8007bf6:	ed97 7a04 	vldr	s14, [r7, #16]
 8007bfa:	edd7 7a07 	vldr	s15, [r7, #28]
 8007bfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c02:	edd7 6a05 	vldr	s13, [r7, #20]
 8007c06:	edd7 7a06 	vldr	s15, [r7, #24]
 8007c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c0e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007c12:	ed97 7a06 	vldr	s14, [r7, #24]
 8007c16:	edd7 7a06 	vldr	s15, [r7, #24]
 8007c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007c22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8007c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c36:	eef0 0a67 	vmov.f32	s1, s15
 8007c3a:	eeb0 0a46 	vmov.f32	s0, s12
 8007c3e:	f00b f887 	bl	8012d50 <atan2f>
 8007c42:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    delta_theta = theta - last_theta;
 8007c46:	4b6b      	ldr	r3, [pc, #428]	; (8007df4 <_Z12calcOdometryfll+0x31c>)
 8007c48:	edd3 7a00 	vldr	s15, [r3]
 8007c4c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8007c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c54:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // compute odometric pose
    odom_pose[0] += delta_s * cos(odom_pose[2] + (delta_theta / 2.0));
 8007c58:	4b67      	ldr	r3, [pc, #412]	; (8007df8 <_Z12calcOdometryfll+0x320>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7f8 fc73 	bl	8000548 <__aeabi_f2d>
 8007c62:	4604      	mov	r4, r0
 8007c64:	460d      	mov	r5, r1
 8007c66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c68:	f7f8 fc6e 	bl	8000548 <__aeabi_f2d>
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	4689      	mov	r9, r1
 8007c70:	4b61      	ldr	r3, [pc, #388]	; (8007df8 <_Z12calcOdometryfll+0x320>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7f8 fc67 	bl	8000548 <__aeabi_f2d>
 8007c7a:	4682      	mov	sl, r0
 8007c7c:	468b      	mov	fp, r1
 8007c7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c80:	f7f8 fc62 	bl	8000548 <__aeabi_f2d>
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c8c:	f7f8 fdde 	bl	800084c <__aeabi_ddiv>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4650      	mov	r0, sl
 8007c96:	4659      	mov	r1, fp
 8007c98:	f7f8 faf8 	bl	800028c <__adddf3>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	ec43 2b17 	vmov	d7, r2, r3
 8007ca4:	eeb0 0a47 	vmov.f32	s0, s14
 8007ca8:	eef0 0a67 	vmov.f32	s1, s15
 8007cac:	f00a ff5c 	bl	8012b68 <cos>
 8007cb0:	ec53 2b10 	vmov	r2, r3, d0
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	f7f8 fc9e 	bl	80005f8 <__aeabi_dmul>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	f7f8 fae2 	bl	800028c <__adddf3>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	4618      	mov	r0, r3
 8007cce:	4621      	mov	r1, r4
 8007cd0:	f7f8 ff6a 	bl	8000ba8 <__aeabi_d2f>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	4b48      	ldr	r3, [pc, #288]	; (8007df8 <_Z12calcOdometryfll+0x320>)
 8007cd8:	601a      	str	r2, [r3, #0]
    odom_pose[1] += delta_s * sin(odom_pose[2] + (delta_theta / 2.0));
 8007cda:	4b47      	ldr	r3, [pc, #284]	; (8007df8 <_Z12calcOdometryfll+0x320>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7f8 fc32 	bl	8000548 <__aeabi_f2d>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cea:	f7f8 fc2d 	bl	8000548 <__aeabi_f2d>
 8007cee:	4680      	mov	r8, r0
 8007cf0:	4689      	mov	r9, r1
 8007cf2:	4b41      	ldr	r3, [pc, #260]	; (8007df8 <_Z12calcOdometryfll+0x320>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7f8 fc26 	bl	8000548 <__aeabi_f2d>
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	468b      	mov	fp, r1
 8007d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d02:	f7f8 fc21 	bl	8000548 <__aeabi_f2d>
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d0e:	f7f8 fd9d 	bl	800084c <__aeabi_ddiv>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4650      	mov	r0, sl
 8007d18:	4659      	mov	r1, fp
 8007d1a:	f7f8 fab7 	bl	800028c <__adddf3>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	ec43 2b17 	vmov	d7, r2, r3
 8007d26:	eeb0 0a47 	vmov.f32	s0, s14
 8007d2a:	eef0 0a67 	vmov.f32	s1, s15
 8007d2e:	f00a ff6b 	bl	8012c08 <sin>
 8007d32:	ec53 2b10 	vmov	r2, r3, d0
 8007d36:	4640      	mov	r0, r8
 8007d38:	4649      	mov	r1, r9
 8007d3a:	f7f8 fc5d 	bl	80005f8 <__aeabi_dmul>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	f7f8 faa1 	bl	800028c <__adddf3>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	4618      	mov	r0, r3
 8007d50:	4621      	mov	r1, r4
 8007d52:	f7f8 ff29 	bl	8000ba8 <__aeabi_d2f>
 8007d56:	4602      	mov	r2, r0
 8007d58:	4b27      	ldr	r3, [pc, #156]	; (8007df8 <_Z12calcOdometryfll+0x320>)
 8007d5a:	605a      	str	r2, [r3, #4]
    odom_pose[2] += delta_theta;
 8007d5c:	4b26      	ldr	r3, [pc, #152]	; (8007df8 <_Z12calcOdometryfll+0x320>)
 8007d5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007d62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d6a:	4b23      	ldr	r3, [pc, #140]	; (8007df8 <_Z12calcOdometryfll+0x320>)
 8007d6c:	edc3 7a02 	vstr	s15, [r3, #8]

    // compute odometric instantaneouse velocity

    v = delta_s / step_time;
 8007d70:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007d74:	ed97 7a08 	vldr	s14, [r7, #32]
 8007d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d7c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    w = delta_theta / step_time;
 8007d80:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8007d84:	ed97 7a08 	vldr	s14, [r7, #32]
 8007d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d8c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    odom_vel[0] = v;
 8007d90:	4a1a      	ldr	r2, [pc, #104]	; (8007dfc <_Z12calcOdometryfll+0x324>)
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	6013      	str	r3, [r2, #0]
    odom_vel[1] = 0.0;
 8007d96:	4b19      	ldr	r3, [pc, #100]	; (8007dfc <_Z12calcOdometryfll+0x324>)
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	605a      	str	r2, [r3, #4]
    odom_vel[2] = w;
 8007d9e:	4a17      	ldr	r2, [pc, #92]	; (8007dfc <_Z12calcOdometryfll+0x324>)
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	6093      	str	r3, [r2, #8]

    last_velocity[LEFT]  = wheel_l / step_time   ;
 8007da4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8007da8:	ed97 7a08 	vldr	s14, [r7, #32]
 8007dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007db0:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <_Z12calcOdometryfll+0x328>)
 8007db2:	edc3 7a00 	vstr	s15, [r3]
    last_velocity[RIGHT] = wheel_r / step_time ;
 8007db6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8007dba:	ed97 7a08 	vldr	s14, [r7, #32]
 8007dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <_Z12calcOdometryfll+0x328>)
 8007dc4:	edc3 7a01 	vstr	s15, [r3, #4]

    last_theta = theta;
 8007dc8:	4a0a      	ldr	r2, [pc, #40]	; (8007df4 <_Z12calcOdometryfll+0x31c>)
 8007dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dcc:	6013      	str	r3, [r2, #0]

    return true;
 8007dce:	2301      	movs	r3, #1
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3740      	adds	r7, #64	; 0x40
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dda:	bf00      	nop
 8007ddc:	f3af 8000 	nop.w
 8007de0:	c85a214a 	.word	0xc85a214a
 8007de4:	3f737f35 	.word	0x3f737f35
 8007de8:	4189374c 	.word	0x4189374c
 8007dec:	3fa0e560 	.word	0x3fa0e560
 8007df0:	20004b98 	.word	0x20004b98
 8007df4:	20004c0c 	.word	0x20004c0c
 8007df8:	20004bd4 	.word	0x20004bd4
 8007dfc:	20004be0 	.word	0x20004be0
 8007e00:	20004ba8 	.word	0x20004ba8

08007e04 <_Z10sendLogMsgv>:

void sendLogMsg(void)
{
 8007e04:	b5b0      	push	{r4, r5, r7, lr}
 8007e06:	af00      	add	r7, sp, #0
    static bool log_flag = false;

    if (nh.connected())
 8007e08:	4824      	ldr	r0, [pc, #144]	; (8007e9c <_Z10sendLogMsgv+0x98>)
 8007e0a:	f000 fbb5 	bl	8008578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9connectedEv>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d03d      	beq.n	8007e90 <_Z10sendLogMsgv+0x8c>
    {
        if (log_flag == false)
 8007e14:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <_Z10sendLogMsgv+0x9c>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f083 0301 	eor.w	r3, r3, #1
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d039      	beq.n	8007e96 <_Z10sendLogMsgv+0x92>
        {
            sprintf(log_msg, "--------------------------");
 8007e22:	4a20      	ldr	r2, [pc, #128]	; (8007ea4 <_Z10sendLogMsgv+0xa0>)
 8007e24:	4b20      	ldr	r3, [pc, #128]	; (8007ea8 <_Z10sendLogMsgv+0xa4>)
 8007e26:	4614      	mov	r4, r2
 8007e28:	461d      	mov	r5, r3
 8007e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e32:	c403      	stmia	r4!, {r0, r1}
 8007e34:	8022      	strh	r2, [r4, #0]
 8007e36:	3402      	adds	r4, #2
 8007e38:	0c13      	lsrs	r3, r2, #16
 8007e3a:	7023      	strb	r3, [r4, #0]
            nh.loginfo(log_msg);
 8007e3c:	4919      	ldr	r1, [pc, #100]	; (8007ea4 <_Z10sendLogMsgv+0xa0>)
 8007e3e:	4817      	ldr	r0, [pc, #92]	; (8007e9c <_Z10sendLogMsgv+0x98>)
 8007e40:	f000 fe86 	bl	8008b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>

            sprintf(log_msg, "Connected to STM32F4 Discovery-Board");
 8007e44:	4a17      	ldr	r2, [pc, #92]	; (8007ea4 <_Z10sendLogMsgv+0xa0>)
 8007e46:	4b19      	ldr	r3, [pc, #100]	; (8007eac <_Z10sendLogMsgv+0xa8>)
 8007e48:	4614      	mov	r4, r2
 8007e4a:	461d      	mov	r5, r3
 8007e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e58:	6020      	str	r0, [r4, #0]
 8007e5a:	3404      	adds	r4, #4
 8007e5c:	7021      	strb	r1, [r4, #0]
            nh.loginfo(log_msg);
 8007e5e:	4911      	ldr	r1, [pc, #68]	; (8007ea4 <_Z10sendLogMsgv+0xa0>)
 8007e60:	480e      	ldr	r0, [pc, #56]	; (8007e9c <_Z10sendLogMsgv+0x98>)
 8007e62:	f000 fe75 	bl	8008b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>

            sprintf(log_msg, "--------------------------");
 8007e66:	4a0f      	ldr	r2, [pc, #60]	; (8007ea4 <_Z10sendLogMsgv+0xa0>)
 8007e68:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <_Z10sendLogMsgv+0xa4>)
 8007e6a:	4614      	mov	r4, r2
 8007e6c:	461d      	mov	r5, r3
 8007e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e76:	c403      	stmia	r4!, {r0, r1}
 8007e78:	8022      	strh	r2, [r4, #0]
 8007e7a:	3402      	adds	r4, #2
 8007e7c:	0c13      	lsrs	r3, r2, #16
 8007e7e:	7023      	strb	r3, [r4, #0]
            nh.loginfo(log_msg);
 8007e80:	4908      	ldr	r1, [pc, #32]	; (8007ea4 <_Z10sendLogMsgv+0xa0>)
 8007e82:	4806      	ldr	r0, [pc, #24]	; (8007e9c <_Z10sendLogMsgv+0x98>)
 8007e84:	f000 fe64 	bl	8008b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>

            log_flag = true;
 8007e88:	4b05      	ldr	r3, [pc, #20]	; (8007ea0 <_Z10sendLogMsgv+0x9c>)
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        log_flag = false;
    }
}
 8007e8e:	e002      	b.n	8007e96 <_Z10sendLogMsgv+0x92>
        log_flag = false;
 8007e90:	4b03      	ldr	r3, [pc, #12]	; (8007ea0 <_Z10sendLogMsgv+0x9c>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	701a      	strb	r2, [r3, #0]
}
 8007e96:	bf00      	nop
 8007e98:	bdb0      	pop	{r4, r5, r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	200022c8 	.word	0x200022c8
 8007ea0:	20004c10 	.word	0x20004c10
 8007ea4:	20002264 	.word	0x20002264
 8007ea8:	080151fc 	.word	0x080151fc
 8007eac:	08015218 	.word	0x08015218

08007eb0 <_Z17waitForSerialLinkb>:

void waitForSerialLink(bool isConnected)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
    static bool wait_flag = false;

    if (isConnected)
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00d      	beq.n	8007edc <_Z17waitForSerialLinkb+0x2c>
    {
        if (wait_flag == false)
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <_Z17waitForSerialLinkb+0x3c>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	f083 0301 	eor.w	r3, r3, #1
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <_Z17waitForSerialLinkb+0x32>
        {
            HAL_Delay(10);
 8007ece:	200a      	movs	r0, #10
 8007ed0:	f005 f82c 	bl	800cf2c <HAL_Delay>

            wait_flag = true;
 8007ed4:	4b05      	ldr	r3, [pc, #20]	; (8007eec <_Z17waitForSerialLinkb+0x3c>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        wait_flag = false;
    }
}
 8007eda:	e002      	b.n	8007ee2 <_Z17waitForSerialLinkb+0x32>
        wait_flag = false;
 8007edc:	4b03      	ldr	r3, [pc, #12]	; (8007eec <_Z17waitForSerialLinkb+0x3c>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	701a      	strb	r2, [r3, #0]
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20004c11 	.word	0x20004c11

08007ef0 <_Z6getIMUv>:

sensor_msgs::Imu getIMU(void)
{
 8007ef0:	b590      	push	{r4, r7, lr}
 8007ef2:	b08d      	sub	sp, #52	; 0x34
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
    float accel[3], gyro[3], quaternion[4];
    robot_imu_get_accel(accel);
 8007ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7f9 f83f 	bl	8000f80 <robot_imu_get_accel>
    robot_imu_get_gyro(gyro);
 8007f02:	f107 0318 	add.w	r3, r7, #24
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7f9 f84a 	bl	8000fa0 <robot_imu_get_gyro>
    robot_imu_get_quat(quaternion);
 8007f0c:	f107 0308 	add.w	r3, r7, #8
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7f9 f855 	bl	8000fc0 <robot_imu_get_quat>

    sensor_msgs::Imu imu_msg_;
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fb fef8 	bl	8003d0c <_ZN11sensor_msgs3ImuC1Ev>

    imu_msg_.angular_velocity.x = gyro[0];
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7f8 fb12 	bl	8000548 <__aeabi_f2d>
 8007f24:	4603      	mov	r3, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
    imu_msg_.angular_velocity.y = gyro[1];
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7f8 fb09 	bl	8000548 <__aeabi_f2d>
 8007f36:	4603      	mov	r3, r0
 8007f38:	460c      	mov	r4, r1
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
    imu_msg_.angular_velocity.z = gyro[2];
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7f8 fb00 	bl	8000548 <__aeabi_f2d>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

    imu_msg_.linear_acceleration.x = accel[0];
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7f8 faf7 	bl	8000548 <__aeabi_f2d>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	e9c2 343e 	strd	r3, r4, [r2, #248]	; 0xf8
    imu_msg_.linear_acceleration.y = accel[1];
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7f8 faee 	bl	8000548 <__aeabi_f2d>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
    imu_msg_.linear_acceleration.z = accel[2];
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7f8 fae5 	bl	8000548 <__aeabi_f2d>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	460c      	mov	r4, r1
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	e9c2 3442 	strd	r3, r4, [r2, #264]	; 0x108

    imu_msg_.orientation.w = quaternion[0];
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7f8 fadc 	bl	8000548 <__aeabi_f2d>
 8007f90:	4603      	mov	r3, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    imu_msg_.orientation.x = quaternion[1];
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7f8 fad3 	bl	8000548 <__aeabi_f2d>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	e9c2 3408 	strd	r3, r4, [r2, #32]
    imu_msg_.orientation.y = quaternion[2];
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7f8 faca 	bl	8000548 <__aeabi_f2d>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    imu_msg_.orientation.z = quaternion[3];
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7f8 fac1 	bl	8000548 <__aeabi_f2d>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    imu_msg_.angular_velocity_covariance[1] = 0;
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	f04f 0300 	mov.w	r3, #0
 8007fd6:	f04f 0400 	mov.w	r4, #0
 8007fda:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
    imu_msg_.angular_velocity_covariance[2] = 0;
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	f04f 0300 	mov.w	r3, #0
 8007fe4:	f04f 0400 	mov.w	r4, #0
 8007fe8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
    imu_msg_.angular_velocity_covariance[3] = 0;
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	f04f 0400 	mov.w	r4, #0
 8007ff6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
    imu_msg_.angular_velocity_covariance[4] = 0.02;
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	a44e      	add	r4, pc, #312	; (adr r4, 8008138 <_Z6getIMUv+0x248>)
 8007ffe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008002:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
    imu_msg_.angular_velocity_covariance[5] = 0;
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	f04f 0300 	mov.w	r3, #0
 800800c:	f04f 0400 	mov.w	r4, #0
 8008010:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
    imu_msg_.angular_velocity_covariance[6] = 0;
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	f04f 0300 	mov.w	r3, #0
 800801a:	f04f 0400 	mov.w	r4, #0
 800801e:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
    imu_msg_.angular_velocity_covariance[7] = 0;
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	f04f 0300 	mov.w	r3, #0
 8008028:	f04f 0400 	mov.w	r4, #0
 800802c:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
    imu_msg_.angular_velocity_covariance[8] = 0.02;
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	a441      	add	r4, pc, #260	; (adr r4, 8008138 <_Z6getIMUv+0x248>)
 8008034:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008038:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8

    imu_msg_.linear_acceleration_covariance[0] = 0.04;
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	a440      	add	r4, pc, #256	; (adr r4, 8008140 <_Z6getIMUv+0x250>)
 8008040:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008044:	e9c2 3444 	strd	r3, r4, [r2, #272]	; 0x110
    imu_msg_.linear_acceleration_covariance[1] = 0;
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	f04f 0400 	mov.w	r4, #0
 8008052:	e9c2 3446 	strd	r3, r4, [r2, #280]	; 0x118
    imu_msg_.linear_acceleration_covariance[2] = 0;
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	f04f 0400 	mov.w	r4, #0
 8008060:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
    imu_msg_.linear_acceleration_covariance[3] = 0;
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	f04f 0400 	mov.w	r4, #0
 800806e:	e9c2 344a 	strd	r3, r4, [r2, #296]	; 0x128
    imu_msg_.linear_acceleration_covariance[4] = 0.04;
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	a432      	add	r4, pc, #200	; (adr r4, 8008140 <_Z6getIMUv+0x250>)
 8008076:	e9d4 3400 	ldrd	r3, r4, [r4]
 800807a:	e9c2 344c 	strd	r3, r4, [r2, #304]	; 0x130
    imu_msg_.linear_acceleration_covariance[5] = 0;
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	f04f 0400 	mov.w	r4, #0
 8008088:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138
    imu_msg_.linear_acceleration_covariance[6] = 0;
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	f04f 0300 	mov.w	r3, #0
 8008092:	f04f 0400 	mov.w	r4, #0
 8008096:	e9c2 3450 	strd	r3, r4, [r2, #320]	; 0x140
    imu_msg_.linear_acceleration_covariance[7] = 0;
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	f04f 0400 	mov.w	r4, #0
 80080a4:	e9c2 3452 	strd	r3, r4, [r2, #328]	; 0x148
    imu_msg_.linear_acceleration_covariance[8] = 0.04;
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	a425      	add	r4, pc, #148	; (adr r4, 8008140 <_Z6getIMUv+0x250>)
 80080ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80080b0:	e9c2 3454 	strd	r3, r4, [r2, #336]	; 0x150

    imu_msg_.orientation_covariance[0] = 0.0025;
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	a424      	add	r4, pc, #144	; (adr r4, 8008148 <_Z6getIMUv+0x258>)
 80080b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80080bc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    imu_msg_.orientation_covariance[1] = 0;
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	f04f 0300 	mov.w	r3, #0
 80080c6:	f04f 0400 	mov.w	r4, #0
 80080ca:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    imu_msg_.orientation_covariance[2] = 0;
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	f04f 0400 	mov.w	r4, #0
 80080d8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    imu_msg_.orientation_covariance[3] = 0;
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	f04f 0400 	mov.w	r4, #0
 80080e6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
    imu_msg_.orientation_covariance[4] = 0.0025;
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	a416      	add	r4, pc, #88	; (adr r4, 8008148 <_Z6getIMUv+0x258>)
 80080ee:	e9d4 3400 	ldrd	r3, r4, [r4]
 80080f2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
    imu_msg_.orientation_covariance[5] = 0;
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	f04f 0300 	mov.w	r3, #0
 80080fc:	f04f 0400 	mov.w	r4, #0
 8008100:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    imu_msg_.orientation_covariance[6] = 0;
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	f04f 0300 	mov.w	r3, #0
 800810a:	f04f 0400 	mov.w	r4, #0
 800810e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    imu_msg_.orientation_covariance[7] = 0;
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	f04f 0400 	mov.w	r4, #0
 800811c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
    imu_msg_.orientation_covariance[8] = 0.0025;
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	a409      	add	r4, pc, #36	; (adr r4, 8008148 <_Z6getIMUv+0x258>)
 8008124:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008128:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

    return imu_msg_;
 800812c:	bf00      	nop
}
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	3734      	adds	r7, #52	; 0x34
 8008132:	46bd      	mov	sp, r7
 8008134:	bd90      	pop	{r4, r7, pc}
 8008136:	bf00      	nop
 8008138:	47ae147b 	.word	0x47ae147b
 800813c:	3f947ae1 	.word	0x3f947ae1
 8008140:	47ae147b 	.word	0x47ae147b
 8008144:	3fa47ae1 	.word	0x3fa47ae1
 8008148:	47ae147b 	.word	0x47ae147b
 800814c:	3f647ae1 	.word	0x3f647ae1

08008150 <_Z12controlMotorPf>:

void controlMotor(float *goal_vel)
{
 8008150:	b5b0      	push	{r4, r5, r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
    float wheel_velocity_cmd[2];

    float lin_vel = goal_vel[LEFT];
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	617b      	str	r3, [r7, #20]
    float ang_vel = goal_vel[RIGHT];
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	613b      	str	r3, [r7, #16]

    wheel_velocity_cmd[LEFT]  = lin_vel - (ang_vel * WHEEL_SEPARATION / 2);
 8008164:	6978      	ldr	r0, [r7, #20]
 8008166:	f7f8 f9ef 	bl	8000548 <__aeabi_f2d>
 800816a:	4604      	mov	r4, r0
 800816c:	460d      	mov	r5, r1
 800816e:	6938      	ldr	r0, [r7, #16]
 8008170:	f7f8 f9ea 	bl	8000548 <__aeabi_f2d>
 8008174:	a33f      	add	r3, pc, #252	; (adr r3, 8008274 <_Z12controlMotorPf+0x124>)
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	f7f8 fa3d 	bl	80005f8 <__aeabi_dmul>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4610      	mov	r0, r2
 8008184:	4619      	mov	r1, r3
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800818e:	f7f8 fb5d 	bl	800084c <__aeabi_ddiv>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4620      	mov	r0, r4
 8008198:	4629      	mov	r1, r5
 800819a:	f7f8 f875 	bl	8000288 <__aeabi_dsub>
 800819e:	4603      	mov	r3, r0
 80081a0:	460c      	mov	r4, r1
 80081a2:	4618      	mov	r0, r3
 80081a4:	4621      	mov	r1, r4
 80081a6:	f7f8 fcff 	bl	8000ba8 <__aeabi_d2f>
 80081aa:	4603      	mov	r3, r0
 80081ac:	60bb      	str	r3, [r7, #8]
    wheel_velocity_cmd[RIGHT] = lin_vel + (ang_vel * WHEEL_SEPARATION / 2);
 80081ae:	6978      	ldr	r0, [r7, #20]
 80081b0:	f7f8 f9ca 	bl	8000548 <__aeabi_f2d>
 80081b4:	4604      	mov	r4, r0
 80081b6:	460d      	mov	r5, r1
 80081b8:	6938      	ldr	r0, [r7, #16]
 80081ba:	f7f8 f9c5 	bl	8000548 <__aeabi_f2d>
 80081be:	a32d      	add	r3, pc, #180	; (adr r3, 8008274 <_Z12controlMotorPf+0x124>)
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	f7f8 fa18 	bl	80005f8 <__aeabi_dmul>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4610      	mov	r0, r2
 80081ce:	4619      	mov	r1, r3
 80081d0:	f04f 0200 	mov.w	r2, #0
 80081d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081d8:	f7f8 fb38 	bl	800084c <__aeabi_ddiv>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4620      	mov	r0, r4
 80081e2:	4629      	mov	r1, r5
 80081e4:	f7f8 f852 	bl	800028c <__adddf3>
 80081e8:	4603      	mov	r3, r0
 80081ea:	460c      	mov	r4, r1
 80081ec:	4618      	mov	r0, r3
 80081ee:	4621      	mov	r1, r4
 80081f0:	f7f8 fcda 	bl	8000ba8 <__aeabi_d2f>
 80081f4:	4603      	mov	r3, r0
 80081f6:	60fb      	str	r3, [r7, #12]

    wheel_velocity_cmd[LEFT]  = constrain(wheel_velocity_cmd[LEFT], MIN_LINEAR_VELOCITY, MAX_LINEAR_VELOCITY);
 80081f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80081fc:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8008268 <_Z12controlMotorPf+0x118>
 8008200:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800826c <_Z12controlMotorPf+0x11c>
 8008204:	eeb0 0a67 	vmov.f32	s0, s15
 8008208:	f7f8 ff3b 	bl	8001082 <constrain>
 800820c:	eef0 7a40 	vmov.f32	s15, s0
 8008210:	edc7 7a02 	vstr	s15, [r7, #8]
    wheel_velocity_cmd[RIGHT] = constrain(wheel_velocity_cmd[RIGHT], MIN_LINEAR_VELOCITY, MAX_LINEAR_VELOCITY);
 8008214:	edd7 7a03 	vldr	s15, [r7, #12]
 8008218:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8008268 <_Z12controlMotorPf+0x118>
 800821c:	eddf 0a13 	vldr	s1, [pc, #76]	; 800826c <_Z12controlMotorPf+0x11c>
 8008220:	eeb0 0a67 	vmov.f32	s0, s15
 8008224:	f7f8 ff2d 	bl	8001082 <constrain>
 8008228:	eef0 7a40 	vmov.f32	s15, s0
 800822c:	edc7 7a03 	vstr	s15, [r7, #12]

    robot_motor_left_set_speed(wheel_velocity_cmd[LEFT],last_velocity[LEFT]);
 8008230:	edd7 7a02 	vldr	s15, [r7, #8]
 8008234:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <_Z12controlMotorPf+0x120>)
 8008236:	ed93 7a00 	vldr	s14, [r3]
 800823a:	eef0 0a47 	vmov.f32	s1, s14
 800823e:	eeb0 0a67 	vmov.f32	s0, s15
 8008242:	f7f8 fecf 	bl	8000fe4 <robot_motor_left_set_speed>
    robot_motor_right_set_speed(wheel_velocity_cmd[RIGHT],last_velocity[RIGHT]);
 8008246:	edd7 7a03 	vldr	s15, [r7, #12]
 800824a:	4b09      	ldr	r3, [pc, #36]	; (8008270 <_Z12controlMotorPf+0x120>)
 800824c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008250:	eef0 0a47 	vmov.f32	s1, s14
 8008254:	eeb0 0a67 	vmov.f32	s0, s15
 8008258:	f7f8 fed6 	bl	8001008 <robot_motor_right_set_speed>
}
 800825c:	bf00      	nop
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bdb0      	pop	{r4, r5, r7, pc}
 8008264:	f3af 8000 	nop.w
 8008268:	3f5d2b0a 	.word	0x3f5d2b0a
 800826c:	bf5d2b0a 	.word	0xbf5d2b0a
 8008270:	20004ba8 	.word	0x20004ba8
 8008274:	51eb851f 	.word	0x51eb851f
 8008278:	3fc51eb8 	.word	0x3fc51eb8

0800827c <_Z13getMotorSpeedPf>:

void getMotorSpeed(float *vel)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
    goal_velocity_from_motor[LINEAR] = goal_velocity_from_cmd[LINEAR];
 8008284:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <_Z13getMotorSpeedPf+0x24>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a06      	ldr	r2, [pc, #24]	; (80082a4 <_Z13getMotorSpeedPf+0x28>)
 800828a:	6013      	str	r3, [r2, #0]
    goal_velocity_from_motor[ANGULAR] = goal_velocity_from_cmd[ANGULAR];
 800828c:	4b04      	ldr	r3, [pc, #16]	; (80082a0 <_Z13getMotorSpeedPf+0x24>)
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	4a04      	ldr	r2, [pc, #16]	; (80082a4 <_Z13getMotorSpeedPf+0x28>)
 8008292:	6053      	str	r3, [r2, #4]
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	20004bc0 	.word	0x20004bc0
 80082a4:	20004bc8 	.word	0x20004bc8

080082a8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d80d      	bhi.n	80082d8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	fa22 f103 	lsr.w	r1, r2, r3
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	b2ca      	uxtb	r2, r1
 80082ce:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3301      	adds	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	e7ee      	b.n	80082b6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80082d8:	bf00      	nop
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80082f4:	2300      	movs	r3, #0
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d811      	bhi.n	8008322 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	440a      	add	r2, r1
 8008308:	7812      	ldrb	r2, [r2, #0]
 800830a:	4611      	mov	r1, r2
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	00d2      	lsls	r2, r2, #3
 8008310:	fa01 f202 	lsl.w	r2, r1, r2
 8008314:	431a      	orrs	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	e7ea      	b.n	80082f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8008322:	bf00      	nop
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800832e:	b480      	push	{r7}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b18      	cmp	r3, #24
 8008340:	dc1c      	bgt.n	800837c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	f602 0206 	addw	r2, r2, #2054	; 0x806
 800834a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d110      	bne.n	8008374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	f602 0206 	addw	r2, r2, #2054	; 0x806
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	60da      	str	r2, [r3, #12]
        return true;
 8008370:	2301      	movs	r3, #1
 8008372:	e004      	b.n	800837e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3301      	adds	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	e7df      	b.n	800833c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800837c:	2300      	movs	r3, #0
  }
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <_ZN3ros15NodeHandleBase_C1Ev>:
class NodeHandleBase_
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	4a04      	ldr	r2, [pc, #16]	; (80083a8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	080154f0 	.word	0x080154f0

080083ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev>:
  NodeHandle_() : configured_(false)
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff ffe8 	bl	800838c <_ZN3ros15NodeHandleBase_C1Ev>
 80083bc:	4a41      	ldr	r2, [pc, #260]	; (80084c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x118>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3304      	adds	r3, #4
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fa f896 	bl	80024f8 <_ZN13STM32HardwareC1Ev>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80083d2:	3334      	adds	r3, #52	; 0x34
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80083de:	3308      	adds	r3, #8
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7f9 fb4f 	bl	8001a84 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b18      	cmp	r3, #24
 80083ee:	d80a      	bhi.n	8008406 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x5a>
      publishers[i] = 0;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	f602 0206 	addw	r2, r2, #2054	; 0x806
 80083f8:	2100      	movs	r1, #0
 80083fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	3301      	adds	r3, #1
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e7f1      	b.n	80083ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x3e>
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008406:	2300      	movs	r3, #0
 8008408:	613b      	str	r3, [r7, #16]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2b18      	cmp	r3, #24
 800840e:	d80b      	bhi.n	8008428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x7c>
      subscribers[i] = 0;
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	2200      	movs	r2, #0
 800841e:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	3301      	adds	r3, #1
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	e7f0      	b.n	800840a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x5e>
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008432:	d209      	bcs.n	8008448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x9c>
      message_in[i] = 0;
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	3318      	adds	r3, #24
 800843c:	2200      	movs	r2, #0
 800843e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3301      	adds	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	e7f1      	b.n	800842c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x80>
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8008448:	2300      	movs	r3, #0
 800844a:	60bb      	str	r3, [r7, #8]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008452:	d20b      	bcs.n	800846c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0xc0>
      message_out[i] = 0;
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	4413      	add	r3, r2
 800845a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845e:	3318      	adds	r3, #24
 8008460:	2200      	movs	r2, #0
 8008462:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	3301      	adds	r3, #1
 8008468:	60bb      	str	r3, [r7, #8]
 800846a:	e7ef      	b.n	800844c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0xa0>
    req_param_resp.ints_length = 0;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008472:	330c      	adds	r3, #12
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800847e:	3314      	adds	r3, #20
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800848a:	3318      	adds	r3, #24
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008496:	3320      	adds	r3, #32
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80084a2:	330c      	adds	r3, #12
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80084ae:	3314      	adds	r3, #20
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
    spin_timeout_ = 0;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	615a      	str	r2, [r3, #20]
  }
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	080153d4 	.word	0x080153d4

080084c8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	4a04      	ldr	r2, [pc, #16]	; (80084e4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	080154d8 	.word	0x080154d8

080084e8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff ffe5 	bl	80084c8 <_ZN3ros11Subscriber_C1Ev>
 80084fe:	4a0b      	ldr	r2, [pc, #44]	; (800852c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	3310      	adds	r3, #16
 8008508:	4618      	mov	r0, r3
 800850a:	f7fc ff91 	bl	8005430 <_ZN13geometry_msgs5TwistC1Ev>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	659a      	str	r2, [r3, #88]	; 0x58
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	609a      	str	r2, [r3, #8]
  };
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	08015344 	.word	0x08015344

08008530 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff ffc1 	bl	80084c8 <_ZN3ros11Subscriber_C1Ev>
 8008546:	4a0b      	ldr	r2, [pc, #44]	; (8008574 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	330c      	adds	r3, #12
 8008550:	4618      	mov	r0, r3
 8008552:	f7fa f819 	bl	8002588 <_ZN8std_msgs5EmptyC1Ev>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	611a      	str	r2, [r3, #16]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	615a      	str	r2, [r3, #20]
    topic_ = topic_name;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	609a      	str	r2, [r3, #8]
  };
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	0801532c 	.word	0x0801532c

08008578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9connectedEv>:
  virtual bool connected()
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
    return configured_;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008586:	3334      	adds	r3, #52	; 0x34
 8008588:	781b      	ldrb	r3, [r3, #0]
  };
 800858a:	4618      	mov	r0, r3
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>:
  virtual int spinOnce()
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3304      	adds	r3, #4
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7f9 ffe4 	bl	8002570 <_ZN13STM32Hardware4timeEv>
 80085a8:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80085b0:	333c      	adds	r3, #60	; 0x3c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80085bc:	4293      	cmp	r3, r2
 80085be:	d905      	bls.n	80085cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x36>
      configured_ = false;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80085c6:	3334      	adds	r3, #52	; 0x34
 80085c8:	2200      	movs	r2, #0
 80085ca:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80085d2:	3320      	adds	r3, #32
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00c      	beq.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d905      	bls.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80085ee:	3320      	adds	r3, #32
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d013      	beq.n	8008624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x8e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3304      	adds	r3, #4
 8008600:	4618      	mov	r0, r3
 8008602:	f7f9 ffb5 	bl	8002570 <_ZN13STM32Hardware4timeEv>
 8008606:	4602      	mov	r2, r0
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	1ad2      	subs	r2, r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	429a      	cmp	r2, r3
 8008612:	bf8c      	ite	hi
 8008614:	2301      	movhi	r3, #1
 8008616:	2300      	movls	r3, #0
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x8e>
          return SPIN_TIMEOUT;
 800861e:	f06f 0301 	mvn.w	r3, #1
 8008622:	e212      	b.n	8008a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4b4>
      int data = hardware_.read();
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f7f9 ff82 	bl	8002532 <_ZN13STM32Hardware4readEv>
 800862e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	f2c0 81ec 	blt.w	8008a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x47a>
      checksum_ += data;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800863e:	3330      	adds	r3, #48	; 0x30
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	441a      	add	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800864c:	3330      	adds	r3, #48	; 0x30
 800864e:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008656:	3320      	adds	r3, #32
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b07      	cmp	r3, #7
 800865c:	d129      	bne.n	80086b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x11c>
        message_in[index_++] = data;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008664:	332c      	adds	r3, #44	; 0x2c
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	1c51      	adds	r1, r2, #1
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008670:	332c      	adds	r3, #44	; 0x2c
 8008672:	6019      	str	r1, [r3, #0]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	b2d9      	uxtb	r1, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4413      	add	r3, r2
 800867c:	460a      	mov	r2, r1
 800867e:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008686:	3324      	adds	r3, #36	; 0x24
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	1e5a      	subs	r2, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008692:	3324      	adds	r3, #36	; 0x24
 8008694:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800869c:	3324      	adds	r3, #36	; 0x24
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1a7      	bne.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80086aa:	3320      	adds	r3, #32
 80086ac:	2208      	movs	r2, #8
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	e7a0      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80086b8:	3320      	adds	r3, #32
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d130      	bne.n	8008722 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x18c>
        if (data == 0xff)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2bff      	cmp	r3, #255	; 0xff
 80086c4:	d112      	bne.n	80086ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x156>
          mode_++;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80086cc:	3320      	adds	r3, #32
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80086d8:	3320      	adds	r3, #32
 80086da:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f103 0214 	add.w	r2, r3, #20
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	e783      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7f9 ff3d 	bl	8002570 <_ZN13STM32Hardware4timeEv>
 80086f6:	4602      	mov	r2, r0
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008700:	4293      	cmp	r3, r2
 8008702:	bf8c      	ite	hi
 8008704:	2301      	movhi	r3, #1
 8008706:	2300      	movls	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	f43f af72 	beq.w	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
          configured_ = false;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008716:	3334      	adds	r3, #52	; 0x34
 8008718:	2200      	movs	r2, #0
 800871a:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 800871c:	f06f 0301 	mvn.w	r3, #1
 8008720:	e193      	b.n	8008a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4b4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008728:	3320      	adds	r3, #32
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d123      	bne.n	8008778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1e2>
        if (data == PROTOCOL_VER)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2bfe      	cmp	r3, #254	; 0xfe
 8008734:	d10b      	bne.n	800874e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1b8>
          mode_++;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800873c:	3320      	adds	r3, #32
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008748:	3320      	adds	r3, #32
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	e752      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008754:	3320      	adds	r3, #32
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008760:	3334      	adds	r3, #52	; 0x34
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	f083 0301 	eor.w	r3, r3, #1
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	f43f af42 	beq.w	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fa75 	bl	8008c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
 8008776:	e73d      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800877e:	3320      	adds	r3, #32
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b02      	cmp	r3, #2
 8008784:	d11d      	bne.n	80087c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x22c>
        bytes_ = data;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800878c:	3324      	adds	r3, #36	; 0x24
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	601a      	str	r2, [r3, #0]
        index_ = 0;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008798:	332c      	adds	r3, #44	; 0x2c
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
        mode_++;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80087a4:	3320      	adds	r3, #32
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80087b0:	3320      	adds	r3, #32
 80087b2:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80087ba:	3330      	adds	r3, #48	; 0x30
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	e718      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80087c8:	3320      	adds	r3, #32
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d118      	bne.n	8008802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x26c>
        bytes_ += data << 8;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80087d6:	3324      	adds	r3, #36	; 0x24
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	441a      	add	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80087e6:	3324      	adds	r3, #36	; 0x24
 80087e8:	601a      	str	r2, [r3, #0]
        mode_++;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80087f0:	3320      	adds	r3, #32
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80087fc:	3320      	adds	r3, #32
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	e6f8      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008808:	3320      	adds	r3, #32
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b04      	cmp	r3, #4
 800880e:	d11e      	bne.n	800884e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2b8>
        if ((checksum_ % 256) == 255)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008816:	3330      	adds	r3, #48	; 0x30
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	425a      	negs	r2, r3
 800881c:	b2db      	uxtb	r3, r3
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	bf58      	it	pl
 8008822:	4253      	negpl	r3, r2
 8008824:	2bff      	cmp	r3, #255	; 0xff
 8008826:	d10b      	bne.n	8008840 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2aa>
          mode_++;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800882e:	3320      	adds	r3, #32
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	1c5a      	adds	r2, r3, #1
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800883a:	3320      	adds	r3, #32
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e6d9      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008846:	3320      	adds	r3, #32
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	e6d2      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008854:	3320      	adds	r3, #32
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b05      	cmp	r3, #5
 800885a:	d117      	bne.n	800888c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2f6>
        topic_ = data;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008862:	3328      	adds	r3, #40	; 0x28
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	601a      	str	r2, [r3, #0]
        mode_++;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800886e:	3320      	adds	r3, #32
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800887a:	3320      	adds	r3, #32
 800887c:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008884:	3330      	adds	r3, #48	; 0x30
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	e6b3      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008892:	3320      	adds	r3, #32
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b06      	cmp	r3, #6
 8008898:	d121      	bne.n	80088de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x348>
        topic_ += data << 8;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80088a0:	3328      	adds	r3, #40	; 0x28
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	441a      	add	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80088b0:	3328      	adds	r3, #40	; 0x28
 80088b2:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80088ba:	3320      	adds	r3, #32
 80088bc:	2207      	movs	r2, #7
 80088be:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80088c6:	3324      	adds	r3, #36	; 0x24
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f47f ae92 	bne.w	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80088d6:	3320      	adds	r3, #32
 80088d8:	2208      	movs	r2, #8
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e68a      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80088e4:	3320      	adds	r3, #32
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	f47f ae83 	bne.w	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80088f4:	3320      	adds	r3, #32
 80088f6:	2200      	movs	r2, #0
 80088f8:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008900:	3330      	adds	r3, #48	; 0x30
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	425a      	negs	r2, r3
 8008906:	b2db      	uxtb	r3, r3
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	bf58      	it	pl
 800890c:	4253      	negpl	r3, r2
 800890e:	2bff      	cmp	r3, #255	; 0xff
 8008910:	f47f ae70 	bne.w	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800891a:	3328      	adds	r3, #40	; 0x28
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d114      	bne.n	800894c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x3b6>
            requestSyncTime();
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f99c 	bl	8008c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f9b6 	bl	8008c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008934:	3338      	adds	r3, #56	; 0x38
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008940:	333c      	adds	r3, #60	; 0x3c
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 8008946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800894a:	e07e      	b.n	8008a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4b4>
          else if (topic_ == TopicInfo::ID_TIME)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008952:	3328      	adds	r3, #40	; 0x28
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b0a      	cmp	r3, #10
 8008958:	d106      	bne.n	8008968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x3d2>
            syncTime(message_in);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3318      	adds	r3, #24
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fa7d 	bl	8008e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh>
 8008966:	e645      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800896e:	3328      	adds	r3, #40	; 0x28
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b06      	cmp	r3, #6
 8008974:	d110      	bne.n	8008998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x402>
            req_param_resp.deserialize(message_in);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800897c:	3308      	adds	r3, #8
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	3218      	adds	r2, #24
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f7f9 f9b2 	bl	8001cee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008990:	3304      	adds	r3, #4
 8008992:	2201      	movs	r2, #1
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e62d      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800899e:	3328      	adds	r3, #40	; 0x28
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b0b      	cmp	r3, #11
 80089a4:	d106      	bne.n	80089b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x41e>
            configured_ = false;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80089ac:	3334      	adds	r3, #52	; 0x34
 80089ae:	2200      	movs	r2, #0
 80089b0:	701a      	strb	r2, [r3, #0]
 80089b2:	e61f      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80089ba:	3328      	adds	r3, #40	; 0x28
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3b64      	subs	r3, #100	; 0x64
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f43f ae11 	beq.w	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80089d8:	3328      	adds	r3, #40	; 0x28
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3b64      	subs	r3, #100	; 0x64
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	6858      	ldr	r0, [r3, #4]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80089f0:	3328      	adds	r3, #40	; 0x28
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3b64      	subs	r3, #100	; 0x64
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	3218      	adds	r2, #24
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	4798      	blx	r3
    while (true)
 8008a0e:	e5f1      	b.n	80085f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x5e>
        break;
 8008a10:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008a18:	3334      	adds	r3, #52	; 0x34
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d013      	beq.n	8008a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4b2>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008a26:	3338      	adds	r3, #56	; 0x38
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d908      	bls.n	8008a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4b2>
      requestSyncTime();
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f912 	bl	8008c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008a42:	3338      	adds	r3, #56	; 0x38
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 8008a48:	2300      	movs	r3, #0
  }
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8initNodeEv>:
  void initNode()
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f9 fd5a 	bl	8002518 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008a6a:	3320      	adds	r3, #32
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008a76:	3324      	adds	r3, #36	; 0x24
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]
    index_ = 0;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008a82:	332c      	adds	r3, #44	; 0x2c
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008a8e:	3328      	adds	r3, #40	; 0x28
 8008a90:	2200      	movs	r2, #0
 8008a92:	601a      	str	r2, [r3, #0]
  };
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b18      	cmp	r3, #24
 8008aae:	dc1b      	bgt.n	8008ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10e      	bne.n	8008ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	440b      	add	r3, r1
 8008ad0:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	605a      	str	r2, [r3, #4]
        return true;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e004      	b.n	8008aea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	e7e0      	b.n	8008aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8008ae8:	2300      	movs	r3, #0
  }
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008b00:	2300      	movs	r3, #0
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b18      	cmp	r3, #24
 8008b08:	dc1b      	bgt.n	8008b42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_+0x4c>
      if (subscribers[i] == 0) // empty slot
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10e      	bne.n	8008b3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_+0x44>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	605a      	str	r2, [r3, #4]
        return true;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e004      	b.n	8008b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	e7e0      	b.n	8008b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs5EmptyEvEEEEbRT_+0xe>
    return false;
 8008b42:	2300      	movs	r3, #0
  }
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f9ca 	bl	8008ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>
  }
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3nowEv>:
  Time now()
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7f9 fcf8 	bl	8002570 <_ZN13STM32Hardware4timeEv>
 8008b80:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7f8 fb5d 	bl	8001242 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4a13      	ldr	r2, [pc, #76]	; (8008bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3nowEv+0x6c>)
 8008b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b90:	099a      	lsrs	r2, r3, #6
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	441a      	add	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	4b0e      	ldr	r3, [pc, #56]	; (8008bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3nowEv+0x6c>)
 8008ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ba4:	099b      	lsrs	r3, r3, #6
 8008ba6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008baa:	fb01 f303 	mul.w	r3, r1, r3
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	; (8008bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3nowEv+0x70>)
 8008bb2:	fb02 f203 	mul.w	r2, r2, r3
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	441a      	add	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fea8 	bl	800991c <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8008bcc:	bf00      	nop
  }
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	10624dd3 	.word	0x10624dd3
 8008bdc:	000f4240 	.word	0x000f4240

08008be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8getParamEPKcPPcii>:
        logwarn("Failed to get param: length mismatch");
      }
    }
    return false;
  }
  bool getParam(const char* name, char** param, int length = 1, int timeout = 1000)
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	603b      	str	r3, [r7, #0]
  {
    if (requestParam(name, timeout))
 8008bee:	6a3a      	ldr	r2, [r7, #32]
 8008bf0:	68b9      	ldr	r1, [r7, #8]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 f99c 	bl	8008f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE12requestParamEPKci>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d028      	beq.n	8008c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8getParamEPKcPPcii+0x70>
    {
      if (length == req_param_resp.strings_length)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008c04:	3324      	adds	r3, #36	; 0x24
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d11c      	bne.n	8008c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8getParamEPKcPPcii+0x68>
      {
        //copy it over
        for (int i = 0; i < length; i++)
 8008c0e:	2300      	movs	r3, #0
 8008c10:	617b      	str	r3, [r7, #20]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	da14      	bge.n	8008c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8getParamEPKcPPcii+0x64>
          strcpy(param[i], req_param_resp.strings[i]);
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	4413      	add	r3, r2
 8008c22:	6818      	ldr	r0, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008c2a:	332c      	adds	r3, #44	; 0x2c
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4619      	mov	r1, r3
 8008c38:	f00b fc9c 	bl	8014574 <strcpy>
        for (int i = 0; i < length; i++)
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	e7e6      	b.n	8008c12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8getParamEPKcPPcii+0x32>
        return true;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e004      	b.n	8008c52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8getParamEPKcPPcii+0x72>
      }
      else
      {
        logwarn("Failed to get param: length mismatch");
 8008c48:	4904      	ldr	r1, [pc, #16]	; (8008c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8getParamEPKcPPcii+0x7c>)
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 f9bc 	bl	8008fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7logwarnEPKc>
      }
    }
    return false;
 8008c50:	2300      	movs	r3, #0
  }
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	08015240 	.word	0x08015240

08008c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8008c68:	f107 030c 	add.w	r3, r7, #12
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7f8 fb09 	bl	8001284 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f107 020c 	add.w	r2, r7, #12
 8008c7c:	210a      	movs	r1, #10
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	4798      	blx	r3
    rt_time = hardware_.time();
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f9 fc72 	bl	8002570 <_ZN13STM32Hardware4timeEv>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	609a      	str	r2, [r3, #8]
  }
 8008c92:	bf00      	nop
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv>:
  void negotiateTopics()
 8008c9a:	b590      	push	{r4, r7, lr}
 8008c9c:	b08b      	sub	sp, #44	; 0x2c
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8008ca2:	f107 030c 	add.w	r3, r7, #12
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7f8 fbdc 	bl	8001464 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8008cac:	2300      	movs	r3, #0
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	2b18      	cmp	r3, #24
 8008cb4:	dc5b      	bgt.n	8008d6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xd4>
      if (publishers[i] != 0) // non-empty slot
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cba:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8008cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d04f      	beq.n	8008d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xcc>
        ti.topic_id = publishers[i]->id_;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cca:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8008cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cdc:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cec:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8008cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf4:	6859      	ldr	r1, [r3, #4]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfa:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8008cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3308      	adds	r3, #8
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4608      	mov	r0, r1
 8008d0c:	4798      	blx	r3
 8008d0e:	4603      	mov	r3, r0
 8008d10:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d16:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8008d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1e:	6859      	ldr	r1, [r3, #4]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d24:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8008d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	330c      	adds	r3, #12
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4608      	mov	r0, r1
 8008d36:	4798      	blx	r3
 8008d38:	4603      	mov	r3, r0
 8008d3a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8008d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d40:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681c      	ldr	r4, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4c:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8008d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7f9 f982 	bl	800205e <_ZN3ros9Publisher15getEndpointTypeEv>
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	f107 030c 	add.w	r3, r7, #12
 8008d60:	461a      	mov	r2, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	3301      	adds	r3, #1
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d6c:	e7a0      	b.n	8008cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8008d6e:	2300      	movs	r3, #0
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	2b18      	cmp	r3, #24
 8008d76:	dc68      	bgt.n	8008e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x1b0>
      if (subscribers[i] != 0) // non-empty slot
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d05b      	beq.n	8008e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x1a8>
        ti.topic_id = subscribers[i]->id_;
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	6859      	ldr	r1, [r3, #4]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	4798      	blx	r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	6859      	ldr	r1, [r3, #4]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	330c      	adds	r3, #12
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	4798      	blx	r3
 8008e00:	4603      	mov	r3, r0
 8008e02:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8008e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e08:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681c      	ldr	r4, [r3, #0]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	6859      	ldr	r1, [r3, #4]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4608      	mov	r0, r1
 8008e34:	4798      	blx	r3
 8008e36:	4601      	mov	r1, r0
 8008e38:	f107 030c 	add.w	r3, r7, #12
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	3301      	adds	r3, #1
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
 8008e48:	e793      	b.n	8008d72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xd8>
    configured_ = true;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008e50:	3334      	adds	r3, #52	; 0x34
 8008e52:	2201      	movs	r2, #1
 8008e54:	701a      	strb	r2, [r3, #0]
  }
 8008e56:	bf00      	nop
 8008e58:	372c      	adds	r7, #44	; 0x2c
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd90      	pop	{r4, r7, pc}
	...

08008e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8008e6a:	f107 0308 	add.w	r3, r7, #8
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7f8 fa08 	bl	8001284 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7f9 fb79 	bl	8002570 <_ZN13STM32Hardware4timeEv>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8008e88:	f107 0308 	add.w	r3, r7, #8
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7f8 fa68 	bl	8001364 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	4915      	ldr	r1, [pc, #84]	; (8008ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8008e9a:	fba1 1303 	umull	r1, r3, r1, r3
 8008e9e:	099b      	lsrs	r3, r3, #6
 8008ea0:	4413      	add	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8008ea4:	6939      	ldr	r1, [r7, #16]
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	4b11      	ldr	r3, [pc, #68]	; (8008ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8008eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8008eae:	099b      	lsrs	r3, r3, #6
 8008eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008eb4:	fb00 f303 	mul.w	r3, r0, r3
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	4a0e      	ldr	r2, [pc, #56]	; (8008ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8008ebc:	fb02 f303 	mul.w	r3, r2, r3
 8008ec0:	440b      	add	r3, r1
 8008ec2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8008ec4:	f107 0308 	add.w	r3, r7, #8
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f933 	bl	8009138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7f9 fb4a 	bl	8002570 <_ZN13STM32Hardware4timeEv>
 8008edc:	4602      	mov	r2, r0
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008ee4:	333c      	adds	r3, #60	; 0x3c
 8008ee6:	601a      	str	r2, [r3, #0]
  }
 8008ee8:	bf00      	nop
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	10624dd3 	.word	0x10624dd3
 8008ef4:	000f4240 	.word	0x000f4240

08008ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	460b      	mov	r3, r1
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8008f06:	f107 0314 	add.w	r3, r7, #20
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7f8 fc6e 	bl	80017ec <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f107 0214 	add.w	r2, r7, #20
 8008f22:	2107      	movs	r1, #7
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	4798      	blx	r3
  }
 8008f28:	bf00      	nop
 8008f2a:	3720      	adds	r7, #32
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE12requestParamEPKci>:
  bool requestParam(const char * name, int time_out =  1000)
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
    param_recieved = false;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008f42:	3304      	adds	r3, #4
 8008f44:	2200      	movs	r2, #0
 8008f46:	701a      	strb	r2, [r3, #0]
    rosserial_msgs::RequestParamRequest req;
 8008f48:	f107 0314 	add.w	r3, r7, #20
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7f8 fcfd 	bl	800194c <_ZN14rosserial_msgs19RequestParamRequestC1Ev>
    req.name  = (char*)name;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	61bb      	str	r3, [r7, #24]
    publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f107 0214 	add.w	r2, r7, #20
 8008f60:	2106      	movs	r1, #6
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	4798      	blx	r3
    uint32_t end_time = hardware_.time() + time_out;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3304      	adds	r3, #4
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7f9 fb00 	bl	8002570 <_ZN13STM32Hardware4timeEv>
 8008f70:	4602      	mov	r2, r0
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4413      	add	r3, r2
 8008f76:	61fb      	str	r3, [r7, #28]
    while (!param_recieved)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008f7e:	3304      	adds	r3, #4
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d119      	bne.n	8008fba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE12requestParamEPKci+0x8a>
      spinOnce();
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	4798      	blx	r3
      if (hardware_.time() > end_time)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3304      	adds	r3, #4
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7f9 faea 	bl	8002570 <_ZN13STM32Hardware4timeEv>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	bf34      	ite	cc
 8008fa4:	2301      	movcc	r3, #1
 8008fa6:	2300      	movcs	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0e4      	beq.n	8008f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE12requestParamEPKci+0x48>
        logwarn("Failed to get param: timeout expired");
 8008fae:	4905      	ldr	r1, [pc, #20]	; (8008fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE12requestParamEPKci+0x94>)
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f809 	bl	8008fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7logwarnEPKc>
        return false;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e000      	b.n	8008fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE12requestParamEPKci+0x8c>
    return true;
 8008fba:	2301      	movs	r3, #1
  }
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3720      	adds	r7, #32
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	08015268 	.word	0x08015268

08008fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7logwarnEPKc>:
  void logwarn(const char *msg)
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::WARN, msg);
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	2102      	movs	r1, #2
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff ff8e 	bl	8008ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>
  }
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b63      	cmp	r3, #99	; 0x63
 8008ff4:	dd0b      	ble.n	800900e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008ffc:	3334      	adds	r3, #52	; 0x34
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f083 0301 	eor.w	r3, r3, #1
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800900a:	2300      	movs	r3, #0
 800900c:	e08e      	b.n	800912c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x148>
    int l = msg->serialize(message_out + 7);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901a:	3318      	adds	r3, #24
 800901c:	3307      	adds	r3, #7
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	4790      	blx	r2
 8009024:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800902c:	3318      	adds	r3, #24
 800902e:	22ff      	movs	r2, #255	; 0xff
 8009030:	701a      	strb	r2, [r3, #0]
    message_out[1] = PROTOCOL_VER;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009038:	3319      	adds	r3, #25
 800903a:	22fe      	movs	r2, #254	; 0xfe
 800903c:	701a      	strb	r2, [r3, #0]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	b2da      	uxtb	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009048:	331a      	adds	r3, #26
 800904a:	701a      	strb	r2, [r3, #0]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	b29b      	uxth	r3, r3
 8009050:	121b      	asrs	r3, r3, #8
 8009052:	b2da      	uxtb	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905a:	331b      	adds	r3, #27
 800905c:	701a      	strb	r2, [r3, #0]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009064:	331a      	adds	r3, #26
 8009066:	781a      	ldrb	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906e:	331b      	adds	r3, #27
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	4413      	add	r3, r2
 8009074:	b2db      	uxtb	r3, r3
 8009076:	43db      	mvns	r3, r3
 8009078:	b2da      	uxtb	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009080:	331c      	adds	r3, #28
 8009082:	701a      	strb	r2, [r3, #0]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	b2da      	uxtb	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800908e:	331d      	adds	r3, #29
 8009090:	701a      	strb	r2, [r3, #0]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	b21b      	sxth	r3, r3
 8009096:	121b      	asrs	r3, r3, #8
 8009098:	b2da      	uxtb	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a0:	331e      	adds	r3, #30
 80090a2:	701a      	strb	r2, [r3, #0]
    int chk = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80090a8:	2305      	movs	r3, #5
 80090aa:	61bb      	str	r3, [r7, #24]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	3307      	adds	r3, #7
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	da0e      	bge.n	80090d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xf0>
      chk += message_out[i];
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c0:	3318      	adds	r3, #24
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	461a      	mov	r2, r3
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	4413      	add	r3, r2
 80090ca:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	3301      	adds	r3, #1
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	e7eb      	b.n	80090ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xc8>
    l += 7;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	3307      	adds	r3, #7
 80090d8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	425a      	negs	r2, r3
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	b2d2      	uxtb	r2, r2
 80090e2:	bf58      	it	pl
 80090e4:	4253      	negpl	r3, r2
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	1c59      	adds	r1, r3, #1
 80090ec:	6179      	str	r1, [r7, #20]
 80090ee:	43d2      	mvns	r2, r2
 80090f0:	b2d1      	uxtb	r1, r2
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090fa:	3318      	adds	r3, #24
 80090fc:	460a      	mov	r2, r1
 80090fe:	701a      	strb	r2, [r3, #0]
    if (l <= OUTPUT_SIZE)
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009106:	dc0b      	bgt.n	8009120 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13c>
      hardware_.write(message_out, l);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	1d18      	adds	r0, r3, #4
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009112:	3318      	adds	r3, #24
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	4619      	mov	r1, r3
 8009118:	f7f9 fa19 	bl	800254e <_ZN13STM32Hardware5writeEPhi>
      return l;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	e005      	b.n	800912c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x148>
      logerror("Message from device dropped: message larger than buffer.");
 8009120:	4904      	ldr	r1, [pc, #16]	; (8009134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x150>)
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f000 f83c 	bl	80091a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8009128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 800912c:	4618      	mov	r0, r3
 800912e:	3720      	adds	r7, #32
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	08015290 	.word	0x08015290

08009138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3304      	adds	r3, #4
 8009146:	4618      	mov	r0, r3
 8009148:	f7f9 fa12 	bl	8002570 <_ZN13STM32Hardware4timeEv>
 800914c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	490f      	ldr	r1, [pc, #60]	; (8009194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE+0x5c>)
 8009156:	fba1 1303 	umull	r1, r3, r1, r3
 800915a:	099b      	lsrs	r3, r3, #6
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	1e5a      	subs	r2, r3, #1
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	6859      	ldr	r1, [r3, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE+0x5c>)
 800916c:	fba3 0302 	umull	r0, r3, r3, r2
 8009170:	099b      	lsrs	r3, r3, #6
 8009172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009176:	fb00 f303 	mul.w	r3, r0, r3
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	4a06      	ldr	r2, [pc, #24]	; (8009198 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE+0x60>)
 800917e:	fb02 f303 	mul.w	r3, r2, r3
 8009182:	1aca      	subs	r2, r1, r3
 8009184:	4b05      	ldr	r3, [pc, #20]	; (800919c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE+0x64>)
 8009186:	4413      	add	r3, r2
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6113      	str	r3, [r2, #16]
  }
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	10624dd3 	.word	0x10624dd3
 8009198:	000f4240 	.word	0x000f4240
 800919c:	3b9aca00 	.word	0x3b9aca00

080091a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8logerrorEPKc>:
  void logerror(const char*msg)
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
    log(rosserial_msgs::Log::ERROR, msg);
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	2103      	movs	r1, #3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff fea2 	bl	8008ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>
  }
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <_Z41__static_initialization_and_destruction_0ii>:
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d144      	bne.n	8009256 <_Z41__static_initialization_and_destruction_0ii+0x9a>
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d13f      	bne.n	8009256 <_Z41__static_initialization_and_destruction_0ii+0x9a>
SerialClass serial(huart2);
 80091d6:	4922      	ldr	r1, [pc, #136]	; (8009260 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80091d8:	4822      	ldr	r0, [pc, #136]	; (8009264 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80091da:	f7f8 ff4c 	bl	8002076 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
char log_msg[100];

/*
 * ROS NodeHandle.
 */
ros::NodeHandle nh;
 80091de:	4822      	ldr	r0, [pc, #136]	; (8009268 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80091e0:	f7ff f8e4 	bl	80083ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev>
ros::Time current_time;
 80091e4:	4821      	ldr	r0, [pc, #132]	; (800926c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80091e6:	f7f8 f82c 	bl	8001242 <_ZN3ros4TimeC1Ev>
char joint_state_header_frame_id[30];

/*
 * Subscribers.
 */
ros::Subscriber<geometry_msgs::Twist> cmd_vel_sub("cmd_vel", commandVelocityCallback);
 80091ea:	2301      	movs	r3, #1
 80091ec:	4a20      	ldr	r2, [pc, #128]	; (8009270 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80091ee:	4921      	ldr	r1, [pc, #132]	; (8009274 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80091f0:	4821      	ldr	r0, [pc, #132]	; (8009278 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80091f2:	f7ff f979 	bl	80084e8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Empty> reset_sub("reset", resetCallback);
 80091f6:	2301      	movs	r3, #1
 80091f8:	4a20      	ldr	r2, [pc, #128]	; (800927c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80091fa:	4921      	ldr	r1, [pc, #132]	; (8009280 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80091fc:	4821      	ldr	r0, [pc, #132]	; (8009284 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80091fe:	f7ff f997 	bl	8008530 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>

/*
 * Publishers.
 */
sensor_msgs::Imu imu_msg;
 8009202:	4821      	ldr	r0, [pc, #132]	; (8009288 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009204:	f7fa fd82 	bl	8003d0c <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher imu_pub("imu", &imu_msg);
 8009208:	2300      	movs	r3, #0
 800920a:	4a1f      	ldr	r2, [pc, #124]	; (8009288 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800920c:	491f      	ldr	r1, [pc, #124]	; (800928c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800920e:	4820      	ldr	r0, [pc, #128]	; (8009290 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8009210:	f7f8 fefa 	bl	8002008 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

geometry_msgs::Twist cmd_vel_motor_msg;
 8009214:	481f      	ldr	r0, [pc, #124]	; (8009294 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8009216:	f7fc f90b 	bl	8005430 <_ZN13geometry_msgs5TwistC1Ev>
ros::Publisher cmd_vel_motor_pub("cmd_vel_motor", &cmd_vel_motor_msg);
 800921a:	2300      	movs	r3, #0
 800921c:	4a1d      	ldr	r2, [pc, #116]	; (8009294 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800921e:	491e      	ldr	r1, [pc, #120]	; (8009298 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8009220:	481e      	ldr	r0, [pc, #120]	; (800929c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8009222:	f7f8 fef1 	bl	8002008 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

nav_msgs::Odometry odom;
 8009226:	481e      	ldr	r0, [pc, #120]	; (80092a0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8009228:	f7fd fcda 	bl	8006be0 <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher odom_pub("odom", &odom);
 800922c:	2300      	movs	r3, #0
 800922e:	4a1c      	ldr	r2, [pc, #112]	; (80092a0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8009230:	491c      	ldr	r1, [pc, #112]	; (80092a4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8009232:	481d      	ldr	r0, [pc, #116]	; (80092a8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8009234:	f7f8 fee8 	bl	8002008 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

sensor_msgs::JointState joint_states;
 8009238:	481c      	ldr	r0, [pc, #112]	; (80092ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800923a:	f7fb fa67 	bl	800470c <_ZN11sensor_msgs10JointStateC1Ev>
ros::Publisher joint_states_pub("joint_states", &joint_states);
 800923e:	2300      	movs	r3, #0
 8009240:	4a1a      	ldr	r2, [pc, #104]	; (80092ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8009242:	491b      	ldr	r1, [pc, #108]	; (80092b0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8009244:	481b      	ldr	r0, [pc, #108]	; (80092b4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8009246:	f7f8 fedf 	bl	8002008 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>

/*
 * Transform Broadcaster.
 */
geometry_msgs::TransformStamped odom_tf;
 800924a:	481b      	ldr	r0, [pc, #108]	; (80092b8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800924c:	f7fc f9f8 	bl	8005640 <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tf_broadcaster;
 8009250:	481a      	ldr	r0, [pc, #104]	; (80092bc <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8009252:	f7fc fc1b 	bl	8005a8c <_ZN2tf20TransformBroadcasterC1Ev>
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20000154 	.word	0x20000154
 8009264:	20000254 	.word	0x20000254
 8009268:	200022c8 	.word	0x200022c8
 800926c:	200043f8 	.word	0x200043f8
 8009270:	08006fb9 	.word	0x08006fb9
 8009274:	080152cc 	.word	0x080152cc
 8009278:	20004490 	.word	0x20004490
 800927c:	08007055 	.word	0x08007055
 8009280:	080152d4 	.word	0x080152d4
 8009284:	200044f0 	.word	0x200044f0
 8009288:	20004508 	.word	0x20004508
 800928c:	080152dc 	.word	0x080152dc
 8009290:	20004660 	.word	0x20004660
 8009294:	20004678 	.word	0x20004678
 8009298:	080152e0 	.word	0x080152e0
 800929c:	200046c0 	.word	0x200046c0
 80092a0:	200046d8 	.word	0x200046d8
 80092a4:	08015124 	.word	0x08015124
 80092a8:	200049e0 	.word	0x200049e0
 80092ac:	200049f8 	.word	0x200049f8
 80092b0:	080152f0 	.word	0x080152f0
 80092b4:	20004a50 	.word	0x20004a50
 80092b8:	20004a68 	.word	0x20004a68
 80092bc:	20004ad8 	.word	0x20004ad8

080092c0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	330c      	adds	r3, #12
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7f9 f979 	bl	80025c8 <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	320c      	adds	r2, #12
 80092de:	4610      	mov	r0, r2
 80092e0:	4798      	blx	r3
  }
 80092e2:	bf00      	nop
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	695b      	ldr	r3, [r3, #20]
  }
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	330c      	adds	r3, #12
 800930e:	4618      	mov	r0, r3
 8009310:	f7f9 f968 	bl	80025e4 <_ZN8std_msgs5Empty7getTypeEv>
 8009314:	4603      	mov	r3, r0
  }
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	330c      	adds	r3, #12
 800932a:	4618      	mov	r0, r3
 800932c:	f7f9 f968 	bl	8002600 <_ZN8std_msgs5Empty6getMD5Ev>
 8009330:	4603      	mov	r3, r0
  }
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3310      	adds	r3, #16
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f7fc f8b2 	bl	80054b4 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	3210      	adds	r2, #16
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
  }
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3310      	adds	r3, #16
 8009388:	4618      	mov	r0, r3
 800938a:	f7fc f8b9 	bl	8005500 <_ZN13geometry_msgs5Twist7getTypeEv>
 800938e:	4603      	mov	r3, r0
  }
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3310      	adds	r3, #16
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fc f8b9 	bl	800551c <_ZN13geometry_msgs5Twist6getMD5Ev>
 80093aa:	4603      	mov	r3, r0
  }
 80093ac:	4618      	mov	r0, r3
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <_GLOBAL__sub_I_huart2>:
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093bc:	2001      	movs	r0, #1
 80093be:	f7ff fefd 	bl	80091bc <_Z41__static_initialization_and_destruction_0ii>
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093ca:	2300      	movs	r3, #0
 80093cc:	607b      	str	r3, [r7, #4]
 80093ce:	4b10      	ldr	r3, [pc, #64]	; (8009410 <HAL_MspInit+0x4c>)
 80093d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d2:	4a0f      	ldr	r2, [pc, #60]	; (8009410 <HAL_MspInit+0x4c>)
 80093d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093d8:	6453      	str	r3, [r2, #68]	; 0x44
 80093da:	4b0d      	ldr	r3, [pc, #52]	; (8009410 <HAL_MspInit+0x4c>)
 80093dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093e2:	607b      	str	r3, [r7, #4]
 80093e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80093e6:	2300      	movs	r3, #0
 80093e8:	603b      	str	r3, [r7, #0]
 80093ea:	4b09      	ldr	r3, [pc, #36]	; (8009410 <HAL_MspInit+0x4c>)
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	4a08      	ldr	r2, [pc, #32]	; (8009410 <HAL_MspInit+0x4c>)
 80093f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093f4:	6413      	str	r3, [r2, #64]	; 0x40
 80093f6:	4b06      	ldr	r3, [pc, #24]	; (8009410 <HAL_MspInit+0x4c>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009402:	bf00      	nop
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	40023800 	.word	0x40023800

08009414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0
	return 1;
 8009418:	2301      	movs	r3, #1
}
 800941a:	4618      	mov	r0, r3
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <_kill>:

int _kill(int pid, int sig)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800942e:	f00a ff7f 	bl	8014330 <__errno>
 8009432:	4602      	mov	r2, r0
 8009434:	2316      	movs	r3, #22
 8009436:	6013      	str	r3, [r2, #0]
	return -1;
 8009438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800943c:	4618      	mov	r0, r3
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <_exit>:

void _exit (int status)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800944c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff ffe7 	bl	8009424 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009456:	e7fe      	b.n	8009456 <_exit+0x12>

08009458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009460:	4a14      	ldr	r2, [pc, #80]	; (80094b4 <_sbrk+0x5c>)
 8009462:	4b15      	ldr	r3, [pc, #84]	; (80094b8 <_sbrk+0x60>)
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800946c:	4b13      	ldr	r3, [pc, #76]	; (80094bc <_sbrk+0x64>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009474:	4b11      	ldr	r3, [pc, #68]	; (80094bc <_sbrk+0x64>)
 8009476:	4a12      	ldr	r2, [pc, #72]	; (80094c0 <_sbrk+0x68>)
 8009478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800947a:	4b10      	ldr	r3, [pc, #64]	; (80094bc <_sbrk+0x64>)
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4413      	add	r3, r2
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	429a      	cmp	r2, r3
 8009486:	d207      	bcs.n	8009498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009488:	f00a ff52 	bl	8014330 <__errno>
 800948c:	4602      	mov	r2, r0
 800948e:	230c      	movs	r3, #12
 8009490:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8009492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009496:	e009      	b.n	80094ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009498:	4b08      	ldr	r3, [pc, #32]	; (80094bc <_sbrk+0x64>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800949e:	4b07      	ldr	r3, [pc, #28]	; (80094bc <_sbrk+0x64>)
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4413      	add	r3, r2
 80094a6:	4a05      	ldr	r2, [pc, #20]	; (80094bc <_sbrk+0x64>)
 80094a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80094aa:	68fb      	ldr	r3, [r7, #12]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	20020000 	.word	0x20020000
 80094b8:	00000400 	.word	0x00000400
 80094bc:	20004c14 	.word	0x20004c14
 80094c0:	20008dc8 	.word	0x20008dc8

080094c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80094c4:	b480      	push	{r7}
 80094c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80094c8:	4b08      	ldr	r3, [pc, #32]	; (80094ec <SystemInit+0x28>)
 80094ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ce:	4a07      	ldr	r2, [pc, #28]	; (80094ec <SystemInit+0x28>)
 80094d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80094d8:	4b04      	ldr	r3, [pc, #16]	; (80094ec <SystemInit+0x28>)
 80094da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80094de:	609a      	str	r2, [r3, #8]
#endif
}
 80094e0:	bf00      	nop
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	e000ed00 	.word	0xe000ed00

080094f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08c      	sub	sp, #48	; 0x30
 80094f4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80094f6:	f107 030c 	add.w	r3, r7, #12
 80094fa:	2224      	movs	r2, #36	; 0x24
 80094fc:	2100      	movs	r1, #0
 80094fe:	4618      	mov	r0, r3
 8009500:	f00a ff4b 	bl	801439a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009504:	1d3b      	adds	r3, r7, #4
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800950c:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <MX_TIM2_Init+0x90>)
 800950e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009514:	4b1a      	ldr	r3, [pc, #104]	; (8009580 <MX_TIM2_Init+0x90>)
 8009516:	2200      	movs	r2, #0
 8009518:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800951a:	4b19      	ldr	r3, [pc, #100]	; (8009580 <MX_TIM2_Init+0x90>)
 800951c:	2200      	movs	r2, #0
 800951e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8009520:	4b17      	ldr	r3, [pc, #92]	; (8009580 <MX_TIM2_Init+0x90>)
 8009522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8009528:	4b15      	ldr	r3, [pc, #84]	; (8009580 <MX_TIM2_Init+0x90>)
 800952a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800952e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009530:	4b13      	ldr	r3, [pc, #76]	; (8009580 <MX_TIM2_Init+0x90>)
 8009532:	2280      	movs	r2, #128	; 0x80
 8009534:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009536:	2303      	movs	r3, #3
 8009538:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800953a:	2300      	movs	r3, #0
 800953c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800953e:	2301      	movs	r3, #1
 8009540:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009542:	2300      	movs	r3, #0
 8009544:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800954a:	2300      	movs	r3, #0
 800954c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800954e:	2301      	movs	r3, #1
 8009550:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009552:	2300      	movs	r3, #0
 8009554:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_TIM_Encoder_Init(&htim2, &sConfig);
 800955a:	f107 030c 	add.w	r3, r7, #12
 800955e:	4619      	mov	r1, r3
 8009560:	4807      	ldr	r0, [pc, #28]	; (8009580 <MX_TIM2_Init+0x90>)
 8009562:	f006 f98f 	bl	800f884 <HAL_TIM_Encoder_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009566:	2300      	movs	r3, #0
 8009568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800956a:	2300      	movs	r3, #0
 800956c:	60bb      	str	r3, [r7, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) ;
 800956e:	1d3b      	adds	r3, r7, #4
 8009570:	4619      	mov	r1, r3
 8009572:	4803      	ldr	r0, [pc, #12]	; (8009580 <MX_TIM2_Init+0x90>)
 8009574:	f006 fede 	bl	8010334 <HAL_TIMEx_MasterConfigSynchronization>

}
 8009578:	bf00      	nop
 800957a:	3730      	adds	r7, #48	; 0x30
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	20008ca0 	.word	0x20008ca0

08009584 <MX_TIM1_Init>:
/* tim1 init function */
void MX_TIM1_Init(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b096      	sub	sp, #88	; 0x58
 8009588:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800958a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800958e:	2200      	movs	r2, #0
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	605a      	str	r2, [r3, #4]
 8009594:	609a      	str	r2, [r3, #8]
 8009596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800959c:	2200      	movs	r2, #0
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80095a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095a6:	2200      	movs	r2, #0
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	605a      	str	r2, [r3, #4]
 80095ac:	609a      	str	r2, [r3, #8]
 80095ae:	60da      	str	r2, [r3, #12]
 80095b0:	611a      	str	r2, [r3, #16]
 80095b2:	615a      	str	r2, [r3, #20]
 80095b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80095b6:	1d3b      	adds	r3, r7, #4
 80095b8:	2220      	movs	r2, #32
 80095ba:	2100      	movs	r1, #0
 80095bc:	4618      	mov	r0, r3
 80095be:	f00a feec 	bl	801439a <memset>

  htim1.Instance = TIM1;
 80095c2:	4b33      	ldr	r3, [pc, #204]	; (8009690 <MX_TIM1_Init+0x10c>)
 80095c4:	4a33      	ldr	r2, [pc, #204]	; (8009694 <MX_TIM1_Init+0x110>)
 80095c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80095c8:	4b31      	ldr	r3, [pc, #196]	; (8009690 <MX_TIM1_Init+0x10c>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095ce:	4b30      	ldr	r3, [pc, #192]	; (8009690 <MX_TIM1_Init+0x10c>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16799;
 80095d4:	4b2e      	ldr	r3, [pc, #184]	; (8009690 <MX_TIM1_Init+0x10c>)
 80095d6:	f244 129f 	movw	r2, #16799	; 0x419f
 80095da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095dc:	4b2c      	ldr	r3, [pc, #176]	; (8009690 <MX_TIM1_Init+0x10c>)
 80095de:	2200      	movs	r2, #0
 80095e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80095e2:	4b2b      	ldr	r3, [pc, #172]	; (8009690 <MX_TIM1_Init+0x10c>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095e8:	4b29      	ldr	r3, [pc, #164]	; (8009690 <MX_TIM1_Init+0x10c>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	619a      	str	r2, [r3, #24]
  HAL_TIM_Base_Init(&htim1);
 80095ee:	4828      	ldr	r0, [pc, #160]	; (8009690 <MX_TIM1_Init+0x10c>)
 80095f0:	f006 f852 	bl	800f698 <HAL_TIM_Base_Init>


  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80095f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095f8:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 80095fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80095fe:	4619      	mov	r1, r3
 8009600:	4823      	ldr	r0, [pc, #140]	; (8009690 <MX_TIM1_Init+0x10c>)
 8009602:	f006 facf 	bl	800fba4 <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim1);
 8009606:	4822      	ldr	r0, [pc, #136]	; (8009690 <MX_TIM1_Init+0x10c>)
 8009608:	f006 f871 	bl	800f6ee <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800960c:	2300      	movs	r3, #0
 800960e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009610:	2300      	movs	r3, #0
 8009612:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) ;
 8009614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009618:	4619      	mov	r1, r3
 800961a:	481d      	ldr	r0, [pc, #116]	; (8009690 <MX_TIM1_Init+0x10c>)
 800961c:	f006 fe8a 	bl	8010334 <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009620:	2360      	movs	r3, #96	; 0x60
 8009622:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009628:	2300      	movs	r3, #0
 800962a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800962c:	2300      	movs	r3, #0
 800962e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009630:	2300      	movs	r3, #0
 8009632:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009634:	2300      	movs	r3, #0
 8009636:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009638:	2300      	movs	r3, #0
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) ;
 800963c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009640:	2200      	movs	r2, #0
 8009642:	4619      	mov	r1, r3
 8009644:	4812      	ldr	r0, [pc, #72]	; (8009690 <MX_TIM1_Init+0x10c>)
 8009646:	f006 f9e7 	bl	800fa18 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) ;
 800964a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800964e:	2204      	movs	r2, #4
 8009650:	4619      	mov	r1, r3
 8009652:	480f      	ldr	r0, [pc, #60]	; (8009690 <MX_TIM1_Init+0x10c>)
 8009654:	f006 f9e0 	bl	800fa18 <HAL_TIM_PWM_ConfigChannel>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009658:	2300      	movs	r3, #0
 800965a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800965c:	2300      	movs	r3, #0
 800965e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009660:	2300      	movs	r3, #0
 8009662:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009668:	2300      	movs	r3, #0
 800966a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800966c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009670:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009672:	2300      	movs	r3, #0
 8009674:	623b      	str	r3, [r7, #32]
  HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8009676:	1d3b      	adds	r3, r7, #4
 8009678:	4619      	mov	r1, r3
 800967a:	4805      	ldr	r0, [pc, #20]	; (8009690 <MX_TIM1_Init+0x10c>)
 800967c:	f006 fed6 	bl	801042c <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8009680:	4803      	ldr	r0, [pc, #12]	; (8009690 <MX_TIM1_Init+0x10c>)
 8009682:	f000 f911 	bl	80098a8 <HAL_TIM_MspPostInit>

}
 8009686:	bf00      	nop
 8009688:	3758      	adds	r7, #88	; 0x58
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20008c60 	.word	0x20008c60
 8009694:	40010000 	.word	0x40010000

08009698 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08c      	sub	sp, #48	; 0x30
 800969c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800969e:	f107 030c 	add.w	r3, r7, #12
 80096a2:	2224      	movs	r2, #36	; 0x24
 80096a4:	2100      	movs	r1, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f00a fe77 	bl	801439a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80096ac:	1d3b      	adds	r3, r7, #4
 80096ae:	2200      	movs	r2, #0
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80096b4:	4b1c      	ldr	r3, [pc, #112]	; (8009728 <MX_TIM5_Init+0x90>)
 80096b6:	4a1d      	ldr	r2, [pc, #116]	; (800972c <MX_TIM5_Init+0x94>)
 80096b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80096ba:	4b1b      	ldr	r3, [pc, #108]	; (8009728 <MX_TIM5_Init+0x90>)
 80096bc:	2200      	movs	r2, #0
 80096be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096c0:	4b19      	ldr	r3, [pc, #100]	; (8009728 <MX_TIM5_Init+0x90>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80096c6:	4b18      	ldr	r3, [pc, #96]	; (8009728 <MX_TIM5_Init+0x90>)
 80096c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80096ce:	4b16      	ldr	r3, [pc, #88]	; (8009728 <MX_TIM5_Init+0x90>)
 80096d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80096d6:	4b14      	ldr	r3, [pc, #80]	; (8009728 <MX_TIM5_Init+0x90>)
 80096d8:	2280      	movs	r2, #128	; 0x80
 80096da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80096dc:	2303      	movs	r3, #3
 80096de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80096e0:	2300      	movs	r3, #0
 80096e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80096e4:	2301      	movs	r3, #1
 80096e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80096f0:	2300      	movs	r3, #0
 80096f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80096f4:	2301      	movs	r3, #1
 80096f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80096f8:	2300      	movs	r3, #0
 80096fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_TIM_Encoder_Init(&htim5, &sConfig) ;
 8009700:	f107 030c 	add.w	r3, r7, #12
 8009704:	4619      	mov	r1, r3
 8009706:	4808      	ldr	r0, [pc, #32]	; (8009728 <MX_TIM5_Init+0x90>)
 8009708:	f006 f8bc 	bl	800f884 <HAL_TIM_Encoder_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800970c:	2300      	movs	r3, #0
 800970e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009710:	2300      	movs	r3, #0
 8009712:	60bb      	str	r3, [r7, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 8009714:	1d3b      	adds	r3, r7, #4
 8009716:	4619      	mov	r1, r3
 8009718:	4803      	ldr	r0, [pc, #12]	; (8009728 <MX_TIM5_Init+0x90>)
 800971a:	f006 fe0b 	bl	8010334 <HAL_TIMEx_MasterConfigSynchronization>

}
 800971e:	bf00      	nop
 8009720:	3730      	adds	r7, #48	; 0x30
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20008c20 	.word	0x20008c20
 800972c:	40000c00 	.word	0x40000c00

08009730 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08c      	sub	sp, #48	; 0x30
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009738:	f107 031c 	add.w	r3, r7, #28
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	605a      	str	r2, [r3, #4]
 8009742:	609a      	str	r2, [r3, #8]
 8009744:	60da      	str	r2, [r3, #12]
 8009746:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009750:	d14a      	bne.n	80097e8 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009752:	2300      	movs	r3, #0
 8009754:	61bb      	str	r3, [r7, #24]
 8009756:	4b3f      	ldr	r3, [pc, #252]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	4a3e      	ldr	r2, [pc, #248]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 800975c:	f043 0301 	orr.w	r3, r3, #1
 8009760:	6413      	str	r3, [r2, #64]	; 0x40
 8009762:	4b3c      	ldr	r3, [pc, #240]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	61bb      	str	r3, [r7, #24]
 800976c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	4b38      	ldr	r3, [pc, #224]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009776:	4a37      	ldr	r2, [pc, #220]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009778:	f043 0301 	orr.w	r3, r3, #1
 800977c:	6313      	str	r3, [r2, #48]	; 0x30
 800977e:	4b35      	ldr	r3, [pc, #212]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800978a:	2300      	movs	r3, #0
 800978c:	613b      	str	r3, [r7, #16]
 800978e:	4b31      	ldr	r3, [pc, #196]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009792:	4a30      	ldr	r2, [pc, #192]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009794:	f043 0302 	orr.w	r3, r3, #2
 8009798:	6313      	str	r3, [r2, #48]	; 0x30
 800979a:	4b2e      	ldr	r3, [pc, #184]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 800979c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979e:	f003 0302 	and.w	r3, r3, #2
 80097a2:	613b      	str	r3, [r7, #16]
 80097a4:	693b      	ldr	r3, [r7, #16]
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    //HAL_TIMEx_RemapConfig(&htim2, ENABLE); // Turn off JTAG function
       // GPIO_PinRemapConfig(GPIO_PartialRemap1_TIM2,ENABLE);
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80097a6:	2320      	movs	r3, #32
 80097a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097aa:	2302      	movs	r3, #2
 80097ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80097ae:	2301      	movs	r3, #1
 80097b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80097b2:	2302      	movs	r3, #2
 80097b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80097b6:	2301      	movs	r3, #1
 80097b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ba:	f107 031c 	add.w	r3, r7, #28
 80097be:	4619      	mov	r1, r3
 80097c0:	4825      	ldr	r0, [pc, #148]	; (8009858 <HAL_TIM_Encoder_MspInit+0x128>)
 80097c2:	f004 f877 	bl	800d8b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80097c6:	2308      	movs	r3, #8
 80097c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097ca:	2302      	movs	r3, #2
 80097cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80097ce:	2301      	movs	r3, #1
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80097d2:	2302      	movs	r3, #2
 80097d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80097d6:	2301      	movs	r3, #1
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097da:	f107 031c 	add.w	r3, r7, #28
 80097de:	4619      	mov	r1, r3
 80097e0:	481e      	ldr	r0, [pc, #120]	; (800985c <HAL_TIM_Encoder_MspInit+0x12c>)
 80097e2:	f004 f867 	bl	800d8b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80097e6:	e030      	b.n	800984a <HAL_TIM_Encoder_MspInit+0x11a>
  else if(tim_encoderHandle->Instance==TIM5)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a1c      	ldr	r2, [pc, #112]	; (8009860 <HAL_TIM_Encoder_MspInit+0x130>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d12b      	bne.n	800984a <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80097f2:	2300      	movs	r3, #0
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	4b17      	ldr	r3, [pc, #92]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 80097f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fa:	4a16      	ldr	r2, [pc, #88]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 80097fc:	f043 0308 	orr.w	r3, r3, #8
 8009800:	6413      	str	r3, [r2, #64]	; 0x40
 8009802:	4b14      	ldr	r3, [pc, #80]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800980e:	2300      	movs	r3, #0
 8009810:	60bb      	str	r3, [r7, #8]
 8009812:	4b10      	ldr	r3, [pc, #64]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009816:	4a0f      	ldr	r2, [pc, #60]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009818:	f043 0301 	orr.w	r3, r3, #1
 800981c:	6313      	str	r3, [r2, #48]	; 0x30
 800981e:	4b0d      	ldr	r3, [pc, #52]	; (8009854 <HAL_TIM_Encoder_MspInit+0x124>)
 8009820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	60bb      	str	r3, [r7, #8]
 8009828:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800982a:	2303      	movs	r3, #3
 800982c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800982e:	2302      	movs	r3, #2
 8009830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009832:	2301      	movs	r3, #1
 8009834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009836:	2302      	movs	r3, #2
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800983a:	2302      	movs	r3, #2
 800983c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800983e:	f107 031c 	add.w	r3, r7, #28
 8009842:	4619      	mov	r1, r3
 8009844:	4804      	ldr	r0, [pc, #16]	; (8009858 <HAL_TIM_Encoder_MspInit+0x128>)
 8009846:	f004 f835 	bl	800d8b4 <HAL_GPIO_Init>
}
 800984a:	bf00      	nop
 800984c:	3730      	adds	r7, #48	; 0x30
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	40023800 	.word	0x40023800
 8009858:	40020000 	.word	0x40020000
 800985c:	40020400 	.word	0x40020400
 8009860:	40000c00 	.word	0x40000c00

08009864 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a0b      	ldr	r2, [pc, #44]	; (80098a0 <HAL_TIM_Base_MspInit+0x3c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d10d      	bne.n	8009892 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN tim1_MspInit 0 */

  /* USER CODE END tim1_MspInit 0 */
    /* tim1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009876:	2300      	movs	r3, #0
 8009878:	60fb      	str	r3, [r7, #12]
 800987a:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <HAL_TIM_Base_MspInit+0x40>)
 800987c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800987e:	4a09      	ldr	r2, [pc, #36]	; (80098a4 <HAL_TIM_Base_MspInit+0x40>)
 8009880:	f043 0301 	orr.w	r3, r3, #1
 8009884:	6453      	str	r3, [r2, #68]	; 0x44
 8009886:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <HAL_TIM_Base_MspInit+0x40>)
 8009888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN tim1_MspInit 1 */

  /* USER CODE END tim1_MspInit 1 */
  }
}
 8009892:	bf00      	nop
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	40010000 	.word	0x40010000
 80098a4:	40023800 	.word	0x40023800

080098a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098b0:	f107 030c 	add.w	r3, r7, #12
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	605a      	str	r2, [r3, #4]
 80098ba:	609a      	str	r2, [r3, #8]
 80098bc:	60da      	str	r2, [r3, #12]
 80098be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a12      	ldr	r2, [pc, #72]	; (8009910 <HAL_TIM_MspPostInit+0x68>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d11e      	bne.n	8009908 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN tim1_MspPostInit 0 */

  /* USER CODE END tim1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80098ca:	2300      	movs	r3, #0
 80098cc:	60bb      	str	r3, [r7, #8]
 80098ce:	4b11      	ldr	r3, [pc, #68]	; (8009914 <HAL_TIM_MspPostInit+0x6c>)
 80098d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d2:	4a10      	ldr	r2, [pc, #64]	; (8009914 <HAL_TIM_MspPostInit+0x6c>)
 80098d4:	f043 0310 	orr.w	r3, r3, #16
 80098d8:	6313      	str	r3, [r2, #48]	; 0x30
 80098da:	4b0e      	ldr	r3, [pc, #56]	; (8009914 <HAL_TIM_MspPostInit+0x6c>)
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	f003 0310 	and.w	r3, r3, #16
 80098e2:	60bb      	str	r3, [r7, #8]
 80098e4:	68bb      	ldr	r3, [r7, #8]
    /**tim1 GPIO Configuration
    PE9     ------> tim1_CH1
    PE11     ------> tim1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80098e6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80098ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ec:	2302      	movs	r3, #2
 80098ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098f0:	2300      	movs	r3, #0
 80098f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098f4:	2303      	movs	r3, #3
 80098f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80098f8:	2301      	movs	r3, #1
 80098fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80098fc:	f107 030c 	add.w	r3, r7, #12
 8009900:	4619      	mov	r1, r3
 8009902:	4805      	ldr	r0, [pc, #20]	; (8009918 <HAL_TIM_MspPostInit+0x70>)
 8009904:	f003 ffd6 	bl	800d8b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN tim1_MspPostInit 1 */

  /* USER CODE END tim1_MspPostInit 1 */
  }

}
 8009908:	bf00      	nop
 800990a:	3720      	adds	r7, #32
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	40010000 	.word	0x40010000
 8009914:	40023800 	.word	0x40023800
 8009918:	40021000 	.word	0x40021000

0800991c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	0a5a      	lsrs	r2, r3, #9
 800992c:	490f      	ldr	r1, [pc, #60]	; (800996c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800992e:	fba1 1202 	umull	r1, r2, r1, r2
 8009932:	09d2      	lsrs	r2, r2, #7
 8009934:	490e      	ldr	r1, [pc, #56]	; (8009970 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8009936:	fb01 f202 	mul.w	r2, r1, r2
 800993a:	1a9b      	subs	r3, r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	0a5b      	lsrs	r3, r3, #9
 8009944:	4a09      	ldr	r2, [pc, #36]	; (800996c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8009946:	fba2 2303 	umull	r2, r3, r2, r3
 800994a:	09db      	lsrs	r3, r3, #7
 800994c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	441a      	add	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	601a      	str	r2, [r3, #0]
}
 8009960:	bf00      	nop
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	00044b83 	.word	0x00044b83
 8009970:	3b9aca00 	.word	0x3b9aca00

08009974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80099ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009978:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800997a:	e003      	b.n	8009984 <LoopCopyDataInit>

0800997c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800997c:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800997e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009980:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009982:	3104      	adds	r1, #4

08009984 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009984:	480b      	ldr	r0, [pc, #44]	; (80099b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009986:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009988:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800998a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800998c:	d3f6      	bcc.n	800997c <CopyDataInit>
  ldr  r2, =_sbss
 800998e:	4a0b      	ldr	r2, [pc, #44]	; (80099bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009990:	e002      	b.n	8009998 <LoopFillZerobss>

08009992 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009992:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009994:	f842 3b04 	str.w	r3, [r2], #4

08009998 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009998:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800999a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800999c:	d3f9      	bcc.n	8009992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800999e:	f7ff fd91 	bl	80094c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80099a2:	f00a fccb 	bl	801433c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80099a6:	f7fd faab 	bl	8006f00 <main>
  bx  lr    
 80099aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80099ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80099b0:	08015838 	.word	0x08015838
  ldr  r0, =_sdata
 80099b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80099b8:	20000134 	.word	0x20000134
  ldr  r2, =_sbss
 80099bc:	20000138 	.word	0x20000138
  ldr  r3, = _ebss
 80099c0:	20008dc4 	.word	0x20008dc4

080099c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80099c4:	e7fe      	b.n	80099c4 <ADC_IRQHandler>
	...

080099c8 <HAL_I2C_MspInit>:
madgwick_quat_data_t quat_data;
float AX, AY, AZ, GX, GY, GZ;


void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08a      	sub	sp, #40	; 0x28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099d0:	f107 0314 	add.w	r3, r7, #20
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	605a      	str	r2, [r3, #4]
 80099da:	609a      	str	r2, [r3, #8]
 80099dc:	60da      	str	r2, [r3, #12]
 80099de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a19      	ldr	r2, [pc, #100]	; (8009a4c <HAL_I2C_MspInit+0x84>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d12b      	bne.n	8009a42 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80099ea:	2300      	movs	r3, #0
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	4b18      	ldr	r3, [pc, #96]	; (8009a50 <HAL_I2C_MspInit+0x88>)
 80099f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f2:	4a17      	ldr	r2, [pc, #92]	; (8009a50 <HAL_I2C_MspInit+0x88>)
 80099f4:	f043 0302 	orr.w	r3, r3, #2
 80099f8:	6313      	str	r3, [r2, #48]	; 0x30
 80099fa:	4b15      	ldr	r3, [pc, #84]	; (8009a50 <HAL_I2C_MspInit+0x88>)
 80099fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fe:	f003 0302 	and.w	r3, r3, #2
 8009a02:	613b      	str	r3, [r7, #16]
 8009a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009a06:	2300      	movs	r3, #0
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	4b11      	ldr	r3, [pc, #68]	; (8009a50 <HAL_I2C_MspInit+0x88>)
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0e:	4a10      	ldr	r2, [pc, #64]	; (8009a50 <HAL_I2C_MspInit+0x88>)
 8009a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a14:	6413      	str	r3, [r2, #64]	; 0x40
 8009a16:	4b0e      	ldr	r3, [pc, #56]	; (8009a50 <HAL_I2C_MspInit+0x88>)
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009a22:	23c0      	movs	r3, #192	; 0xc0
 8009a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009a26:	2312      	movs	r3, #18
 8009a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009a32:	2304      	movs	r3, #4
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a36:	f107 0314 	add.w	r3, r7, #20
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4805      	ldr	r0, [pc, #20]	; (8009a54 <HAL_I2C_MspInit+0x8c>)
 8009a3e:	f003 ff39 	bl	800d8b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009a42:	bf00      	nop
 8009a44:	3728      	adds	r7, #40	; 0x28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40005400 	.word	0x40005400
 8009a50:	40023800 	.word	0x40023800
 8009a54:	40020400 	.word	0x40020400

08009a58 <MX_I2C1_Init>:
  }

}

void MX_I2C1_Init(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <MX_I2C1_Init+0x48>)
 8009a5e:	4a11      	ldr	r2, [pc, #68]	; (8009aa4 <MX_I2C1_Init+0x4c>)
 8009a60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8009a62:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <MX_I2C1_Init+0x48>)
 8009a64:	4a10      	ldr	r2, [pc, #64]	; (8009aa8 <MX_I2C1_Init+0x50>)
 8009a66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009a68:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <MX_I2C1_Init+0x48>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009a6e:	4b0c      	ldr	r3, [pc, #48]	; (8009aa0 <MX_I2C1_Init+0x48>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009a74:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <MX_I2C1_Init+0x48>)
 8009a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009a7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009a7c:	4b08      	ldr	r3, [pc, #32]	; (8009aa0 <MX_I2C1_Init+0x48>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009a82:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <MX_I2C1_Init+0x48>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009a88:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <MX_I2C1_Init+0x48>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009a8e:	4b04      	ldr	r3, [pc, #16]	; (8009aa0 <MX_I2C1_Init+0x48>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009a94:	4802      	ldr	r0, [pc, #8]	; (8009aa0 <MX_I2C1_Init+0x48>)
 8009a96:	f004 f9ed 	bl	800de74 <HAL_I2C_Init>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009a9a:	bf00      	nop
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20008ce4 	.word	0x20008ce4
 8009aa4:	40005400 	.word	0x40005400
 8009aa8:	00061a80 	.word	0x00061a80

08009aac <User_I2C1_GeneralPurposeOutput_Init>:
static void User_I2C1_GeneralPurposeOutput_Init(I2C_HandleTypeDef* i2cHandle)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct;
    if(i2cHandle->Instance==I2C1)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a09      	ldr	r2, [pc, #36]	; (8009ae0 <User_I2C1_GeneralPurposeOutput_Init+0x34>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d10b      	bne.n	8009ad6 <User_I2C1_GeneralPurposeOutput_Init+0x2a>
    {
        /*   PB10     ------> I2C2_SCL; PB11     ------> I2C2_SDA */
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009abe:	23c0      	movs	r3, #192	; 0xc0
 8009ac0:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009ac2:	2311      	movs	r3, #17
 8009ac4:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009aca:	f107 030c 	add.w	r3, r7, #12
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4804      	ldr	r0, [pc, #16]	; (8009ae4 <User_I2C1_GeneralPurposeOutput_Init+0x38>)
 8009ad2:	f003 feef 	bl	800d8b4 <HAL_GPIO_Init>
    }
}
 8009ad6:	bf00      	nop
 8009ad8:	3720      	adds	r7, #32
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	40005400 	.word	0x40005400
 8009ae4:	40020400 	.word	0x40020400

08009ae8 <User_I2C1_AlternateFunction_Init>:
static void User_I2C1_AlternateFunction_Init(I2C_HandleTypeDef* i2cHandle)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct;
    if(i2cHandle->Instance==I2C1)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a09      	ldr	r2, [pc, #36]	; (8009b1c <User_I2C1_AlternateFunction_Init+0x34>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d10b      	bne.n	8009b12 <User_I2C1_AlternateFunction_Init+0x2a>
    {
        /*   PB6     ------> I2C1_SCL; PB7     ------> I2C1_SDA */
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009afa:	23c0      	movs	r3, #192	; 0xc0
 8009afc:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009afe:	2312      	movs	r3, #18
 8009b00:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009b02:	2302      	movs	r3, #2
 8009b04:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b06:	f107 030c 	add.w	r3, r7, #12
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	4804      	ldr	r0, [pc, #16]	; (8009b20 <User_I2C1_AlternateFunction_Init+0x38>)
 8009b0e:	f003 fed1 	bl	800d8b4 <HAL_GPIO_Init>
    }
}
 8009b12:	bf00      	nop
 8009b14:	3720      	adds	r7, #32
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	40005400 	.word	0x40005400
 8009b20:	40020400 	.word	0x40020400

08009b24 <I2CResetBus>:
HAL_StatusTypeDef I2CResetBus(void)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	af00      	add	r7, sp, #0
    hi2c1.ErrorCode = HAL_I2C_ERROR_AF;
 8009b28:	4b4b      	ldr	r3, [pc, #300]	; (8009c58 <I2CResetBus+0x134>)
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* 1. Disable the I2C peripheral by clearing the PE bit in I2Cx_CR1 register */
    __HAL_I2C_DISABLE(&hi2c1);
 8009b2e:	4b4a      	ldr	r3, [pc, #296]	; (8009c58 <I2CResetBus+0x134>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	4b48      	ldr	r3, [pc, #288]	; (8009c58 <I2CResetBus+0x134>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 0201 	bic.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8009b3e:	21c0      	movs	r1, #192	; 0xc0
 8009b40:	4846      	ldr	r0, [pc, #280]	; (8009c5c <I2CResetBus+0x138>)
 8009b42:	f004 f851 	bl	800dbe8 <HAL_GPIO_DeInit>

    /* 2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR) */
    User_I2C1_GeneralPurposeOutput_Init(&hi2c1);
 8009b46:	4844      	ldr	r0, [pc, #272]	; (8009c58 <I2CResetBus+0x134>)
 8009b48:	f7ff ffb0 	bl	8009aac <User_I2C1_GeneralPurposeOutput_Init>
    HAL_Delay(1);
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	f003 f9ed 	bl	800cf2c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_SET);
 8009b52:	2201      	movs	r2, #1
 8009b54:	21c0      	movs	r1, #192	; 0xc0
 8009b56:	4841      	ldr	r0, [pc, #260]	; (8009c5c <I2CResetBus+0x138>)
 8009b58:	f004 f958 	bl	800de0c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	f003 f9e5 	bl	800cf2c <HAL_Delay>

    /* 3. Check SCL and SDA High level in GPIOx_IDR */
    if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET)||(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET))
 8009b62:	2140      	movs	r1, #64	; 0x40
 8009b64:	483d      	ldr	r0, [pc, #244]	; (8009c5c <I2CResetBus+0x138>)
 8009b66:	f004 f939 	bl	800dddc <HAL_GPIO_ReadPin>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d106      	bne.n	8009b7e <I2CResetBus+0x5a>
 8009b70:	2180      	movs	r1, #128	; 0x80
 8009b72:	483a      	ldr	r0, [pc, #232]	; (8009c5c <I2CResetBus+0x138>)
 8009b74:	f004 f932 	bl	800dddc <HAL_GPIO_ReadPin>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d001      	beq.n	8009b82 <I2CResetBus+0x5e>
    {
#ifdef I2C_TEST
        printf("3.PB10=%d, PB11=%d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6), HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
#endif
        return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e068      	b.n	8009c54 <I2CResetBus+0x130>
    /* 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
     * 5. Check SDA Low level in GPIOx_IDR.
     * 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR)
     * 7. Check SCL Low level in GPIOx_IDR.
     * */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8009b82:	2200      	movs	r2, #0
 8009b84:	21c0      	movs	r1, #192	; 0xc0
 8009b86:	4835      	ldr	r0, [pc, #212]	; (8009c5c <I2CResetBus+0x138>)
 8009b88:	f004 f940 	bl	800de0c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	f003 f9cd 	bl	800cf2c <HAL_Delay>
    if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_RESET)||(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_RESET))
 8009b92:	2140      	movs	r1, #64	; 0x40
 8009b94:	4831      	ldr	r0, [pc, #196]	; (8009c5c <I2CResetBus+0x138>)
 8009b96:	f004 f921 	bl	800dddc <HAL_GPIO_ReadPin>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d106      	bne.n	8009bae <I2CResetBus+0x8a>
 8009ba0:	2180      	movs	r1, #128	; 0x80
 8009ba2:	482e      	ldr	r0, [pc, #184]	; (8009c5c <I2CResetBus+0x138>)
 8009ba4:	f004 f91a 	bl	800dddc <HAL_GPIO_ReadPin>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <I2CResetBus+0x8e>
    {
#ifdef I2C_TEST
        printf("4-7.PB10=%d, PB11=%d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6), HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
#endif
        return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e050      	b.n	8009c54 <I2CResetBus+0x130>
     * 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
     * 9. Check SCL High level in GPIOx_IDR.
     * 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
     * 11. Check SDA High level in GPIOx_IDR.
     */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	21c0      	movs	r1, #192	; 0xc0
 8009bb6:	4829      	ldr	r0, [pc, #164]	; (8009c5c <I2CResetBus+0x138>)
 8009bb8:	f004 f928 	bl	800de0c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	f003 f9b5 	bl	800cf2c <HAL_Delay>
    if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET)||(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET))
 8009bc2:	2140      	movs	r1, #64	; 0x40
 8009bc4:	4825      	ldr	r0, [pc, #148]	; (8009c5c <I2CResetBus+0x138>)
 8009bc6:	f004 f909 	bl	800dddc <HAL_GPIO_ReadPin>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d106      	bne.n	8009bde <I2CResetBus+0xba>
 8009bd0:	2180      	movs	r1, #128	; 0x80
 8009bd2:	4822      	ldr	r0, [pc, #136]	; (8009c5c <I2CResetBus+0x138>)
 8009bd4:	f004 f902 	bl	800dddc <HAL_GPIO_ReadPin>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d001      	beq.n	8009be2 <I2CResetBus+0xbe>
    {
#ifdef I2C_TEST
        printf("8-11.PB10=%d, PB11=%d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6), HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
#endif
        return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e038      	b.n	8009c54 <I2CResetBus+0x130>
    }

    /* 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain. */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8009be2:	21c0      	movs	r1, #192	; 0xc0
 8009be4:	481d      	ldr	r0, [pc, #116]	; (8009c5c <I2CResetBus+0x138>)
 8009be6:	f003 ffff 	bl	800dbe8 <HAL_GPIO_DeInit>
    User_I2C1_AlternateFunction_Init(&hi2c1);
 8009bea:	481b      	ldr	r0, [pc, #108]	; (8009c58 <I2CResetBus+0x134>)
 8009bec:	f7ff ff7c 	bl	8009ae8 <User_I2C1_AlternateFunction_Init>

    /* 13. Set SWRST bit in I2Cx_CR1 register. */
    hi2c1.Instance->CR1 |=  I2C_CR1_SWRST;
 8009bf0:	4b19      	ldr	r3, [pc, #100]	; (8009c58 <I2CResetBus+0x134>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	4b18      	ldr	r3, [pc, #96]	; (8009c58 <I2CResetBus+0x134>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bfe:	601a      	str	r2, [r3, #0]
    HAL_Delay(2);
 8009c00:	2002      	movs	r0, #2
 8009c02:	f003 f993 	bl	800cf2c <HAL_Delay>
    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    hi2c1.Instance->CR1 &=  ~I2C_CR1_SWRST;
 8009c06:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <I2CResetBus+0x134>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	4b12      	ldr	r3, [pc, #72]	; (8009c58 <I2CResetBus+0x134>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c14:	601a      	str	r2, [r3, #0]
    HAL_Delay(2);
 8009c16:	2002      	movs	r0, #2
 8009c18:	f003 f988 	bl	800cf2c <HAL_Delay>
    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    MX_I2C1_Init();
 8009c1c:	f7ff ff1c 	bl	8009a58 <MX_I2C1_Init>
    __HAL_I2C_ENABLE(&hi2c1);
 8009c20:	4b0d      	ldr	r3, [pc, #52]	; (8009c58 <I2CResetBus+0x134>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <I2CResetBus+0x134>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0201 	orr.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
    HAL_Delay(2);
 8009c30:	2002      	movs	r0, #2
 8009c32:	f003 f97b 	bl	800cf2c <HAL_Delay>
#ifdef I2C_TEST
    printf("I2CResetBus\r\n");
#endif
    hi2c1.ErrorCode = HAL_I2C_STATE_ERROR ;
 8009c36:	4b08      	ldr	r3, [pc, #32]	; (8009c58 <I2CResetBus+0x134>)
 8009c38:	22e0      	movs	r2, #224	; 0xe0
 8009c3a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c1.State = HAL_I2C_STATE_READY;
 8009c3c:	4b06      	ldr	r3, [pc, #24]	; (8009c58 <I2CResetBus+0x134>)
 8009c3e:	2220      	movs	r2, #32
 8009c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c1.PreviousState = HAL_I2C_STATE_RESET;
 8009c44:	4b04      	ldr	r3, [pc, #16]	; (8009c58 <I2CResetBus+0x134>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c1.Mode = HAL_I2C_MODE_NONE;
 8009c4a:	4b03      	ldr	r3, [pc, #12]	; (8009c58 <I2CResetBus+0x134>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20008ce4 	.word	0x20008ce4
 8009c5c:	40020400 	.word	0x40020400

08009c60 <Imu_init>:
// Initial IMU :
void Imu_init()
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 8009c66:	f7ff fef7 	bl	8009a58 <MX_I2C1_Init>
	//HAL_I2C_MspInit(&hi2c1);
	//HAL_I2C_MspDeInit(&hi2c1);


	MPU6050_Init(&hi2c1);
 8009c6a:	480e      	ldr	r0, [pc, #56]	; (8009ca4 <Imu_init+0x44>)
 8009c6c:	f000 fcc2 	bl	800a5f4 <MPU6050_Init>

	madgwick_cfg_t madgwick_cfg;
	madgwick_cfg.beta = MADGWICK_BETA;
 8009c70:	4b0d      	ldr	r3, [pc, #52]	; (8009ca8 <Imu_init+0x48>)
 8009c72:	603b      	str	r3, [r7, #0]
	madgwick_cfg.sample_freq = MADGWICK_SAMPLE_RATE;
 8009c74:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <Imu_init+0x4c>)
 8009c76:	607b      	str	r3, [r7, #4]
	madgwick_handle = madgwick_init(&madgwick_cfg);
 8009c78:	463b      	mov	r3, r7
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f94e 	bl	8009f1c <madgwick_init>
 8009c80:	4602      	mov	r2, r0
 8009c82:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <Imu_init+0x50>)
 8009c84:	601a      	str	r2, [r3, #0]

	if (MPU6050_Init(&hi2c1) == 1){
 8009c86:	4807      	ldr	r0, [pc, #28]	; (8009ca4 <Imu_init+0x44>)
 8009c88:	f000 fcb4 	bl	800a5f4 <MPU6050_Init>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d101      	bne.n	8009c96 <Imu_init+0x36>
		I2CResetBus();
 8009c92:	f7ff ff47 	bl	8009b24 <I2CResetBus>
	//	HAL_Delay(10);
	}


	Calibration(&hi2c1);
 8009c96:	4803      	ldr	r0, [pc, #12]	; (8009ca4 <Imu_init+0x44>)
 8009c98:	f000 fd06 	bl	800a6a8 <Calibration>
}
 8009c9c:	bf00      	nop
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	20008ce4 	.word	0x20008ce4
 8009ca8:	3dcccccd 	.word	0x3dcccccd
 8009cac:	42c80000 	.word	0x42c80000
 8009cb0:	20008da4 	.word	0x20008da4

08009cb4 <Get_acc>:
	*yaw = 180.0 / 3.14 * atan2f(quat_data.q0 * quat_data.q3 + quat_data.q1 * quat_data.q2, 0.5f - quat_data.q2 * quat_data.q2 - quat_data.q3 * quat_data.q3);
	//HAL_Delay (10);
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
}
void Get_acc(float* x, float* y, float* z)
{
 8009cb4:	b590      	push	{r4, r7, lr}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
	MPU6050_Read_All(&hi2c1,&MPU6050);
 8009cc0:	4912      	ldr	r1, [pc, #72]	; (8009d0c <Get_acc+0x58>)
 8009cc2:	4813      	ldr	r0, [pc, #76]	; (8009d10 <Get_acc+0x5c>)
 8009cc4:	f000 fe64 	bl	800a990 <MPU6050_Read_All>
	*x = (float)MPU6050.Ax;
 8009cc8:	4b10      	ldr	r3, [pc, #64]	; (8009d0c <Get_acc+0x58>)
 8009cca:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	f7f6 ff69 	bl	8000ba8 <__aeabi_d2f>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	601a      	str	r2, [r3, #0]
	*y = (float)MPU6050.Ay;
 8009cdc:	4b0b      	ldr	r3, [pc, #44]	; (8009d0c <Get_acc+0x58>)
 8009cde:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	f7f6 ff5f 	bl	8000ba8 <__aeabi_d2f>
 8009cea:	4602      	mov	r2, r0
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	601a      	str	r2, [r3, #0]
	*z = (float)MPU6050.Az;
 8009cf0:	4b06      	ldr	r3, [pc, #24]	; (8009d0c <Get_acc+0x58>)
 8009cf2:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	f7f6 ff55 	bl	8000ba8 <__aeabi_d2f>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	601a      	str	r2, [r3, #0]
}
 8009d04:	bf00      	nop
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd90      	pop	{r4, r7, pc}
 8009d0c:	20008d38 	.word	0x20008d38
 8009d10:	20008ce4 	.word	0x20008ce4

08009d14 <Get_gyro>:
void Get_gyro(float* x, float* y, float* z)
{
 8009d14:	b590      	push	{r4, r7, lr}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
	MPU6050_Read_All(&hi2c1,&MPU6050);
 8009d20:	4912      	ldr	r1, [pc, #72]	; (8009d6c <Get_gyro+0x58>)
 8009d22:	4813      	ldr	r0, [pc, #76]	; (8009d70 <Get_gyro+0x5c>)
 8009d24:	f000 fe34 	bl	800a990 <MPU6050_Read_All>
	*x = (float)MPU6050.Gx;
 8009d28:	4b10      	ldr	r3, [pc, #64]	; (8009d6c <Get_gyro+0x58>)
 8009d2a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8009d2e:	4618      	mov	r0, r3
 8009d30:	4621      	mov	r1, r4
 8009d32:	f7f6 ff39 	bl	8000ba8 <__aeabi_d2f>
 8009d36:	4602      	mov	r2, r0
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	601a      	str	r2, [r3, #0]
	*y = (float)MPU6050.Gy;
 8009d3c:	4b0b      	ldr	r3, [pc, #44]	; (8009d6c <Get_gyro+0x58>)
 8009d3e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8009d42:	4618      	mov	r0, r3
 8009d44:	4621      	mov	r1, r4
 8009d46:	f7f6 ff2f 	bl	8000ba8 <__aeabi_d2f>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	601a      	str	r2, [r3, #0]
	*z = (float)MPU6050.Gz;
 8009d50:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <Get_gyro+0x58>)
 8009d52:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009d56:	4618      	mov	r0, r3
 8009d58:	4621      	mov	r1, r4
 8009d5a:	f7f6 ff25 	bl	8000ba8 <__aeabi_d2f>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]
}
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd90      	pop	{r4, r7, pc}
 8009d6c:	20008d38 	.word	0x20008d38
 8009d70:	20008ce4 	.word	0x20008ce4

08009d74 <Get_quat>:
void Get_quat(float* x, float* y, float* z, float* t)
{
 8009d74:	b590      	push	{r4, r7, lr}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
	MPU6050_Read_All(&hi2c1,&MPU6050);
 8009d82:	493e      	ldr	r1, [pc, #248]	; (8009e7c <Get_quat+0x108>)
 8009d84:	483e      	ldr	r0, [pc, #248]	; (8009e80 <Get_quat+0x10c>)
 8009d86:	f000 fe03 	bl	800a990 <MPU6050_Read_All>
	AX = (float)MPU6050.Ax;
 8009d8a:	4b3c      	ldr	r3, [pc, #240]	; (8009e7c <Get_quat+0x108>)
 8009d8c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8009d90:	4618      	mov	r0, r3
 8009d92:	4621      	mov	r1, r4
 8009d94:	f7f6 ff08 	bl	8000ba8 <__aeabi_d2f>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	4b3a      	ldr	r3, [pc, #232]	; (8009e84 <Get_quat+0x110>)
 8009d9c:	601a      	str	r2, [r3, #0]
	AY = (float)MPU6050.Ay;
 8009d9e:	4b37      	ldr	r3, [pc, #220]	; (8009e7c <Get_quat+0x108>)
 8009da0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8009da4:	4618      	mov	r0, r3
 8009da6:	4621      	mov	r1, r4
 8009da8:	f7f6 fefe 	bl	8000ba8 <__aeabi_d2f>
 8009dac:	4602      	mov	r2, r0
 8009dae:	4b36      	ldr	r3, [pc, #216]	; (8009e88 <Get_quat+0x114>)
 8009db0:	601a      	str	r2, [r3, #0]
	AZ = (float)MPU6050.Az;
 8009db2:	4b32      	ldr	r3, [pc, #200]	; (8009e7c <Get_quat+0x108>)
 8009db4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8009db8:	4618      	mov	r0, r3
 8009dba:	4621      	mov	r1, r4
 8009dbc:	f7f6 fef4 	bl	8000ba8 <__aeabi_d2f>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	4b32      	ldr	r3, [pc, #200]	; (8009e8c <Get_quat+0x118>)
 8009dc4:	601a      	str	r2, [r3, #0]
	GX = (float)MPU6050.Gx;
 8009dc6:	4b2d      	ldr	r3, [pc, #180]	; (8009e7c <Get_quat+0x108>)
 8009dc8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8009dcc:	4618      	mov	r0, r3
 8009dce:	4621      	mov	r1, r4
 8009dd0:	f7f6 feea 	bl	8000ba8 <__aeabi_d2f>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	4b2e      	ldr	r3, [pc, #184]	; (8009e90 <Get_quat+0x11c>)
 8009dd8:	601a      	str	r2, [r3, #0]
	GY = (float)MPU6050.Gy;
 8009dda:	4b28      	ldr	r3, [pc, #160]	; (8009e7c <Get_quat+0x108>)
 8009ddc:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8009de0:	4618      	mov	r0, r3
 8009de2:	4621      	mov	r1, r4
 8009de4:	f7f6 fee0 	bl	8000ba8 <__aeabi_d2f>
 8009de8:	4602      	mov	r2, r0
 8009dea:	4b2a      	ldr	r3, [pc, #168]	; (8009e94 <Get_quat+0x120>)
 8009dec:	601a      	str	r2, [r3, #0]
	GZ = (float)MPU6050.Gz;
 8009dee:	4b23      	ldr	r3, [pc, #140]	; (8009e7c <Get_quat+0x108>)
 8009df0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009df4:	4618      	mov	r0, r3
 8009df6:	4621      	mov	r1, r4
 8009df8:	f7f6 fed6 	bl	8000ba8 <__aeabi_d2f>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	4b26      	ldr	r3, [pc, #152]	; (8009e98 <Get_quat+0x124>)
 8009e00:	601a      	str	r2, [r3, #0]
	madgwick_update_6dof(madgwick_handle, GX,GY,GZ,AX,AY,AZ);
 8009e02:	4b26      	ldr	r3, [pc, #152]	; (8009e9c <Get_quat+0x128>)
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	4b22      	ldr	r3, [pc, #136]	; (8009e90 <Get_quat+0x11c>)
 8009e08:	edd3 7a00 	vldr	s15, [r3]
 8009e0c:	4b21      	ldr	r3, [pc, #132]	; (8009e94 <Get_quat+0x120>)
 8009e0e:	ed93 7a00 	vldr	s14, [r3]
 8009e12:	4b21      	ldr	r3, [pc, #132]	; (8009e98 <Get_quat+0x124>)
 8009e14:	edd3 6a00 	vldr	s13, [r3]
 8009e18:	4b1a      	ldr	r3, [pc, #104]	; (8009e84 <Get_quat+0x110>)
 8009e1a:	ed93 6a00 	vldr	s12, [r3]
 8009e1e:	4b1a      	ldr	r3, [pc, #104]	; (8009e88 <Get_quat+0x114>)
 8009e20:	edd3 5a00 	vldr	s11, [r3]
 8009e24:	4b19      	ldr	r3, [pc, #100]	; (8009e8c <Get_quat+0x118>)
 8009e26:	ed93 5a00 	vldr	s10, [r3]
 8009e2a:	eef0 2a45 	vmov.f32	s5, s10
 8009e2e:	eeb0 2a65 	vmov.f32	s4, s11
 8009e32:	eef0 1a46 	vmov.f32	s3, s12
 8009e36:	eeb0 1a66 	vmov.f32	s2, s13
 8009e3a:	eef0 0a47 	vmov.f32	s1, s14
 8009e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009e42:	4610      	mov	r0, r2
 8009e44:	f000 f8ac 	bl	8009fa0 <madgwick_update_6dof>
	madgwick_get_quaternion(madgwick_handle, &quat_data);
 8009e48:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <Get_quat+0x128>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4914      	ldr	r1, [pc, #80]	; (8009ea0 <Get_quat+0x12c>)
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 f88b 	bl	8009f6a <madgwick_get_quaternion>
	*x = quat_data.q0;
 8009e54:	4b12      	ldr	r3, [pc, #72]	; (8009ea0 <Get_quat+0x12c>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	601a      	str	r2, [r3, #0]
	*y = quat_data.q1;
 8009e5c:	4b10      	ldr	r3, [pc, #64]	; (8009ea0 <Get_quat+0x12c>)
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	601a      	str	r2, [r3, #0]
	*z = quat_data.q2;
 8009e64:	4b0e      	ldr	r3, [pc, #56]	; (8009ea0 <Get_quat+0x12c>)
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	601a      	str	r2, [r3, #0]
	*t = quat_data.q3;
 8009e6c:	4b0c      	ldr	r3, [pc, #48]	; (8009ea0 <Get_quat+0x12c>)
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	601a      	str	r2, [r3, #0]

}
 8009e74:	bf00      	nop
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd90      	pop	{r4, r7, pc}
 8009e7c:	20008d38 	.word	0x20008d38
 8009e80:	20008ce4 	.word	0x20008ce4
 8009e84:	20008db4 	.word	0x20008db4
 8009e88:	20008d90 	.word	0x20008d90
 8009e8c:	20008dac 	.word	0x20008dac
 8009e90:	20008db0 	.word	0x20008db0
 8009e94:	20008ce0 	.word	0x20008ce0
 8009e98:	20008da8 	.word	0x20008da8
 8009e9c:	20008da4 	.word	0x20008da4
 8009ea0:	20008d94 	.word	0x20008d94

08009ea4 <invSqrt>:
    float q3;
    //SemaphoreHandle_t lock;
} madgwick_t;

static float invSqrt(float x)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 8009eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8009eb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009eba:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	613b      	str	r3, [r7, #16]
    long i = *(long*)&y;
 8009ec2:	f107 0310 	add.w	r3, r7, #16
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	60fb      	str	r3, [r7, #12]
    i = 0x5f3759df - (i >> 1);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	105a      	asrs	r2, r3, #1
 8009ece:	4b12      	ldr	r3, [pc, #72]	; (8009f18 <invSqrt+0x74>)
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]
    y = *(float*)&i;
 8009ed4:	f107 030c 	add.w	r3, r7, #12
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 8009edc:	ed97 7a04 	vldr	s14, [r7, #16]
 8009ee0:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8009eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8009ef4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ef8:	edd7 7a04 	vldr	s15, [r7, #16]
 8009efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f00:	edc7 7a04 	vstr	s15, [r7, #16]
    return y;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	ee07 3a90 	vmov	s15, r3
}
 8009f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	5f3759df 	.word	0x5f3759df

08009f1c <madgwick_init>:

madgwick_handle_t madgwick_init(madgwick_cfg_t *config)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
    /* Check input conditions */
//    MADGWICK_CHECK(config, MADGWICK_INIT_ERR_STR, NULL);

    /* Allocate memory for handle structure */
    madgwick_handle_t handle = calloc(1, sizeof(madgwick_t));
 8009f24:	2118      	movs	r1, #24
 8009f26:	2001      	movs	r0, #1
 8009f28:	f00a f9fa 	bl	8014320 <calloc>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	60fb      	str	r3, [r7, #12]
  //  MADGWICK_CHECK(handle, MADGWICK_INIT_ERR_STR, NULL);

    /* Update handle structure */
    handle->beta = config->beta;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	601a      	str	r2, [r3, #0]
    handle->sample_freq = config->sample_freq;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	605a      	str	r2, [r3, #4]
    handle->q0 = 1.0f;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009f46:	609a      	str	r2, [r3, #8]
    handle->q1 = 0.0f;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f04f 0200 	mov.w	r2, #0
 8009f4e:	60da      	str	r2, [r3, #12]
    handle->q2 = 0.0f;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f04f 0200 	mov.w	r2, #0
 8009f56:	611a      	str	r2, [r3, #16]
    handle->q3 = 0.0f;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f04f 0200 	mov.w	r2, #0
 8009f5e:	615a      	str	r2, [r3, #20]
    //handle->lock = mutex_create();

    return handle;
 8009f60:	68fb      	ldr	r3, [r7, #12]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <madgwick_get_quaternion>:
    handle->sample_freq = sample_freq;
    //mutex_unlock(handle->lock);
}

void madgwick_get_quaternion(madgwick_handle_t handle, madgwick_quat_data_t *quat_data)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b083      	sub	sp, #12
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
    //mutex_lock(handle->lock);
    quat_data->q0 = handle->q0;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689a      	ldr	r2, [r3, #8]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	601a      	str	r2, [r3, #0]
    quat_data->q1 = handle->q1;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	605a      	str	r2, [r3, #4]
    quat_data->q2 = handle->q2;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	691a      	ldr	r2, [r3, #16]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	609a      	str	r2, [r3, #8]
    quat_data->q3 = handle->q3;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	695a      	ldr	r2, [r3, #20]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	60da      	str	r2, [r3, #12]
    //mutex_unlock(handle->lock);
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <madgwick_update_6dof>:

void madgwick_update_6dof(madgwick_handle_t handle, float gx, float gy, float gz, float ax, float ay, float az)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b0a4      	sub	sp, #144	; 0x90
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	61f8      	str	r0, [r7, #28]
 8009fa8:	ed87 0a06 	vstr	s0, [r7, #24]
 8009fac:	edc7 0a05 	vstr	s1, [r7, #20]
 8009fb0:	ed87 1a04 	vstr	s2, [r7, #16]
 8009fb4:	edc7 1a03 	vstr	s3, [r7, #12]
 8009fb8:	ed87 2a02 	vstr	s4, [r7, #8]
 8009fbc:	edc7 2a01 	vstr	s5, [r7, #4]
    //mutex_lock(handle->lock);

    float q0 = handle->q0;
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
    float q1 = handle->q1;
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	67bb      	str	r3, [r7, #120]	; 0x78
    float q2 = handle->q2;
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	677b      	str	r3, [r7, #116]	; 0x74
    float q3 = handle->q3;
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	673b      	str	r3, [r7, #112]	; 0x70
    float beta = handle->beta;
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	66fb      	str	r3, [r7, #108]	; 0x6c
    float sampleFreq = handle->sample_freq;
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	66bb      	str	r3, [r7, #104]	; 0x68
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 , _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

    // Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8009fe4:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fe8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800a128 <madgwick_update_6dof+0x188>
 8009fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ff0:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= 0.0174533f;
 8009ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ff8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800a128 <madgwick_update_6dof+0x188>
 8009ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a000:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= 0.0174533f;
 800a004:	edd7 7a04 	vldr	s15, [r7, #16]
 800a008:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800a128 <madgwick_update_6dof+0x188>
 800a00c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a010:	edc7 7a04 	vstr	s15, [r7, #16]
    
    // Rate of change of quaternion from gyroscope
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800a014:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a018:	eeb1 7a67 	vneg.f32	s14, s15
 800a01c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a020:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a024:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800a028:	edd7 7a05 	vldr	s15, [r7, #20]
 800a02c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a030:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a034:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800a038:	edd7 7a04 	vldr	s15, [r7, #16]
 800a03c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a040:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a044:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a04c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800a050:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a054:	edd7 7a06 	vldr	s15, [r7, #24]
 800a058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a05c:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800a060:	edd7 7a04 	vldr	s15, [r7, #16]
 800a064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a06c:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800a070:	edd7 7a05 	vldr	s15, [r7, #20]
 800a074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a07c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a080:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a084:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800a088:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a08c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a090:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a094:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800a098:	edd7 7a04 	vldr	s15, [r7, #16]
 800a09c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a0a4:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800a0a8:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a0b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0bc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800a0c0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a0c4:	edd7 7a04 	vldr	s15, [r7, #16]
 800a0c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0cc:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800a0d0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a0d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0dc:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800a0e0:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a0f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0f4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

    // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
    if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800a0f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800a0fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a104:	d112      	bne.n	800a12c <madgwick_update_6dof+0x18c>
 800a106:	edd7 7a02 	vldr	s15, [r7, #8]
 800a10a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a112:	d10b      	bne.n	800a12c <madgwick_update_6dof+0x18c>
 800a114:	edd7 7a01 	vldr	s15, [r7, #4]
 800a118:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a120:	f000 81d4 	beq.w	800a4cc <madgwick_update_6dof+0x52c>
 800a124:	e002      	b.n	800a12c <madgwick_update_6dof+0x18c>
 800a126:	bf00      	nop
 800a128:	3c8efa39 	.word	0x3c8efa39

        // Normalise accelerometer measurement
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800a12c:	ed97 7a03 	vldr	s14, [r7, #12]
 800a130:	edd7 7a03 	vldr	s15, [r7, #12]
 800a134:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a138:	edd7 6a02 	vldr	s13, [r7, #8]
 800a13c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a144:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a148:	edd7 6a01 	vldr	s13, [r7, #4]
 800a14c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a154:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a158:	eeb0 0a67 	vmov.f32	s0, s15
 800a15c:	f7ff fea2 	bl	8009ea4 <invSqrt>
 800a160:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
        ax *= recipNorm;
 800a164:	ed97 7a03 	vldr	s14, [r7, #12]
 800a168:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a170:	edc7 7a03 	vstr	s15, [r7, #12]
        ay *= recipNorm;
 800a174:	ed97 7a02 	vldr	s14, [r7, #8]
 800a178:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a17c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a180:	edc7 7a02 	vstr	s15, [r7, #8]
        az *= recipNorm;
 800a184:	ed97 7a01 	vldr	s14, [r7, #4]
 800a188:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a18c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a190:	edc7 7a01 	vstr	s15, [r7, #4]

        // Auxiliary variables to avoid repeated arithmetic
        _2q0 = 2.0f * q0;
 800a194:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a198:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a19c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        _2q1 = 2.0f * q1;
 800a1a0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a1a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a1a8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        _2q2 = 2.0f * q2;
 800a1ac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a1b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a1b4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        _2q3 = 2.0f * q3;
 800a1b8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a1bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a1c0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        _4q0 = 4.0f * q0;
 800a1c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a1c8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a1cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1d0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        _4q1 = 4.0f * q1;
 800a1d4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a1d8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a1dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1e0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        _4q2 = 4.0f * q2;
 800a1e4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a1e8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a1ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        _8q1 = 8.0f * q1;
 800a1f4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a1f8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a1fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a200:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        _8q2 = 8.0f * q2;
 800a204:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a208:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a20c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a210:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        q0q0 = q0 * q0;
 800a214:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a218:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a21c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a220:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        q1q1 = q1 * q1;
 800a224:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a228:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a230:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        q2q2 = q2 * q2;
 800a234:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a238:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a23c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a240:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        q3q3 = q3 * q3;
 800a244:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a248:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a250:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

        // Gradient decent algorithm corrective step
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800a254:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a258:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a25c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a260:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a264:	edd7 7a03 	vldr	s15, [r7, #12]
 800a268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a26c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a270:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800a274:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a27c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a280:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800a284:	edd7 7a02 	vldr	s15, [r7, #8]
 800a288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a28c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a290:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800a294:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a298:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a29c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2a0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a2a4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a2a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a2b0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a2b4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a2b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a2bc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a2c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2c8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800a2cc:	edd7 7a02 	vldr	s15, [r7, #8]
 800a2d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a2d8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800a2dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a2e0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800a2e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a2e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2f0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800a2f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a2f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a300:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800a304:	edd7 7a01 	vldr	s15, [r7, #4]
 800a308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a30c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a310:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800a314:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a318:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a31c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a320:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a324:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a328:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800a32c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a334:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a338:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800a33c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a344:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a348:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a34c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a354:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a358:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a35c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a360:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a364:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a36c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a370:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800a374:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a37c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a380:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800a384:	edd7 7a01 	vldr	s15, [r7, #4]
 800a388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a38c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a390:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800a394:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a398:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800a39c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a3a0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a3a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3a8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800a3ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a3b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a3bc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a3c0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a3c4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a3c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3d0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a3d4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a3d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3e0:	edc7 7a08 	vstr	s15, [r7, #32]
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800a3e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a3e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a3ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3f0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a3f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a400:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a404:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a40c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a410:	edd7 6a08 	vldr	s13, [r7, #32]
 800a414:	edd7 7a08 	vldr	s15, [r7, #32]
 800a418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a41c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a420:	eeb0 0a67 	vmov.f32	s0, s15
 800a424:	f7ff fd3e 	bl	8009ea4 <invSqrt>
 800a428:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
        s0 *= recipNorm;
 800a42c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a430:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a434:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a438:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        s1 *= recipNorm;
 800a43c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a440:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a444:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a448:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        s2 *= recipNorm;
 800a44c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a450:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a454:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a458:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        s3 *= recipNorm;
 800a45c:	ed97 7a08 	vldr	s14, [r7, #32]
 800a460:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a464:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a468:	edc7 7a08 	vstr	s15, [r7, #32]

        // Apply feedback step
        qDot1 -= beta * s0;
 800a46c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a470:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a474:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a478:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800a47c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a480:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
        qDot2 -= beta * s1;
 800a484:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a488:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a490:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a494:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a498:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
        qDot3 -= beta * s2;
 800a49c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a4a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a4a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800a4ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4b0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
        qDot4 -= beta * s3;
 800a4b4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a4b8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a4bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4c0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a4c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4c8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    }

    // Integrate rate of change of quaternion to yield quaternion
    q0 += qDot1 * (1.0f / sampleFreq);
 800a4cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4d0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a4d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a4e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4e8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    q1 += qDot2 * (1.0f / sampleFreq);
 800a4ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a4f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4f8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a4fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a500:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a504:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a508:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    q2 += qDot3 * (1.0f / sampleFreq);
 800a50c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a510:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a518:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a51c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a520:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a524:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a528:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    q3 += qDot4 * (1.0f / sampleFreq);
 800a52c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a530:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800a534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a538:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a53c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a540:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a544:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a548:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    // Normalise quaternion
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800a54c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a550:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800a554:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a558:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800a55c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800a560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a564:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a568:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800a56c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800a570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a574:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a578:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800a57c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800a580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a584:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a588:	eeb0 0a67 	vmov.f32	s0, s15
 800a58c:	f7ff fc8a 	bl	8009ea4 <invSqrt>
 800a590:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    q0 *= recipNorm;
 800a594:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a598:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a59c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5a0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    q1 *= recipNorm;
 800a5a4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a5a8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a5ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    q2 *= recipNorm;
 800a5b4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a5b8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    q3 *= recipNorm;
 800a5c4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a5c8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800a5cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

    handle->q0 = q0;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a5d8:	609a      	str	r2, [r3, #8]
    handle->q1 = q1;
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a5de:	60da      	str	r2, [r3, #12]
    handle->q2 = q2;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a5e4:	611a      	str	r2, [r3, #16]
    handle->q3 = q3;
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a5ea:	615a      	str	r2, [r3, #20]

    //mutex_unlock(handle->lock);
}
 800a5ec:	bf00      	nop
 800a5ee:	3790      	adds	r7, #144	; 0x90
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <MPU6050_Init>:
Kalman_t KalmanY = {
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b088      	sub	sp, #32
 800a5f8:	af04      	add	r7, sp, #16
 800a5fa:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800a5fc:	2364      	movs	r3, #100	; 0x64
 800a5fe:	9302      	str	r3, [sp, #8]
 800a600:	2301      	movs	r3, #1
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	f107 030f 	add.w	r3, r7, #15
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	2301      	movs	r3, #1
 800a60c:	2275      	movs	r2, #117	; 0x75
 800a60e:	21d0      	movs	r1, #208	; 0xd0
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f003 fe61 	bl	800e2d8 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	2b68      	cmp	r3, #104	; 0x68
 800a61a:	d13d      	bne.n	800a698 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800a620:	2364      	movs	r3, #100	; 0x64
 800a622:	9302      	str	r3, [sp, #8]
 800a624:	2301      	movs	r3, #1
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	f107 030e 	add.w	r3, r7, #14
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	2301      	movs	r3, #1
 800a630:	226b      	movs	r2, #107	; 0x6b
 800a632:	21d0      	movs	r1, #208	; 0xd0
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f003 fd55 	bl	800e0e4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800a63a:	2307      	movs	r3, #7
 800a63c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800a63e:	2364      	movs	r3, #100	; 0x64
 800a640:	9302      	str	r3, [sp, #8]
 800a642:	2301      	movs	r3, #1
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	f107 030e 	add.w	r3, r7, #14
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	2301      	movs	r3, #1
 800a64e:	2219      	movs	r2, #25
 800a650:	21d0      	movs	r1, #208	; 0xd0
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f003 fd46 	bl	800e0e4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = ACC_2G;
 800a658:	2300      	movs	r3, #0
 800a65a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800a65c:	2364      	movs	r3, #100	; 0x64
 800a65e:	9302      	str	r3, [sp, #8]
 800a660:	2301      	movs	r3, #1
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	f107 030e 	add.w	r3, r7, #14
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	2301      	movs	r3, #1
 800a66c:	221c      	movs	r2, #28
 800a66e:	21d0      	movs	r1, #208	; 0xd0
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f003 fd37 	bl	800e0e4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = GYRO_250;
 800a676:	2300      	movs	r3, #0
 800a678:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800a67a:	2364      	movs	r3, #100	; 0x64
 800a67c:	9302      	str	r3, [sp, #8]
 800a67e:	2301      	movs	r3, #1
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	f107 030e 	add.w	r3, r7, #14
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	2301      	movs	r3, #1
 800a68a:	221b      	movs	r2, #27
 800a68c:	21d0      	movs	r1, #208	; 0xd0
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f003 fd28 	bl	800e0e4 <HAL_I2C_Mem_Write>
        return 0;
 800a694:	2300      	movs	r3, #0
 800a696:	e000      	b.n	800a69a <MPU6050_Init+0xa6>
    }
    return 1;
 800a698:	2301      	movs	r3, #1
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	0000      	movs	r0, r0
 800a6a4:	0000      	movs	r0, r0
	...

0800a6a8 <Calibration>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}
void Calibration(I2C_HandleTypeDef *I2Cx)
{
 800a6a8:	b5b0      	push	{r4, r5, r7, lr}
 800a6aa:	b09a      	sub	sp, #104	; 0x68
 800a6ac:	af04      	add	r7, sp, #16
 800a6ae:	6078      	str	r0, [r7, #4]
		uint8_t Rec_Data[14];
	    double buffersize = 1000;
 800a6b0:	f04f 0300 	mov.w	r3, #0
 800a6b4:	4cac      	ldr	r4, [pc, #688]	; (800a968 <Calibration+0x2c0>)
 800a6b6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		double accel[3], gyro[3];
		long i = 0 ;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	657b      	str	r3, [r7, #84]	; 0x54

		while (i < (buffersize + 101))                  /*!< Dismiss 100 first value */
 800a6be:	e133      	b.n	800a928 <Calibration+0x280>
	    {
			 HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800a6c0:	2364      	movs	r3, #100	; 0x64
 800a6c2:	9302      	str	r3, [sp, #8]
 800a6c4:	230e      	movs	r3, #14
 800a6c6:	9301      	str	r3, [sp, #4]
 800a6c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	223b      	movs	r2, #59	; 0x3b
 800a6d2:	21d0      	movs	r1, #208	; 0xd0
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f003 fdff 	bl	800e2d8 <HAL_I2C_Mem_Read>

	        if (i > 100 && i <= (buffersize + 100))
 800a6da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6dc:	2b64      	cmp	r3, #100	; 0x64
 800a6de:	f340 80a6 	ble.w	800a82e <Calibration+0x186>
 800a6e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a6e4:	f7f5 ff1e 	bl	8000524 <__aeabi_i2d>
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	460d      	mov	r5, r1
 800a6ec:	f04f 0200 	mov.w	r2, #0
 800a6f0:	4b9e      	ldr	r3, [pc, #632]	; (800a96c <Calibration+0x2c4>)
 800a6f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a6f6:	f7f5 fdc9 	bl	800028c <__adddf3>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4620      	mov	r0, r4
 800a700:	4629      	mov	r1, r5
 800a702:	f7f6 f9f5 	bl	8000af0 <__aeabi_dcmple>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 8090 	beq.w	800a82e <Calibration+0x186>
	        {
	            accel[0] += (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800a70e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a712:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a716:	021b      	lsls	r3, r3, #8
 800a718:	b21a      	sxth	r2, r3
 800a71a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a71e:	b21b      	sxth	r3, r3
 800a720:	4313      	orrs	r3, r2
 800a722:	b21b      	sxth	r3, r3
 800a724:	4618      	mov	r0, r3
 800a726:	f7f5 fefd 	bl	8000524 <__aeabi_i2d>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4620      	mov	r0, r4
 800a730:	4629      	mov	r1, r5
 800a732:	f7f5 fdab 	bl	800028c <__adddf3>
 800a736:	4603      	mov	r3, r0
 800a738:	460c      	mov	r4, r1
 800a73a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	            accel[1] += (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800a73e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800a742:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a746:	021b      	lsls	r3, r3, #8
 800a748:	b21a      	sxth	r2, r3
 800a74a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a74e:	b21b      	sxth	r3, r3
 800a750:	4313      	orrs	r3, r2
 800a752:	b21b      	sxth	r3, r3
 800a754:	4618      	mov	r0, r3
 800a756:	f7f5 fee5 	bl	8000524 <__aeabi_i2d>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f5 fd93 	bl	800028c <__adddf3>
 800a766:	4603      	mov	r3, r0
 800a768:	460c      	mov	r4, r1
 800a76a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	            accel[2] += (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800a76e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a772:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a776:	021b      	lsls	r3, r3, #8
 800a778:	b21a      	sxth	r2, r3
 800a77a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a77e:	b21b      	sxth	r3, r3
 800a780:	4313      	orrs	r3, r2
 800a782:	b21b      	sxth	r3, r3
 800a784:	4618      	mov	r0, r3
 800a786:	f7f5 fecd 	bl	8000524 <__aeabi_i2d>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4620      	mov	r0, r4
 800a790:	4629      	mov	r1, r5
 800a792:	f7f5 fd7b 	bl	800028c <__adddf3>
 800a796:	4603      	mov	r3, r0
 800a798:	460c      	mov	r4, r1
 800a79a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	            gyro[0] += (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800a79e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a7a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7a6:	021b      	lsls	r3, r3, #8
 800a7a8:	b21a      	sxth	r2, r3
 800a7aa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a7ae:	b21b      	sxth	r3, r3
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	b21b      	sxth	r3, r3
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7f5 feb5 	bl	8000524 <__aeabi_i2d>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4620      	mov	r0, r4
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	f7f5 fd63 	bl	800028c <__adddf3>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	e9c7 3402 	strd	r3, r4, [r7, #8]
	            gyro[1] += (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800a7ce:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a7d2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a7d6:	021b      	lsls	r3, r3, #8
 800a7d8:	b21a      	sxth	r2, r3
 800a7da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7de:	b21b      	sxth	r3, r3
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	b21b      	sxth	r3, r3
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7f5 fe9d 	bl	8000524 <__aeabi_i2d>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	f7f5 fd4b 	bl	800028c <__adddf3>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	            gyro[2] += (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800a7fe:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800a802:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a806:	021b      	lsls	r3, r3, #8
 800a808:	b21a      	sxth	r2, r3
 800a80a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a80e:	b21b      	sxth	r3, r3
 800a810:	4313      	orrs	r3, r2
 800a812:	b21b      	sxth	r3, r3
 800a814:	4618      	mov	r0, r3
 800a816:	f7f5 fe85 	bl	8000524 <__aeabi_i2d>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	4620      	mov	r0, r4
 800a820:	4629      	mov	r1, r5
 800a822:	f7f5 fd33 	bl	800028c <__adddf3>
 800a826:	4603      	mov	r3, r0
 800a828:	460c      	mov	r4, r1
 800a82a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	        }
	        if (i == (buffersize + 100))
 800a82e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a830:	f7f5 fe78 	bl	8000524 <__aeabi_i2d>
 800a834:	4604      	mov	r4, r0
 800a836:	460d      	mov	r5, r1
 800a838:	f04f 0200 	mov.w	r2, #0
 800a83c:	4b4b      	ldr	r3, [pc, #300]	; (800a96c <Calibration+0x2c4>)
 800a83e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a842:	f7f5 fd23 	bl	800028c <__adddf3>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4620      	mov	r0, r4
 800a84c:	4629      	mov	r1, r5
 800a84e:	f7f6 f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d064      	beq.n	800a922 <Calibration+0x27a>
	        {
	        	AccX_offset = (double)(accel[0] / buffersize) ;
 800a858:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a85c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a860:	f7f5 fff4 	bl	800084c <__aeabi_ddiv>
 800a864:	4603      	mov	r3, r0
 800a866:	460c      	mov	r4, r1
 800a868:	4618      	mov	r0, r3
 800a86a:	4621      	mov	r1, r4
 800a86c:	f7f6 f99c 	bl	8000ba8 <__aeabi_d2f>
 800a870:	4602      	mov	r2, r0
 800a872:	4b3f      	ldr	r3, [pc, #252]	; (800a970 <Calibration+0x2c8>)
 800a874:	601a      	str	r2, [r3, #0]
	        	AccY_offset = (double)(accel[1] / buffersize);
 800a876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a87a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a87e:	f7f5 ffe5 	bl	800084c <__aeabi_ddiv>
 800a882:	4603      	mov	r3, r0
 800a884:	460c      	mov	r4, r1
 800a886:	4618      	mov	r0, r3
 800a888:	4621      	mov	r1, r4
 800a88a:	f7f6 f98d 	bl	8000ba8 <__aeabi_d2f>
 800a88e:	4602      	mov	r2, r0
 800a890:	4b38      	ldr	r3, [pc, #224]	; (800a974 <Calibration+0x2cc>)
 800a892:	601a      	str	r2, [r3, #0]
	        	AccZ_offset = (double)(accel[2] / buffersize) - Accel_Z_corrector;
 800a894:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a89c:	f7f5 ffd6 	bl	800084c <__aeabi_ddiv>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	a42d      	add	r4, pc, #180	; (adr r4, 800a960 <Calibration+0x2b8>)
 800a8aa:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4623      	mov	r3, r4
 800a8b2:	f7f5 fce9 	bl	8000288 <__aeabi_dsub>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	4621      	mov	r1, r4
 800a8be:	f7f6 f973 	bl	8000ba8 <__aeabi_d2f>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	4b2c      	ldr	r3, [pc, #176]	; (800a978 <Calibration+0x2d0>)
 800a8c6:	601a      	str	r2, [r3, #0]
	        	GyroX_offset = (double)(gyro[0] / buffersize);
 800a8c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a8d0:	f7f5 ffbc 	bl	800084c <__aeabi_ddiv>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	4618      	mov	r0, r3
 800a8da:	4621      	mov	r1, r4
 800a8dc:	f7f6 f964 	bl	8000ba8 <__aeabi_d2f>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	4b26      	ldr	r3, [pc, #152]	; (800a97c <Calibration+0x2d4>)
 800a8e4:	601a      	str	r2, [r3, #0]
	        	GyroY_offset = (double)(gyro[1] / buffersize);
 800a8e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a8ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a8ee:	f7f5 ffad 	bl	800084c <__aeabi_ddiv>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	f7f6 f955 	bl	8000ba8 <__aeabi_d2f>
 800a8fe:	4602      	mov	r2, r0
 800a900:	4b1f      	ldr	r3, [pc, #124]	; (800a980 <Calibration+0x2d8>)
 800a902:	601a      	str	r2, [r3, #0]
	        	GyroZ_offset = (double)(gyro[2] / buffersize);
 800a904:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a908:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a90c:	f7f5 ff9e 	bl	800084c <__aeabi_ddiv>
 800a910:	4603      	mov	r3, r0
 800a912:	460c      	mov	r4, r1
 800a914:	4618      	mov	r0, r3
 800a916:	4621      	mov	r1, r4
 800a918:	f7f6 f946 	bl	8000ba8 <__aeabi_d2f>
 800a91c:	4602      	mov	r2, r0
 800a91e:	4b19      	ldr	r3, [pc, #100]	; (800a984 <Calibration+0x2dc>)
 800a920:	601a      	str	r2, [r3, #0]
	        }
	        i++;
 800a922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a924:	3301      	adds	r3, #1
 800a926:	657b      	str	r3, [r7, #84]	; 0x54
		while (i < (buffersize + 101))                  /*!< Dismiss 100 first value */
 800a928:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a92a:	f7f5 fdfb 	bl	8000524 <__aeabi_i2d>
 800a92e:	4604      	mov	r4, r0
 800a930:	460d      	mov	r5, r1
 800a932:	f04f 0200 	mov.w	r2, #0
 800a936:	4b14      	ldr	r3, [pc, #80]	; (800a988 <Calibration+0x2e0>)
 800a938:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a93c:	f7f5 fca6 	bl	800028c <__adddf3>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	4620      	mov	r0, r4
 800a946:	4629      	mov	r1, r5
 800a948:	f7f6 f8c8 	bl	8000adc <__aeabi_dcmplt>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f47f aeb6 	bne.w	800a6c0 <Calibration+0x18>
	    }
}
 800a954:	bf00      	nop
 800a956:	3758      	adds	r7, #88	; 0x58
 800a958:	46bd      	mov	sp, r7
 800a95a:	bdb0      	pop	{r4, r5, r7, pc}
 800a95c:	f3af 8000 	nop.w
 800a960:	00000000 	.word	0x00000000
 800a964:	40cc2900 	.word	0x40cc2900
 800a968:	408f4000 	.word	0x408f4000
 800a96c:	40590000 	.word	0x40590000
 800a970:	20004c18 	.word	0x20004c18
 800a974:	20004c1c 	.word	0x20004c1c
 800a978:	20004c20 	.word	0x20004c20
 800a97c:	20004c24 	.word	0x20004c24
 800a980:	20004c28 	.word	0x20004c28
 800a984:	20004c2c 	.word	0x20004c2c
 800a988:	40594000 	.word	0x40594000
 800a98c:	00000000 	.word	0x00000000

0800a990 <MPU6050_Read_All>:
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 800a990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a994:	b094      	sub	sp, #80	; 0x50
 800a996:	af04      	add	r7, sp, #16
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800a99c:	2364      	movs	r3, #100	; 0x64
 800a99e:	9302      	str	r3, [sp, #8]
 800a9a0:	230e      	movs	r3, #14
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	f107 0308 	add.w	r3, r7, #8
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	223b      	movs	r2, #59	; 0x3b
 800a9ae:	21d0      	movs	r1, #208	; 0xd0
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f003 fc91 	bl	800e2d8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800a9b6:	7a3b      	ldrb	r3, [r7, #8]
 800a9b8:	021b      	lsls	r3, r3, #8
 800a9ba:	b21a      	sxth	r2, r3
 800a9bc:	7a7b      	ldrb	r3, [r7, #9]
 800a9be:	b21b      	sxth	r3, r3
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	b21a      	sxth	r2, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800a9c8:	7abb      	ldrb	r3, [r7, #10]
 800a9ca:	021b      	lsls	r3, r3, #8
 800a9cc:	b21a      	sxth	r2, r3
 800a9ce:	7afb      	ldrb	r3, [r7, #11]
 800a9d0:	b21b      	sxth	r3, r3
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	b21a      	sxth	r2, r3
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800a9da:	7b3b      	ldrb	r3, [r7, #12]
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	b21a      	sxth	r2, r3
 800a9e0:	7b7b      	ldrb	r3, [r7, #13]
 800a9e2:	b21b      	sxth	r3, r3
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	b21a      	sxth	r2, r3
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	021b      	lsls	r3, r3, #8
 800a9f0:	b21a      	sxth	r2, r3
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
 800a9f4:	b21b      	sxth	r3, r3
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800a9fa:	7c3b      	ldrb	r3, [r7, #16]
 800a9fc:	021b      	lsls	r3, r3, #8
 800a9fe:	b21a      	sxth	r2, r3
 800aa00:	7c7b      	ldrb	r3, [r7, #17]
 800aa02:	b21b      	sxth	r3, r3
 800aa04:	4313      	orrs	r3, r2
 800aa06:	b21a      	sxth	r2, r3
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800aa0c:	7cbb      	ldrb	r3, [r7, #18]
 800aa0e:	021b      	lsls	r3, r3, #8
 800aa10:	b21a      	sxth	r2, r3
 800aa12:	7cfb      	ldrb	r3, [r7, #19]
 800aa14:	b21b      	sxth	r3, r3
 800aa16:	4313      	orrs	r3, r2
 800aa18:	b21a      	sxth	r2, r3
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800aa1e:	7d3b      	ldrb	r3, [r7, #20]
 800aa20:	021b      	lsls	r3, r3, #8
 800aa22:	b21a      	sxth	r2, r3
 800aa24:	7d7b      	ldrb	r3, [r7, #21]
 800aa26:	b21b      	sxth	r3, r3
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	b21a      	sxth	r2, r3
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / Acc_scale - AccX_offset / Acc_scale;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7f5 fd74 	bl	8000524 <__aeabi_i2d>
 800aa3c:	4ba6      	ldr	r3, [pc, #664]	; (800acd8 <MPU6050_Read_All+0x348>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	f7f5 ff03 	bl	800084c <__aeabi_ddiv>
 800aa46:	4602      	mov	r2, r0
 800aa48:	460b      	mov	r3, r1
 800aa4a:	4692      	mov	sl, r2
 800aa4c:	469b      	mov	fp, r3
 800aa4e:	4ba3      	ldr	r3, [pc, #652]	; (800acdc <MPU6050_Read_All+0x34c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7f5 fd78 	bl	8000548 <__aeabi_f2d>
 800aa58:	4b9f      	ldr	r3, [pc, #636]	; (800acd8 <MPU6050_Read_All+0x348>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	f7f5 fef5 	bl	800084c <__aeabi_ddiv>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	4650      	mov	r0, sl
 800aa68:	4659      	mov	r1, fp
 800aa6a:	f7f5 fc0d 	bl	8000288 <__aeabi_dsub>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / Acc_scale - AccY_offset / Acc_scale;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7f5 fd50 	bl	8000524 <__aeabi_i2d>
 800aa84:	4b94      	ldr	r3, [pc, #592]	; (800acd8 <MPU6050_Read_All+0x348>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	f7f5 fedf 	bl	800084c <__aeabi_ddiv>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	4692      	mov	sl, r2
 800aa94:	469b      	mov	fp, r3
 800aa96:	4b92      	ldr	r3, [pc, #584]	; (800ace0 <MPU6050_Read_All+0x350>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7f5 fd54 	bl	8000548 <__aeabi_f2d>
 800aaa0:	4b8d      	ldr	r3, [pc, #564]	; (800acd8 <MPU6050_Read_All+0x348>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fed1 	bl	800084c <__aeabi_ddiv>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	4650      	mov	r0, sl
 800aab0:	4659      	mov	r1, fp
 800aab2:	f7f5 fbe9 	bl	8000288 <__aeabi_dsub>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	6839      	ldr	r1, [r7, #0]
 800aabc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector- AccZ_offset / Accel_Z_corrector;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7f5 fd2c 	bl	8000524 <__aeabi_i2d>
 800aacc:	a37e      	add	r3, pc, #504	; (adr r3, 800acc8 <MPU6050_Read_All+0x338>)
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	f7f5 febb 	bl	800084c <__aeabi_ddiv>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4692      	mov	sl, r2
 800aadc:	469b      	mov	fp, r3
 800aade:	4b81      	ldr	r3, [pc, #516]	; (800ace4 <MPU6050_Read_All+0x354>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7f5 fd30 	bl	8000548 <__aeabi_f2d>
 800aae8:	a377      	add	r3, pc, #476	; (adr r3, 800acc8 <MPU6050_Read_All+0x338>)
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	f7f5 fead 	bl	800084c <__aeabi_ddiv>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4650      	mov	r0, sl
 800aaf8:	4659      	mov	r1, fp
 800aafa:	f7f5 fbc5 	bl	8000288 <__aeabi_dsub>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 800ab08:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ab0c:	ee07 3a90 	vmov	s15, r3
 800ab10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab14:	eddf 6a74 	vldr	s13, [pc, #464]	; 800ace8 <MPU6050_Read_All+0x358>
 800ab18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab1c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800acec <MPU6050_Read_All+0x35c>
 800ab20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / Gyro_scale - GyroX_offset / Gyro_scale;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7f5 fcf7 	bl	8000524 <__aeabi_i2d>
 800ab36:	4b6e      	ldr	r3, [pc, #440]	; (800acf0 <MPU6050_Read_All+0x360>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f7f5 fe86 	bl	800084c <__aeabi_ddiv>
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	4692      	mov	sl, r2
 800ab46:	469b      	mov	fp, r3
 800ab48:	4b6a      	ldr	r3, [pc, #424]	; (800acf4 <MPU6050_Read_All+0x364>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7f5 fcfb 	bl	8000548 <__aeabi_f2d>
 800ab52:	4b67      	ldr	r3, [pc, #412]	; (800acf0 <MPU6050_Read_All+0x360>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	f7f5 fe78 	bl	800084c <__aeabi_ddiv>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	4650      	mov	r0, sl
 800ab62:	4659      	mov	r1, fp
 800ab64:	f7f5 fb90 	bl	8000288 <__aeabi_dsub>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / Gyro_scale - GyroY_offset / Gyro_scale ;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7f5 fcd3 	bl	8000524 <__aeabi_i2d>
 800ab7e:	4b5c      	ldr	r3, [pc, #368]	; (800acf0 <MPU6050_Read_All+0x360>)
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f7f5 fe62 	bl	800084c <__aeabi_ddiv>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4692      	mov	sl, r2
 800ab8e:	469b      	mov	fp, r3
 800ab90:	4b59      	ldr	r3, [pc, #356]	; (800acf8 <MPU6050_Read_All+0x368>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7f5 fcd7 	bl	8000548 <__aeabi_f2d>
 800ab9a:	4b55      	ldr	r3, [pc, #340]	; (800acf0 <MPU6050_Read_All+0x360>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	f7f5 fe54 	bl	800084c <__aeabi_ddiv>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	4650      	mov	r0, sl
 800abaa:	4659      	mov	r1, fp
 800abac:	f7f5 fb6c 	bl	8000288 <__aeabi_dsub>
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / Gyro_scale - GyroZ_offset / Gyro_scale ;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7f5 fcaf 	bl	8000524 <__aeabi_i2d>
 800abc6:	4b4a      	ldr	r3, [pc, #296]	; (800acf0 <MPU6050_Read_All+0x360>)
 800abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abcc:	f7f5 fe3e 	bl	800084c <__aeabi_ddiv>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4692      	mov	sl, r2
 800abd6:	469b      	mov	fp, r3
 800abd8:	4b48      	ldr	r3, [pc, #288]	; (800acfc <MPU6050_Read_All+0x36c>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7f5 fcb3 	bl	8000548 <__aeabi_f2d>
 800abe2:	4b43      	ldr	r3, [pc, #268]	; (800acf0 <MPU6050_Read_All+0x360>)
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	f7f5 fe30 	bl	800084c <__aeabi_ddiv>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4650      	mov	r0, sl
 800abf2:	4659      	mov	r1, fp
 800abf4:	f7f5 fb48 	bl	8000288 <__aeabi_dsub>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800ac02:	f002 f987 	bl	800cf14 <HAL_GetTick>
 800ac06:	4602      	mov	r2, r0
 800ac08:	4b3d      	ldr	r3, [pc, #244]	; (800ad00 <MPU6050_Read_All+0x370>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7f5 fc78 	bl	8000504 <__aeabi_ui2d>
 800ac14:	f04f 0200 	mov.w	r2, #0
 800ac18:	4b3a      	ldr	r3, [pc, #232]	; (800ad04 <MPU6050_Read_All+0x374>)
 800ac1a:	f7f5 fe17 	bl	800084c <__aeabi_ddiv>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	460b      	mov	r3, r1
 800ac22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800ac26:	f002 f975 	bl	800cf14 <HAL_GetTick>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	4b34      	ldr	r3, [pc, #208]	; (800ad00 <MPU6050_Read_All+0x370>)
 800ac2e:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac36:	461a      	mov	r2, r3
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac3e:	fb03 f202 	mul.w	r2, r3, r2
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ac50:	fb03 f301 	mul.w	r3, r3, r1
 800ac54:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7f5 fc64 	bl	8000524 <__aeabi_i2d>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	ec43 2b10 	vmov	d0, r2, r3
 800ac64:	f008 f81a 	bl	8012c9c <sqrt>
 800ac68:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800ac6c:	f04f 0200 	mov.w	r2, #0
 800ac70:	f04f 0300 	mov.w	r3, #0
 800ac74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ac78:	f7f5 ff26 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d142      	bne.n	800ad08 <MPU6050_Read_All+0x378>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7f5 fc4b 	bl	8000524 <__aeabi_i2d>
 800ac8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac92:	f7f5 fddb 	bl	800084c <__aeabi_ddiv>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	ec43 2b17 	vmov	d7, r2, r3
 800ac9e:	eeb0 0a47 	vmov.f32	s0, s14
 800aca2:	eef0 0a67 	vmov.f32	s1, s15
 800aca6:	f007 fdbf 	bl	8012828 <atan>
 800acaa:	ec51 0b10 	vmov	r0, r1, d0
 800acae:	a308      	add	r3, pc, #32	; (adr r3, 800acd0 <MPU6050_Read_All+0x340>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 fca0 	bl	80005f8 <__aeabi_dmul>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800acc0:	e028      	b.n	800ad14 <MPU6050_Read_All+0x384>
 800acc2:	bf00      	nop
 800acc4:	f3af 8000 	nop.w
 800acc8:	00000000 	.word	0x00000000
 800accc:	40cc2900 	.word	0x40cc2900
 800acd0:	1a63c1f8 	.word	0x1a63c1f8
 800acd4:	404ca5dc 	.word	0x404ca5dc
 800acd8:	20000018 	.word	0x20000018
 800acdc:	20004c18 	.word	0x20004c18
 800ace0:	20004c1c 	.word	0x20004c1c
 800ace4:	20004c20 	.word	0x20004c20
 800ace8:	43aa0000 	.word	0x43aa0000
 800acec:	42121eb8 	.word	0x42121eb8
 800acf0:	20000020 	.word	0x20000020
 800acf4:	20004c24 	.word	0x20004c24
 800acf8:	20004c28 	.word	0x20004c28
 800acfc:	20004c2c 	.word	0x20004c2c
 800ad00:	20008db8 	.word	0x20008db8
 800ad04:	408f4000 	.word	0x408f4000
    } else {
        roll = 0.0;
 800ad08:	f04f 0200 	mov.w	r2, #0
 800ad0c:	f04f 0300 	mov.w	r3, #0
 800ad10:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad1a:	425b      	negs	r3, r3
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7f5 fc01 	bl	8000524 <__aeabi_i2d>
 800ad22:	4682      	mov	sl, r0
 800ad24:	468b      	mov	fp, r1
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7f5 fbf9 	bl	8000524 <__aeabi_i2d>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	ec43 2b11 	vmov	d1, r2, r3
 800ad3a:	ec4b ab10 	vmov	d0, sl, fp
 800ad3e:	f007 ffab 	bl	8012c98 <atan2>
 800ad42:	ec51 0b10 	vmov	r0, r1, d0
 800ad46:	a348      	add	r3, pc, #288	; (adr r3, 800ae68 <MPU6050_Read_All+0x4d8>)
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	f7f5 fc54 	bl	80005f8 <__aeabi_dmul>
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800ad58:	f04f 0200 	mov.w	r2, #0
 800ad5c:	4b3e      	ldr	r3, [pc, #248]	; (800ae58 <MPU6050_Read_All+0x4c8>)
 800ad5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ad62:	f7f5 febb 	bl	8000adc <__aeabi_dcmplt>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00a      	beq.n	800ad82 <MPU6050_Read_All+0x3f2>
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800ad72:	f04f 0200 	mov.w	r2, #0
 800ad76:	4b39      	ldr	r3, [pc, #228]	; (800ae5c <MPU6050_Read_All+0x4cc>)
 800ad78:	f7f5 fece 	bl	8000b18 <__aeabi_dcmpgt>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d114      	bne.n	800adac <MPU6050_Read_All+0x41c>
 800ad82:	f04f 0200 	mov.w	r2, #0
 800ad86:	4b35      	ldr	r3, [pc, #212]	; (800ae5c <MPU6050_Read_All+0x4cc>)
 800ad88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ad8c:	f7f5 fec4 	bl	8000b18 <__aeabi_dcmpgt>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d015      	beq.n	800adc2 <MPU6050_Read_All+0x432>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800ad9c:	f04f 0200 	mov.w	r2, #0
 800ada0:	4b2d      	ldr	r3, [pc, #180]	; (800ae58 <MPU6050_Read_All+0x4c8>)
 800ada2:	f7f5 fe9b 	bl	8000adc <__aeabi_dcmplt>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00a      	beq.n	800adc2 <MPU6050_Read_All+0x432>
        KalmanY.angle = pitch;
 800adac:	492c      	ldr	r1, [pc, #176]	; (800ae60 <MPU6050_Read_All+0x4d0>)
 800adae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800adb2:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800adb6:	6839      	ldr	r1, [r7, #0]
 800adb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800adbc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800adc0:	e014      	b.n	800adec <MPU6050_Read_All+0x45c>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800adc8:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800adcc:	eeb0 1a47 	vmov.f32	s2, s14
 800add0:	eef0 1a67 	vmov.f32	s3, s15
 800add4:	ed97 0b06 	vldr	d0, [r7, #24]
 800add8:	4821      	ldr	r0, [pc, #132]	; (800ae60 <MPU6050_Read_All+0x4d0>)
 800adda:	f000 f849 	bl	800ae70 <Kalman_getAngle>
 800adde:	eeb0 7a40 	vmov.f32	s14, s0
 800ade2:	eef0 7a60 	vmov.f32	s15, s1
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800adf2:	4690      	mov	r8, r2
 800adf4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800adf8:	f04f 0200 	mov.w	r2, #0
 800adfc:	4b17      	ldr	r3, [pc, #92]	; (800ae5c <MPU6050_Read_All+0x4cc>)
 800adfe:	4640      	mov	r0, r8
 800ae00:	4649      	mov	r1, r9
 800ae02:	f7f5 fe89 	bl	8000b18 <__aeabi_dcmpgt>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d008      	beq.n	800ae1e <MPU6050_Read_All+0x48e>
        DataStruct->Gx = -DataStruct->Gx;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800ae12:	4614      	mov	r4, r2
 800ae14:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800ae24:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800ae28:	eeb0 1a47 	vmov.f32	s2, s14
 800ae2c:	eef0 1a67 	vmov.f32	s3, s15
 800ae30:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800ae34:	480b      	ldr	r0, [pc, #44]	; (800ae64 <MPU6050_Read_All+0x4d4>)
 800ae36:	f000 f81b 	bl	800ae70 <Kalman_getAngle>
 800ae3a:	eeb0 7a40 	vmov.f32	s14, s0
 800ae3e:	eef0 7a60 	vmov.f32	s15, s1
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 800ae48:	bf00      	nop
 800ae4a:	3740      	adds	r7, #64	; 0x40
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae52:	bf00      	nop
 800ae54:	f3af 8000 	nop.w
 800ae58:	c0568000 	.word	0xc0568000
 800ae5c:	40568000 	.word	0x40568000
 800ae60:	20000070 	.word	0x20000070
 800ae64:	20000028 	.word	0x20000028
 800ae68:	1a63c1f8 	.word	0x1a63c1f8
 800ae6c:	404ca5dc 	.word	0x404ca5dc

0800ae70 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800ae70:	b5b0      	push	{r4, r5, r7, lr}
 800ae72:	b096      	sub	sp, #88	; 0x58
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	61f8      	str	r0, [r7, #28]
 800ae78:	ed87 0b04 	vstr	d0, [r7, #16]
 800ae7c:	ed87 1b02 	vstr	d1, [r7, #8]
 800ae80:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	4623      	mov	r3, r4
 800ae8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae92:	f7f5 f9f9 	bl	8000288 <__aeabi_dsub>
 800ae96:	4603      	mov	r3, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800aea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aeac:	f7f5 fba4 	bl	80005f8 <__aeabi_dmul>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	f7f5 f9e8 	bl	800028c <__adddf3>
 800aebc:	4603      	mov	r3, r0
 800aebe:	460c      	mov	r4, r1
 800aec0:	69fa      	ldr	r2, [r7, #28]
 800aec2:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800aed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aed6:	f7f5 fb8f 	bl	80005f8 <__aeabi_dmul>
 800aeda:	4602      	mov	r2, r0
 800aedc:	460b      	mov	r3, r1
 800aede:	4610      	mov	r0, r2
 800aee0:	4619      	mov	r1, r3
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800aee8:	f7f5 f9ce 	bl	8000288 <__aeabi_dsub>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4610      	mov	r0, r2
 800aef2:	4619      	mov	r1, r3
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800aefa:	f7f5 f9c5 	bl	8000288 <__aeabi_dsub>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	4610      	mov	r0, r2
 800af04:	4619      	mov	r1, r3
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	f7f5 f9be 	bl	800028c <__adddf3>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	4610      	mov	r0, r2
 800af16:	4619      	mov	r1, r3
 800af18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af1c:	f7f5 fb6c 	bl	80005f8 <__aeabi_dmul>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 f9b0 	bl	800028c <__adddf3>
 800af2c:	4603      	mov	r3, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	69fa      	ldr	r2, [r7, #28]
 800af32:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800af42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af46:	f7f5 fb57 	bl	80005f8 <__aeabi_dmul>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4620      	mov	r0, r4
 800af50:	4629      	mov	r1, r5
 800af52:	f7f5 f999 	bl	8000288 <__aeabi_dsub>
 800af56:	4603      	mov	r3, r0
 800af58:	460c      	mov	r4, r1
 800af5a:	69fa      	ldr	r2, [r7, #28]
 800af5c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800af6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af70:	f7f5 fb42 	bl	80005f8 <__aeabi_dmul>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4620      	mov	r0, r4
 800af7a:	4629      	mov	r1, r5
 800af7c:	f7f5 f984 	bl	8000288 <__aeabi_dsub>
 800af80:	4603      	mov	r3, r0
 800af82:	460c      	mov	r4, r1
 800af84:	69fa      	ldr	r2, [r7, #28]
 800af86:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800af96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af9a:	f7f5 fb2d 	bl	80005f8 <__aeabi_dmul>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4620      	mov	r0, r4
 800afa4:	4629      	mov	r1, r5
 800afa6:	f7f5 f971 	bl	800028c <__adddf3>
 800afaa:	4603      	mov	r3, r0
 800afac:	460c      	mov	r4, r1
 800afae:	69fa      	ldr	r2, [r7, #28]
 800afb0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800afc0:	461a      	mov	r2, r3
 800afc2:	4623      	mov	r3, r4
 800afc4:	f7f5 f962 	bl	800028c <__adddf3>
 800afc8:	4603      	mov	r3, r0
 800afca:	460c      	mov	r4, r1
 800afcc:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800afd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800afda:	f7f5 fc37 	bl	800084c <__aeabi_ddiv>
 800afde:	4603      	mov	r3, r0
 800afe0:	460c      	mov	r4, r1
 800afe2:	e9c7 3408 	strd	r3, r4, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800afec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aff0:	f7f5 fc2c 	bl	800084c <__aeabi_ddiv>
 800aff4:	4603      	mov	r3, r0
 800aff6:	460c      	mov	r4, r1
 800aff8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800b002:	461a      	mov	r2, r3
 800b004:	4623      	mov	r3, r4
 800b006:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b00a:	f7f5 f93d 	bl	8000288 <__aeabi_dsub>
 800b00e:	4603      	mov	r3, r0
 800b010:	460c      	mov	r4, r1
 800b012:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800b01c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b020:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b024:	f7f5 fae8 	bl	80005f8 <__aeabi_dmul>
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	4620      	mov	r0, r4
 800b02e:	4629      	mov	r1, r5
 800b030:	f7f5 f92c 	bl	800028c <__adddf3>
 800b034:	4603      	mov	r3, r0
 800b036:	460c      	mov	r4, r1
 800b038:	69fa      	ldr	r2, [r7, #28]
 800b03a:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800b044:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b048:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4620      	mov	r0, r4
 800b056:	4629      	mov	r1, r5
 800b058:	f7f5 f918 	bl	800028c <__adddf3>
 800b05c:	4603      	mov	r3, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	69fa      	ldr	r2, [r7, #28]
 800b062:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800b06c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800b076:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800b080:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b088:	f7f5 fab6 	bl	80005f8 <__aeabi_dmul>
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	4620      	mov	r0, r4
 800b092:	4629      	mov	r1, r5
 800b094:	f7f5 f8f8 	bl	8000288 <__aeabi_dsub>
 800b098:	4603      	mov	r3, r0
 800b09a:	460c      	mov	r4, r1
 800b09c:	69fa      	ldr	r2, [r7, #28]
 800b09e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800b0a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b0ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b0b0:	f7f5 faa2 	bl	80005f8 <__aeabi_dmul>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	f7f5 f8e4 	bl	8000288 <__aeabi_dsub>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	69fa      	ldr	r2, [r7, #28]
 800b0c6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800b0d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b0d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b0d8:	f7f5 fa8e 	bl	80005f8 <__aeabi_dmul>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	f7f5 f8d0 	bl	8000288 <__aeabi_dsub>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	69fa      	ldr	r2, [r7, #28]
 800b0ee:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800b0f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b0fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b100:	f7f5 fa7a 	bl	80005f8 <__aeabi_dmul>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4620      	mov	r0, r4
 800b10a:	4629      	mov	r1, r5
 800b10c:	f7f5 f8bc 	bl	8000288 <__aeabi_dsub>
 800b110:	4603      	mov	r3, r0
 800b112:	460c      	mov	r4, r1
 800b114:	69fa      	ldr	r2, [r7, #28]
 800b116:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800b120:	ec44 3b17 	vmov	d7, r3, r4
};
 800b124:	eeb0 0a47 	vmov.f32	s0, s14
 800b128:	eef0 0a67 	vmov.f32	s1, s15
 800b12c:	3758      	adds	r7, #88	; 0x58
 800b12e:	46bd      	mov	sp, r7
 800b130:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b134 <PID_l>:

float static error_l, pre_error_l, pre2_error_l, out_l , pre_out_l   , Kp_part_l, Ki_part_l, Kd_part_l, Ts=SAMPLE_TIME/1000.0;
float static error_r, pre_error_r, pre2_error_r, out_r, pre_out_r , Kp_part_r, Ki_part_r, Kd_part_r;

float PID_l( float setpoint_l,float current_l,float Kp,float Ki, float Kd)
		{
 800b134:	b5b0      	push	{r4, r5, r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	ed87 0a05 	vstr	s0, [r7, #20]
 800b13e:	edc7 0a04 	vstr	s1, [r7, #16]
 800b142:	ed87 1a03 	vstr	s2, [r7, #12]
 800b146:	edc7 1a02 	vstr	s3, [r7, #8]
 800b14a:	ed87 2a01 	vstr	s4, [r7, #4]

			pre2_error_l = pre_error_l;
 800b14e:	4b57      	ldr	r3, [pc, #348]	; (800b2ac <PID_l+0x178>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a57      	ldr	r2, [pc, #348]	; (800b2b0 <PID_l+0x17c>)
 800b154:	6013      	str	r3, [r2, #0]
			pre_error_l = error_l;
 800b156:	4b57      	ldr	r3, [pc, #348]	; (800b2b4 <PID_l+0x180>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a54      	ldr	r2, [pc, #336]	; (800b2ac <PID_l+0x178>)
 800b15c:	6013      	str	r3, [r2, #0]
			error_l = setpoint_l - current_l;
 800b15e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b162:	edd7 7a04 	vldr	s15, [r7, #16]
 800b166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b16a:	4b52      	ldr	r3, [pc, #328]	; (800b2b4 <PID_l+0x180>)
 800b16c:	edc3 7a00 	vstr	s15, [r3]
			pre_out_l = out_l;
 800b170:	4b51      	ldr	r3, [pc, #324]	; (800b2b8 <PID_l+0x184>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a51      	ldr	r2, [pc, #324]	; (800b2bc <PID_l+0x188>)
 800b176:	6013      	str	r3, [r2, #0]

			Kp_part_l = Kp * ( error_l - pre_error_l );
 800b178:	4b4e      	ldr	r3, [pc, #312]	; (800b2b4 <PID_l+0x180>)
 800b17a:	ed93 7a00 	vldr	s14, [r3]
 800b17e:	4b4b      	ldr	r3, [pc, #300]	; (800b2ac <PID_l+0x178>)
 800b180:	edd3 7a00 	vldr	s15, [r3]
 800b184:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b188:	edd7 7a03 	vldr	s15, [r7, #12]
 800b18c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b190:	4b4b      	ldr	r3, [pc, #300]	; (800b2c0 <PID_l+0x18c>)
 800b192:	edc3 7a00 	vstr	s15, [r3]
			Ki_part_l = 0.5 * Ki * Ts *( error_l + pre_error_l );
 800b196:	68b8      	ldr	r0, [r7, #8]
 800b198:	f7f5 f9d6 	bl	8000548 <__aeabi_f2d>
 800b19c:	f04f 0200 	mov.w	r2, #0
 800b1a0:	4b48      	ldr	r3, [pc, #288]	; (800b2c4 <PID_l+0x190>)
 800b1a2:	f7f5 fa29 	bl	80005f8 <__aeabi_dmul>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	4625      	mov	r5, r4
 800b1ac:	461c      	mov	r4, r3
 800b1ae:	4b46      	ldr	r3, [pc, #280]	; (800b2c8 <PID_l+0x194>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7f5 f9c8 	bl	8000548 <__aeabi_f2d>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4620      	mov	r0, r4
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f7f5 fa1a 	bl	80005f8 <__aeabi_dmul>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	4625      	mov	r5, r4
 800b1ca:	461c      	mov	r4, r3
 800b1cc:	4b39      	ldr	r3, [pc, #228]	; (800b2b4 <PID_l+0x180>)
 800b1ce:	ed93 7a00 	vldr	s14, [r3]
 800b1d2:	4b36      	ldr	r3, [pc, #216]	; (800b2ac <PID_l+0x178>)
 800b1d4:	edd3 7a00 	vldr	s15, [r3]
 800b1d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1dc:	ee17 0a90 	vmov	r0, s15
 800b1e0:	f7f5 f9b2 	bl	8000548 <__aeabi_f2d>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	f7f5 fa04 	bl	80005f8 <__aeabi_dmul>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	f7f5 fcd6 	bl	8000ba8 <__aeabi_d2f>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	4b33      	ldr	r3, [pc, #204]	; (800b2cc <PID_l+0x198>)
 800b200:	601a      	str	r2, [r3, #0]
			Kd_part_l = Kd / Ts * ( error_l - 2*pre_error_l + pre2_error_l);
 800b202:	4b31      	ldr	r3, [pc, #196]	; (800b2c8 <PID_l+0x194>)
 800b204:	edd3 7a00 	vldr	s15, [r3]
 800b208:	edd7 6a01 	vldr	s13, [r7, #4]
 800b20c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b210:	4b28      	ldr	r3, [pc, #160]	; (800b2b4 <PID_l+0x180>)
 800b212:	edd3 6a00 	vldr	s13, [r3]
 800b216:	4b25      	ldr	r3, [pc, #148]	; (800b2ac <PID_l+0x178>)
 800b218:	edd3 7a00 	vldr	s15, [r3]
 800b21c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b220:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b224:	4b22      	ldr	r3, [pc, #136]	; (800b2b0 <PID_l+0x17c>)
 800b226:	edd3 7a00 	vldr	s15, [r3]
 800b22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b232:	4b27      	ldr	r3, [pc, #156]	; (800b2d0 <PID_l+0x19c>)
 800b234:	edc3 7a00 	vstr	s15, [r3]
			out_l = pre_out_l + Kp_part_l + Ki_part_l + Kd_part_l ;
 800b238:	4b20      	ldr	r3, [pc, #128]	; (800b2bc <PID_l+0x188>)
 800b23a:	ed93 7a00 	vldr	s14, [r3]
 800b23e:	4b20      	ldr	r3, [pc, #128]	; (800b2c0 <PID_l+0x18c>)
 800b240:	edd3 7a00 	vldr	s15, [r3]
 800b244:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b248:	4b20      	ldr	r3, [pc, #128]	; (800b2cc <PID_l+0x198>)
 800b24a:	edd3 7a00 	vldr	s15, [r3]
 800b24e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b252:	4b1f      	ldr	r3, [pc, #124]	; (800b2d0 <PID_l+0x19c>)
 800b254:	edd3 7a00 	vldr	s15, [r3]
 800b258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b25c:	4b16      	ldr	r3, [pc, #88]	; (800b2b8 <PID_l+0x184>)
 800b25e:	edc3 7a00 	vstr	s15, [r3]
			if ( out_l >16799)
 800b262:	4b15      	ldr	r3, [pc, #84]	; (800b2b8 <PID_l+0x184>)
 800b264:	edd3 7a00 	vldr	s15, [r3]
 800b268:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800b2d4 <PID_l+0x1a0>
 800b26c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b274:	dd03      	ble.n	800b27e <PID_l+0x14a>
				{
					out_l =16799;
 800b276:	4b10      	ldr	r3, [pc, #64]	; (800b2b8 <PID_l+0x184>)
 800b278:	4a17      	ldr	r2, [pc, #92]	; (800b2d8 <PID_l+0x1a4>)
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	e00c      	b.n	800b298 <PID_l+0x164>
				}
			else if ( out_l <-16799)
 800b27e:	4b0e      	ldr	r3, [pc, #56]	; (800b2b8 <PID_l+0x184>)
 800b280:	edd3 7a00 	vldr	s15, [r3]
 800b284:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800b2dc <PID_l+0x1a8>
 800b288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b290:	d502      	bpl.n	800b298 <PID_l+0x164>
			{
					out_l = -16799;
 800b292:	4b09      	ldr	r3, [pc, #36]	; (800b2b8 <PID_l+0x184>)
 800b294:	4a12      	ldr	r2, [pc, #72]	; (800b2e0 <PID_l+0x1ac>)
 800b296:	601a      	str	r2, [r3, #0]
//							out_l = MIN_PWM;
//							else
//								out_l =-MIN_PWM;
//
//						}
			return out_l;
 800b298:	4b07      	ldr	r3, [pc, #28]	; (800b2b8 <PID_l+0x184>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	ee07 3a90 	vmov	s15, r3
		}
 800b2a0:	eeb0 0a67 	vmov.f32	s0, s15
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bdb0      	pop	{r4, r5, r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20004c3c 	.word	0x20004c3c
 800b2b0:	20004c40 	.word	0x20004c40
 800b2b4:	20004c38 	.word	0x20004c38
 800b2b8:	20004c44 	.word	0x20004c44
 800b2bc:	20004c48 	.word	0x20004c48
 800b2c0:	20004c4c 	.word	0x20004c4c
 800b2c4:	3fe00000 	.word	0x3fe00000
 800b2c8:	200000b8 	.word	0x200000b8
 800b2cc:	20004c50 	.word	0x20004c50
 800b2d0:	20004c54 	.word	0x20004c54
 800b2d4:	46833e00 	.word	0x46833e00
 800b2d8:	46833e00 	.word	0x46833e00
 800b2dc:	c6833e00 	.word	0xc6833e00
 800b2e0:	c6833e00 	.word	0xc6833e00

0800b2e4 <PID_r>:
float PID_r( float setpoint_r,float current_r,float Kp,float Ki, float Kd)
		{
 800b2e4:	b5b0      	push	{r4, r5, r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	ed87 0a05 	vstr	s0, [r7, #20]
 800b2ee:	edc7 0a04 	vstr	s1, [r7, #16]
 800b2f2:	ed87 1a03 	vstr	s2, [r7, #12]
 800b2f6:	edc7 1a02 	vstr	s3, [r7, #8]
 800b2fa:	ed87 2a01 	vstr	s4, [r7, #4]

			pre2_error_r = pre_error_r;
 800b2fe:	4b57      	ldr	r3, [pc, #348]	; (800b45c <PID_r+0x178>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a57      	ldr	r2, [pc, #348]	; (800b460 <PID_r+0x17c>)
 800b304:	6013      	str	r3, [r2, #0]
			pre_error_r = error_r;
 800b306:	4b57      	ldr	r3, [pc, #348]	; (800b464 <PID_r+0x180>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a54      	ldr	r2, [pc, #336]	; (800b45c <PID_r+0x178>)
 800b30c:	6013      	str	r3, [r2, #0]
			error_r = setpoint_r - current_r;
 800b30e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b312:	edd7 7a04 	vldr	s15, [r7, #16]
 800b316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b31a:	4b52      	ldr	r3, [pc, #328]	; (800b464 <PID_r+0x180>)
 800b31c:	edc3 7a00 	vstr	s15, [r3]
			pre_out_r = out_r;
 800b320:	4b51      	ldr	r3, [pc, #324]	; (800b468 <PID_r+0x184>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a51      	ldr	r2, [pc, #324]	; (800b46c <PID_r+0x188>)
 800b326:	6013      	str	r3, [r2, #0]

			Kp_part_r = Kp * ( error_r - pre_error_r );
 800b328:	4b4e      	ldr	r3, [pc, #312]	; (800b464 <PID_r+0x180>)
 800b32a:	ed93 7a00 	vldr	s14, [r3]
 800b32e:	4b4b      	ldr	r3, [pc, #300]	; (800b45c <PID_r+0x178>)
 800b330:	edd3 7a00 	vldr	s15, [r3]
 800b334:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b338:	edd7 7a03 	vldr	s15, [r7, #12]
 800b33c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b340:	4b4b      	ldr	r3, [pc, #300]	; (800b470 <PID_r+0x18c>)
 800b342:	edc3 7a00 	vstr	s15, [r3]
			Ki_part_r = 0.5 * Ki * Ts *( error_r + pre_error_r );
 800b346:	68b8      	ldr	r0, [r7, #8]
 800b348:	f7f5 f8fe 	bl	8000548 <__aeabi_f2d>
 800b34c:	f04f 0200 	mov.w	r2, #0
 800b350:	4b48      	ldr	r3, [pc, #288]	; (800b474 <PID_r+0x190>)
 800b352:	f7f5 f951 	bl	80005f8 <__aeabi_dmul>
 800b356:	4603      	mov	r3, r0
 800b358:	460c      	mov	r4, r1
 800b35a:	4625      	mov	r5, r4
 800b35c:	461c      	mov	r4, r3
 800b35e:	4b46      	ldr	r3, [pc, #280]	; (800b478 <PID_r+0x194>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f7f5 f8f0 	bl	8000548 <__aeabi_f2d>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	4620      	mov	r0, r4
 800b36e:	4629      	mov	r1, r5
 800b370:	f7f5 f942 	bl	80005f8 <__aeabi_dmul>
 800b374:	4603      	mov	r3, r0
 800b376:	460c      	mov	r4, r1
 800b378:	4625      	mov	r5, r4
 800b37a:	461c      	mov	r4, r3
 800b37c:	4b39      	ldr	r3, [pc, #228]	; (800b464 <PID_r+0x180>)
 800b37e:	ed93 7a00 	vldr	s14, [r3]
 800b382:	4b36      	ldr	r3, [pc, #216]	; (800b45c <PID_r+0x178>)
 800b384:	edd3 7a00 	vldr	s15, [r3]
 800b388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b38c:	ee17 0a90 	vmov	r0, s15
 800b390:	f7f5 f8da 	bl	8000548 <__aeabi_f2d>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	4620      	mov	r0, r4
 800b39a:	4629      	mov	r1, r5
 800b39c:	f7f5 f92c 	bl	80005f8 <__aeabi_dmul>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	460c      	mov	r4, r1
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	f7f5 fbfe 	bl	8000ba8 <__aeabi_d2f>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	4b33      	ldr	r3, [pc, #204]	; (800b47c <PID_r+0x198>)
 800b3b0:	601a      	str	r2, [r3, #0]
			Kd_part_r = Kd / Ts * ( error_r - 2*pre_error_r + pre2_error_r);
 800b3b2:	4b31      	ldr	r3, [pc, #196]	; (800b478 <PID_r+0x194>)
 800b3b4:	edd3 7a00 	vldr	s15, [r3]
 800b3b8:	edd7 6a01 	vldr	s13, [r7, #4]
 800b3bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c0:	4b28      	ldr	r3, [pc, #160]	; (800b464 <PID_r+0x180>)
 800b3c2:	edd3 6a00 	vldr	s13, [r3]
 800b3c6:	4b25      	ldr	r3, [pc, #148]	; (800b45c <PID_r+0x178>)
 800b3c8:	edd3 7a00 	vldr	s15, [r3]
 800b3cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b3d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b3d4:	4b22      	ldr	r3, [pc, #136]	; (800b460 <PID_r+0x17c>)
 800b3d6:	edd3 7a00 	vldr	s15, [r3]
 800b3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e2:	4b27      	ldr	r3, [pc, #156]	; (800b480 <PID_r+0x19c>)
 800b3e4:	edc3 7a00 	vstr	s15, [r3]
			out_r = pre_out_r + Kp_part_r + Ki_part_r + Kd_part_r ;
 800b3e8:	4b20      	ldr	r3, [pc, #128]	; (800b46c <PID_r+0x188>)
 800b3ea:	ed93 7a00 	vldr	s14, [r3]
 800b3ee:	4b20      	ldr	r3, [pc, #128]	; (800b470 <PID_r+0x18c>)
 800b3f0:	edd3 7a00 	vldr	s15, [r3]
 800b3f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3f8:	4b20      	ldr	r3, [pc, #128]	; (800b47c <PID_r+0x198>)
 800b3fa:	edd3 7a00 	vldr	s15, [r3]
 800b3fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b402:	4b1f      	ldr	r3, [pc, #124]	; (800b480 <PID_r+0x19c>)
 800b404:	edd3 7a00 	vldr	s15, [r3]
 800b408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b40c:	4b16      	ldr	r3, [pc, #88]	; (800b468 <PID_r+0x184>)
 800b40e:	edc3 7a00 	vstr	s15, [r3]
			if ( out_r >16799)
 800b412:	4b15      	ldr	r3, [pc, #84]	; (800b468 <PID_r+0x184>)
 800b414:	edd3 7a00 	vldr	s15, [r3]
 800b418:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800b484 <PID_r+0x1a0>
 800b41c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b424:	dd03      	ble.n	800b42e <PID_r+0x14a>
				{
					out_r =16799;
 800b426:	4b10      	ldr	r3, [pc, #64]	; (800b468 <PID_r+0x184>)
 800b428:	4a17      	ldr	r2, [pc, #92]	; (800b488 <PID_r+0x1a4>)
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	e00c      	b.n	800b448 <PID_r+0x164>
				}
			else if ( out_r <-16799)
 800b42e:	4b0e      	ldr	r3, [pc, #56]	; (800b468 <PID_r+0x184>)
 800b430:	edd3 7a00 	vldr	s15, [r3]
 800b434:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800b48c <PID_r+0x1a8>
 800b438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b440:	d502      	bpl.n	800b448 <PID_r+0x164>
				{
					out_r = -16799;
 800b442:	4b09      	ldr	r3, [pc, #36]	; (800b468 <PID_r+0x184>)
 800b444:	4a12      	ldr	r2, [pc, #72]	; (800b490 <PID_r+0x1ac>)
 800b446:	601a      	str	r2, [r3, #0]
//										out_r = MIN_PWM;
//										else
//											out_r =-MIN_PWM;
//
//									}
			return out_r;
 800b448:	4b07      	ldr	r3, [pc, #28]	; (800b468 <PID_r+0x184>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	ee07 3a90 	vmov	s15, r3
		}
 800b450:	eeb0 0a67 	vmov.f32	s0, s15
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bdb0      	pop	{r4, r5, r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20004c5c 	.word	0x20004c5c
 800b460:	20004c60 	.word	0x20004c60
 800b464:	20004c58 	.word	0x20004c58
 800b468:	20004c64 	.word	0x20004c64
 800b46c:	20004c68 	.word	0x20004c68
 800b470:	20004c6c 	.word	0x20004c6c
 800b474:	3fe00000 	.word	0x3fe00000
 800b478:	200000b8 	.word	0x200000b8
 800b47c:	20004c70 	.word	0x20004c70
 800b480:	20004c74 	.word	0x20004c74
 800b484:	46833e00 	.word	0x46833e00
 800b488:	46833e00 	.word	0x46833e00
 800b48c:	c6833e00 	.word	0xc6833e00
 800b490:	c6833e00 	.word	0xc6833e00

0800b494 <run_l>:

// Cap xung PWM cho dong co
void run_l(float  out)
	{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	ed87 0a01 	vstr	s0, [r7, #4]
		out = out*1;
		if (out > 0)
 800b49e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4aa:	dd15      	ble.n	800b4d8 <run_l+0x44>
			{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,out);
 800b4ac:	4b1c      	ldr	r3, [pc, #112]	; (800b520 <run_l+0x8c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4b8:	ee17 2a90 	vmov	r2, s15
 800b4bc:	635a      	str	r2, [r3, #52]	; 0x34

				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b4c4:	4817      	ldr	r0, [pc, #92]	; (800b524 <run_l+0x90>)
 800b4c6:	f002 fca1 	bl	800de0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b4d0:	4814      	ldr	r0, [pc, #80]	; (800b524 <run_l+0x90>)
 800b4d2:	f002 fc9b 	bl	800de0c <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);

				}
		return;
 800b4d6:	e01f      	b.n	800b518 <run_l+0x84>
		else if (out <0)
 800b4d8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e4:	d400      	bmi.n	800b4e8 <run_l+0x54>
		return;
 800b4e6:	e017      	b.n	800b518 <run_l+0x84>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,-out);
 800b4e8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4ec:	eef1 7a67 	vneg.f32	s15, s15
 800b4f0:	4b0b      	ldr	r3, [pc, #44]	; (800b520 <run_l+0x8c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4f8:	ee17 2a90 	vmov	r2, s15
 800b4fc:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 800b4fe:	2201      	movs	r2, #1
 800b500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b504:	4807      	ldr	r0, [pc, #28]	; (800b524 <run_l+0x90>)
 800b506:	f002 fc81 	bl	800de0c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
 800b50a:	2200      	movs	r2, #0
 800b50c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b510:	4804      	ldr	r0, [pc, #16]	; (800b524 <run_l+0x90>)
 800b512:	f002 fc7b 	bl	800de0c <HAL_GPIO_WritePin>
		return;
 800b516:	bf00      	nop
  }
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20008c60 	.word	0x20008c60
 800b524:	40020400 	.word	0x40020400

0800b528 <run_r>:
void run_r(float  out)
	{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	ed87 0a01 	vstr	s0, [r7, #4]
		out = out*1;
		if (out > 0)
 800b532:	edd7 7a01 	vldr	s15, [r7, #4]
 800b536:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b53e:	dd15      	ble.n	800b56c <run_r+0x44>
			{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,out);
 800b540:	4b1c      	ldr	r3, [pc, #112]	; (800b5b4 <run_r+0x8c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	edd7 7a01 	vldr	s15, [r7, #4]
 800b548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b54c:	ee17 2a90 	vmov	r2, s15
 800b550:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_SET);
 800b552:	2201      	movs	r2, #1
 800b554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b558:	4817      	ldr	r0, [pc, #92]	; (800b5b8 <run_r+0x90>)
 800b55a:	f002 fc57 	bl	800de0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_RESET);
 800b55e:	2200      	movs	r2, #0
 800b560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b564:	4814      	ldr	r0, [pc, #80]	; (800b5b8 <run_r+0x90>)
 800b566:	f002 fc51 	bl	800de0c <HAL_GPIO_WritePin>
			{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-out);
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_RESET);
				}
		return;
 800b56a:	e01f      	b.n	800b5ac <run_r+0x84>
		else if (out <0)
 800b56c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b578:	d400      	bmi.n	800b57c <run_r+0x54>
		return;
 800b57a:	e017      	b.n	800b5ac <run_r+0x84>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-out);
 800b57c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b580:	eef1 7a67 	vneg.f32	s15, s15
 800b584:	4b0b      	ldr	r3, [pc, #44]	; (800b5b4 <run_r+0x8c>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b58c:	ee17 2a90 	vmov	r2, s15
 800b590:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_SET);
 800b592:	2201      	movs	r2, #1
 800b594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b598:	4807      	ldr	r0, [pc, #28]	; (800b5b8 <run_r+0x90>)
 800b59a:	f002 fc37 	bl	800de0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_RESET);
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b5a4:	4804      	ldr	r0, [pc, #16]	; (800b5b8 <run_r+0x90>)
 800b5a6:	f002 fc31 	bl	800de0c <HAL_GPIO_WritePin>
		return;
 800b5aa:	bf00      	nop
  }
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	20008c60 	.word	0x20008c60
 800b5b8:	40021000 	.word	0x40021000

0800b5bc <servo_init>:
//			break;
//		}
//	}

void servo_init()
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	4808      	ldr	r0, [pc, #32]	; (800b5e4 <servo_init+0x28>)
 800b5c4:	f004 f8c8 	bl	800f758 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2 );
 800b5c8:	2104      	movs	r1, #4
 800b5ca:	4806      	ldr	r0, [pc, #24]	; (800b5e4 <servo_init+0x28>)
 800b5cc:	f004 f8c4 	bl	800f758 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800b5d0:	2104      	movs	r1, #4
 800b5d2:	4805      	ldr	r0, [pc, #20]	; (800b5e8 <servo_init+0x2c>)
 800b5d4:	f004 f9e8 	bl	800f9a8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800b5d8:	2104      	movs	r1, #4
 800b5da:	4804      	ldr	r0, [pc, #16]	; (800b5ec <servo_init+0x30>)
 800b5dc:	f004 f9e4 	bl	800f9a8 <HAL_TIM_Encoder_Start>
}
 800b5e0:	bf00      	nop
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	20008c60 	.word	0x20008c60
 800b5e8:	20008ca0 	.word	0x20008ca0
 800b5ec:	20008c20 	.word	0x20008c20

0800b5f0 <write_servo>:

void write_servo(float velocity,float pre_velocity, int wheel)
{
 800b5f0:	b590      	push	{r4, r7, lr}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	ed87 0a03 	vstr	s0, [r7, #12]
 800b5fa:	edc7 0a02 	vstr	s1, [r7, #8]
 800b5fe:	6078      	str	r0, [r7, #4]
	switch (wheel){
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 860c 	beq.w	800c220 <write_servo+0xc30>
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d001      	beq.n	800b610 <write_servo+0x20>
				out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,20,100,1);
				run_r(out_right);
			}
		break;
	default:
		break;
 800b60c:	f001 bc0a 	b.w	800ce24 <write_servo+0x1834>
			if (velocity == 0)
 800b610:	edd7 7a03 	vldr	s15, [r7, #12]
 800b614:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61c:	d113      	bne.n	800b646 <write_servo+0x56>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800b61e:	4bce      	ldr	r3, [pc, #824]	; (800b958 <write_servo+0x368>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2200      	movs	r2, #0
 800b624:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1 );
 800b626:	2100      	movs	r1, #0
 800b628:	48cb      	ldr	r0, [pc, #812]	; (800b958 <write_servo+0x368>)
 800b62a:	f004 f8d3 	bl	800f7d4 <HAL_TIM_PWM_Stop>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11 | GPIO_PIN_13,GPIO_PIN_RESET);
 800b62e:	2200      	movs	r2, #0
 800b630:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800b634:	48c9      	ldr	r0, [pc, #804]	; (800b95c <write_servo+0x36c>)
 800b636:	f002 fbe9 	bl	800de0c <HAL_GPIO_WritePin>
				out_l = 0;
 800b63a:	4bc9      	ldr	r3, [pc, #804]	; (800b960 <write_servo+0x370>)
 800b63c:	f04f 0200 	mov.w	r2, #0
 800b640:	601a      	str	r2, [r3, #0]
		break;
 800b642:	f001 bbef 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity )<0.03)
 800b646:	edd7 7a03 	vldr	s15, [r7, #12]
 800b64a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b64e:	ee17 3a90 	vmov	r3, s15
 800b652:	2b00      	cmp	r3, #0
 800b654:	bfb8      	it	lt
 800b656:	425b      	neglt	r3, r3
 800b658:	4618      	mov	r0, r3
 800b65a:	f7f4 ff63 	bl	8000524 <__aeabi_i2d>
 800b65e:	a3b6      	add	r3, pc, #728	; (adr r3, 800b938 <write_servo+0x348>)
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	f7f5 fa3a 	bl	8000adc <__aeabi_dcmplt>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d049      	beq.n	800b702 <write_servo+0x112>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800b66e:	2100      	movs	r1, #0
 800b670:	48b9      	ldr	r0, [pc, #740]	; (800b958 <write_servo+0x368>)
 800b672:	f004 f871 	bl	800f758 <HAL_TIM_PWM_Start>
				out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,120,300,10);
 800b676:	edd7 7a03 	vldr	s15, [r7, #12]
 800b67a:	ed9f 7aba 	vldr	s14, [pc, #744]	; 800b964 <write_servo+0x374>
 800b67e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b682:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b68a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800b968 <write_servo+0x378>
 800b68e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b692:	ee16 0a90 	vmov	r0, s13
 800b696:	f7f4 ff57 	bl	8000548 <__aeabi_f2d>
 800b69a:	a3a9      	add	r3, pc, #676	; (adr r3, 800b940 <write_servo+0x350>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f5 f8d4 	bl	800084c <__aeabi_ddiv>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	f7f5 fa7c 	bl	8000ba8 <__aeabi_d2f>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	edd7 7a02 	vldr	s15, [r7, #8]
 800b6b6:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800b964 <write_servo+0x374>
 800b6ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b6be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b6c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6c6:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 800b968 <write_servo+0x378>
 800b6ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b6ce:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 800b6d2:	eddf 1aa6 	vldr	s3, [pc, #664]	; 800b96c <write_servo+0x37c>
 800b6d6:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 800b970 <write_servo+0x380>
 800b6da:	eef0 0a66 	vmov.f32	s1, s13
 800b6de:	ee00 3a10 	vmov	s0, r3
 800b6e2:	f7ff fd27 	bl	800b134 <PID_l>
 800b6e6:	eef0 7a40 	vmov.f32	s15, s0
 800b6ea:	4ba2      	ldr	r3, [pc, #648]	; (800b974 <write_servo+0x384>)
 800b6ec:	edc3 7a00 	vstr	s15, [r3]
				run_l(out_left);
 800b6f0:	4ba0      	ldr	r3, [pc, #640]	; (800b974 <write_servo+0x384>)
 800b6f2:	edd3 7a00 	vldr	s15, [r3]
 800b6f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b6fa:	f7ff fecb 	bl	800b494 <run_l>
		break;
 800b6fe:	f001 bb91 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.055)
 800b702:	edd7 7a03 	vldr	s15, [r7, #12]
 800b706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b70a:	ee17 3a90 	vmov	r3, s15
 800b70e:	2b00      	cmp	r3, #0
 800b710:	bfb8      	it	lt
 800b712:	425b      	neglt	r3, r3
 800b714:	4618      	mov	r0, r3
 800b716:	f7f4 ff05 	bl	8000524 <__aeabi_i2d>
 800b71a:	a38b      	add	r3, pc, #556	; (adr r3, 800b948 <write_servo+0x358>)
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	f7f5 f9dc 	bl	8000adc <__aeabi_dcmplt>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d049      	beq.n	800b7be <write_servo+0x1ce>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800b72a:	2100      	movs	r1, #0
 800b72c:	488a      	ldr	r0, [pc, #552]	; (800b958 <write_servo+0x368>)
 800b72e:	f004 f813 	bl	800f758 <HAL_TIM_PWM_Start>
							out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,120,600,5);
 800b732:	edd7 7a03 	vldr	s15, [r7, #12]
 800b736:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800b964 <write_servo+0x374>
 800b73a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b73e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b746:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b968 <write_servo+0x378>
 800b74a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b74e:	ee16 0a90 	vmov	r0, s13
 800b752:	f7f4 fef9 	bl	8000548 <__aeabi_f2d>
 800b756:	a37a      	add	r3, pc, #488	; (adr r3, 800b940 <write_servo+0x350>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f5 f876 	bl	800084c <__aeabi_ddiv>
 800b760:	4603      	mov	r3, r0
 800b762:	460c      	mov	r4, r1
 800b764:	4618      	mov	r0, r3
 800b766:	4621      	mov	r1, r4
 800b768:	f7f5 fa1e 	bl	8000ba8 <__aeabi_d2f>
 800b76c:	4603      	mov	r3, r0
 800b76e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b772:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800b964 <write_servo+0x374>
 800b776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b77a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b77e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b782:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800b968 <write_servo+0x378>
 800b786:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b78a:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 800b78e:	eddf 1a7a 	vldr	s3, [pc, #488]	; 800b978 <write_servo+0x388>
 800b792:	ed9f 1a77 	vldr	s2, [pc, #476]	; 800b970 <write_servo+0x380>
 800b796:	eef0 0a66 	vmov.f32	s1, s13
 800b79a:	ee00 3a10 	vmov	s0, r3
 800b79e:	f7ff fcc9 	bl	800b134 <PID_l>
 800b7a2:	eef0 7a40 	vmov.f32	s15, s0
 800b7a6:	4b73      	ldr	r3, [pc, #460]	; (800b974 <write_servo+0x384>)
 800b7a8:	edc3 7a00 	vstr	s15, [r3]
							run_l(out_left);
 800b7ac:	4b71      	ldr	r3, [pc, #452]	; (800b974 <write_servo+0x384>)
 800b7ae:	edd3 7a00 	vldr	s15, [r3]
 800b7b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b7b6:	f7ff fe6d 	bl	800b494 <run_l>
		break;
 800b7ba:	f001 bb33 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.085)
 800b7be:	edd7 7a03 	vldr	s15, [r7, #12]
 800b7c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7c6:	ee17 3a90 	vmov	r3, s15
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bfb8      	it	lt
 800b7ce:	425b      	neglt	r3, r3
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7f4 fea7 	bl	8000524 <__aeabi_i2d>
 800b7d6:	a35e      	add	r3, pc, #376	; (adr r3, 800b950 <write_servo+0x360>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f7f5 f97e 	bl	8000adc <__aeabi_dcmplt>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d049      	beq.n	800b87a <write_servo+0x28a>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	485b      	ldr	r0, [pc, #364]	; (800b958 <write_servo+0x368>)
 800b7ea:	f003 ffb5 	bl	800f758 <HAL_TIM_PWM_Start>
							out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,120,1000,5);
 800b7ee:	edd7 7a03 	vldr	s15, [r7, #12]
 800b7f2:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800b964 <write_servo+0x374>
 800b7f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b7fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b7fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b802:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800b968 <write_servo+0x378>
 800b806:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b80a:	ee16 0a90 	vmov	r0, s13
 800b80e:	f7f4 fe9b 	bl	8000548 <__aeabi_f2d>
 800b812:	a34b      	add	r3, pc, #300	; (adr r3, 800b940 <write_servo+0x350>)
 800b814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b818:	f7f5 f818 	bl	800084c <__aeabi_ddiv>
 800b81c:	4603      	mov	r3, r0
 800b81e:	460c      	mov	r4, r1
 800b820:	4618      	mov	r0, r3
 800b822:	4621      	mov	r1, r4
 800b824:	f7f5 f9c0 	bl	8000ba8 <__aeabi_d2f>
 800b828:	4603      	mov	r3, r0
 800b82a:	edd7 7a02 	vldr	s15, [r7, #8]
 800b82e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b964 <write_servo+0x374>
 800b832:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b836:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b83a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b83e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b968 <write_servo+0x378>
 800b842:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b846:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 800b84a:	eddf 1a4c 	vldr	s3, [pc, #304]	; 800b97c <write_servo+0x38c>
 800b84e:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800b970 <write_servo+0x380>
 800b852:	eef0 0a66 	vmov.f32	s1, s13
 800b856:	ee00 3a10 	vmov	s0, r3
 800b85a:	f7ff fc6b 	bl	800b134 <PID_l>
 800b85e:	eef0 7a40 	vmov.f32	s15, s0
 800b862:	4b44      	ldr	r3, [pc, #272]	; (800b974 <write_servo+0x384>)
 800b864:	edc3 7a00 	vstr	s15, [r3]
							run_l(out_left);
 800b868:	4b42      	ldr	r3, [pc, #264]	; (800b974 <write_servo+0x384>)
 800b86a:	edd3 7a00 	vldr	s15, [r3]
 800b86e:	eeb0 0a67 	vmov.f32	s0, s15
 800b872:	f7ff fe0f 	bl	800b494 <run_l>
		break;
 800b876:	f001 bad5 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.125)
 800b87a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b87e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b882:	ee17 3a90 	vmov	r3, s15
 800b886:	2b00      	cmp	r3, #0
 800b888:	bfb8      	it	lt
 800b88a:	425b      	neglt	r3, r3
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f4 fe49 	bl	8000524 <__aeabi_i2d>
 800b892:	f04f 0200 	mov.w	r2, #0
 800b896:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b89a:	f7f5 f91f 	bl	8000adc <__aeabi_dcmplt>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d071      	beq.n	800b988 <write_servo+0x398>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	482c      	ldr	r0, [pc, #176]	; (800b958 <write_servo+0x368>)
 800b8a8:	f003 ff56 	bl	800f758 <HAL_TIM_PWM_Start>
							out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,150,930,3);
 800b8ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800b8b0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b964 <write_servo+0x374>
 800b8b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b8bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8c0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800b968 <write_servo+0x378>
 800b8c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b8c8:	ee16 0a90 	vmov	r0, s13
 800b8cc:	f7f4 fe3c 	bl	8000548 <__aeabi_f2d>
 800b8d0:	a31b      	add	r3, pc, #108	; (adr r3, 800b940 <write_servo+0x350>)
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f7f4 ffb9 	bl	800084c <__aeabi_ddiv>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	460c      	mov	r4, r1
 800b8de:	4618      	mov	r0, r3
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	f7f5 f961 	bl	8000ba8 <__aeabi_d2f>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b8ec:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b964 <write_servo+0x374>
 800b8f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b8f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8fc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800b968 <write_servo+0x378>
 800b900:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b904:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 800b908:	eddf 1a1d 	vldr	s3, [pc, #116]	; 800b980 <write_servo+0x390>
 800b90c:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800b984 <write_servo+0x394>
 800b910:	eef0 0a66 	vmov.f32	s1, s13
 800b914:	ee00 3a10 	vmov	s0, r3
 800b918:	f7ff fc0c 	bl	800b134 <PID_l>
 800b91c:	eef0 7a40 	vmov.f32	s15, s0
 800b920:	4b14      	ldr	r3, [pc, #80]	; (800b974 <write_servo+0x384>)
 800b922:	edc3 7a00 	vstr	s15, [r3]
							run_l(out_left);
 800b926:	4b13      	ldr	r3, [pc, #76]	; (800b974 <write_servo+0x384>)
 800b928:	edd3 7a00 	vldr	s15, [r3]
 800b92c:	eeb0 0a67 	vmov.f32	s0, s15
 800b930:	f7ff fdb0 	bl	800b494 <run_l>
		break;
 800b934:	f001 ba76 	b.w	800ce24 <write_servo+0x1834>
 800b938:	eb851eb8 	.word	0xeb851eb8
 800b93c:	3f9eb851 	.word	0x3f9eb851
 800b940:	4189374c 	.word	0x4189374c
 800b944:	3fa0e560 	.word	0x3fa0e560
 800b948:	c28f5c29 	.word	0xc28f5c29
 800b94c:	3fac28f5 	.word	0x3fac28f5
 800b950:	5c28f5c3 	.word	0x5c28f5c3
 800b954:	3fb5c28f 	.word	0x3fb5c28f
 800b958:	20008c60 	.word	0x20008c60
 800b95c:	40020400 	.word	0x40020400
 800b960:	20004c44 	.word	0x20004c44
 800b964:	42700000 	.word	0x42700000
 800b968:	40490fdb 	.word	0x40490fdb
 800b96c:	43960000 	.word	0x43960000
 800b970:	42f00000 	.word	0x42f00000
 800b974:	20004c30 	.word	0x20004c30
 800b978:	44160000 	.word	0x44160000
 800b97c:	447a0000 	.word	0x447a0000
 800b980:	44688000 	.word	0x44688000
 800b984:	43160000 	.word	0x43160000
			else if(abs(velocity  )<0.175)
 800b988:	edd7 7a03 	vldr	s15, [r7, #12]
 800b98c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b990:	ee17 3a90 	vmov	r3, s15
 800b994:	2b00      	cmp	r3, #0
 800b996:	bfb8      	it	lt
 800b998:	425b      	neglt	r3, r3
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f4 fdc2 	bl	8000524 <__aeabi_i2d>
 800b9a0:	a3f8      	add	r3, pc, #992	; (adr r3, 800bd84 <write_servo+0x794>)
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f7f5 f899 	bl	8000adc <__aeabi_dcmplt>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d049      	beq.n	800ba44 <write_servo+0x454>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	48eb      	ldr	r0, [pc, #940]	; (800bd60 <write_servo+0x770>)
 800b9b4:	f003 fed0 	bl	800f758 <HAL_TIM_PWM_Start>
							out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,120,700,3);
 800b9b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b9bc:	ed9f 7ae9 	vldr	s14, [pc, #932]	; 800bd64 <write_servo+0x774>
 800b9c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b9c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b9c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9cc:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800bd68 <write_servo+0x778>
 800b9d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b9d4:	ee16 0a90 	vmov	r0, s13
 800b9d8:	f7f4 fdb6 	bl	8000548 <__aeabi_f2d>
 800b9dc:	a3d6      	add	r3, pc, #856	; (adr r3, 800bd38 <write_servo+0x748>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f4 ff33 	bl	800084c <__aeabi_ddiv>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	f7f5 f8db 	bl	8000ba8 <__aeabi_d2f>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	edd7 7a02 	vldr	s15, [r7, #8]
 800b9f8:	ed9f 7ada 	vldr	s14, [pc, #872]	; 800bd64 <write_servo+0x774>
 800b9fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ba00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ba04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba08:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 800bd68 <write_servo+0x778>
 800ba0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ba10:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 800ba14:	eddf 1ad5 	vldr	s3, [pc, #852]	; 800bd6c <write_servo+0x77c>
 800ba18:	ed9f 1ad5 	vldr	s2, [pc, #852]	; 800bd70 <write_servo+0x780>
 800ba1c:	eef0 0a66 	vmov.f32	s1, s13
 800ba20:	ee00 3a10 	vmov	s0, r3
 800ba24:	f7ff fb86 	bl	800b134 <PID_l>
 800ba28:	eef0 7a40 	vmov.f32	s15, s0
 800ba2c:	4bd1      	ldr	r3, [pc, #836]	; (800bd74 <write_servo+0x784>)
 800ba2e:	edc3 7a00 	vstr	s15, [r3]
							run_l(out_left);
 800ba32:	4bd0      	ldr	r3, [pc, #832]	; (800bd74 <write_servo+0x784>)
 800ba34:	edd3 7a00 	vldr	s15, [r3]
 800ba38:	eeb0 0a67 	vmov.f32	s0, s15
 800ba3c:	f7ff fd2a 	bl	800b494 <run_l>
		break;
 800ba40:	f001 b9f0 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.225)
 800ba44:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba4c:	ee17 3a90 	vmov	r3, s15
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	bfb8      	it	lt
 800ba54:	425b      	neglt	r3, r3
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7f4 fd64 	bl	8000524 <__aeabi_i2d>
 800ba5c:	a3b8      	add	r3, pc, #736	; (adr r3, 800bd40 <write_servo+0x750>)
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f7f5 f83b 	bl	8000adc <__aeabi_dcmplt>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d049      	beq.n	800bb00 <write_servo+0x510>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	48bc      	ldr	r0, [pc, #752]	; (800bd60 <write_servo+0x770>)
 800ba70:	f003 fe72 	bl	800f758 <HAL_TIM_PWM_Start>
							out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,120,600,3);
 800ba74:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba78:	ed9f 7aba 	vldr	s14, [pc, #744]	; 800bd64 <write_servo+0x774>
 800ba7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ba80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ba84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba88:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800bd68 <write_servo+0x778>
 800ba8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ba90:	ee16 0a90 	vmov	r0, s13
 800ba94:	f7f4 fd58 	bl	8000548 <__aeabi_f2d>
 800ba98:	a3a7      	add	r3, pc, #668	; (adr r3, 800bd38 <write_servo+0x748>)
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	f7f4 fed5 	bl	800084c <__aeabi_ddiv>
 800baa2:	4603      	mov	r3, r0
 800baa4:	460c      	mov	r4, r1
 800baa6:	4618      	mov	r0, r3
 800baa8:	4621      	mov	r1, r4
 800baaa:	f7f5 f87d 	bl	8000ba8 <__aeabi_d2f>
 800baae:	4603      	mov	r3, r0
 800bab0:	edd7 7a02 	vldr	s15, [r7, #8]
 800bab4:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800bd64 <write_servo+0x774>
 800bab8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800babc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bac0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bac4:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 800bd68 <write_servo+0x778>
 800bac8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bacc:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 800bad0:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800bd78 <write_servo+0x788>
 800bad4:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 800bd70 <write_servo+0x780>
 800bad8:	eef0 0a66 	vmov.f32	s1, s13
 800badc:	ee00 3a10 	vmov	s0, r3
 800bae0:	f7ff fb28 	bl	800b134 <PID_l>
 800bae4:	eef0 7a40 	vmov.f32	s15, s0
 800bae8:	4ba2      	ldr	r3, [pc, #648]	; (800bd74 <write_servo+0x784>)
 800baea:	edc3 7a00 	vstr	s15, [r3]
							run_l(out_left);
 800baee:	4ba1      	ldr	r3, [pc, #644]	; (800bd74 <write_servo+0x784>)
 800baf0:	edd3 7a00 	vldr	s15, [r3]
 800baf4:	eeb0 0a67 	vmov.f32	s0, s15
 800baf8:	f7ff fccc 	bl	800b494 <run_l>
		break;
 800bafc:	f001 b992 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.275)
 800bb00:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb08:	ee17 3a90 	vmov	r3, s15
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	bfb8      	it	lt
 800bb10:	425b      	neglt	r3, r3
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7f4 fd06 	bl	8000524 <__aeabi_i2d>
 800bb18:	a38b      	add	r3, pc, #556	; (adr r3, 800bd48 <write_servo+0x758>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	f7f4 ffdd 	bl	8000adc <__aeabi_dcmplt>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d049      	beq.n	800bbbc <write_servo+0x5cc>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800bb28:	2100      	movs	r1, #0
 800bb2a:	488d      	ldr	r0, [pc, #564]	; (800bd60 <write_servo+0x770>)
 800bb2c:	f003 fe14 	bl	800f758 <HAL_TIM_PWM_Start>
										out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,120,500,1);
 800bb30:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb34:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800bd64 <write_servo+0x774>
 800bb38:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bb3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bb40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bb44:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800bd68 <write_servo+0x778>
 800bb48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bb4c:	ee16 0a90 	vmov	r0, s13
 800bb50:	f7f4 fcfa 	bl	8000548 <__aeabi_f2d>
 800bb54:	a378      	add	r3, pc, #480	; (adr r3, 800bd38 <write_servo+0x748>)
 800bb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5a:	f7f4 fe77 	bl	800084c <__aeabi_ddiv>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	460c      	mov	r4, r1
 800bb62:	4618      	mov	r0, r3
 800bb64:	4621      	mov	r1, r4
 800bb66:	f7f5 f81f 	bl	8000ba8 <__aeabi_d2f>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	edd7 7a02 	vldr	s15, [r7, #8]
 800bb70:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800bd64 <write_servo+0x774>
 800bb74:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bb78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bb7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bb80:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800bd68 <write_servo+0x778>
 800bb84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bb88:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800bb8c:	eddf 1a7b 	vldr	s3, [pc, #492]	; 800bd7c <write_servo+0x78c>
 800bb90:	ed9f 1a77 	vldr	s2, [pc, #476]	; 800bd70 <write_servo+0x780>
 800bb94:	eef0 0a66 	vmov.f32	s1, s13
 800bb98:	ee00 3a10 	vmov	s0, r3
 800bb9c:	f7ff faca 	bl	800b134 <PID_l>
 800bba0:	eef0 7a40 	vmov.f32	s15, s0
 800bba4:	4b73      	ldr	r3, [pc, #460]	; (800bd74 <write_servo+0x784>)
 800bba6:	edc3 7a00 	vstr	s15, [r3]
										run_l(out_left);
 800bbaa:	4b72      	ldr	r3, [pc, #456]	; (800bd74 <write_servo+0x784>)
 800bbac:	edd3 7a00 	vldr	s15, [r3]
 800bbb0:	eeb0 0a67 	vmov.f32	s0, s15
 800bbb4:	f7ff fc6e 	bl	800b494 <run_l>
		break;
 800bbb8:	f001 b934 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.425)
 800bbbc:	edd7 7a03 	vldr	s15, [r7, #12]
 800bbc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbc4:	ee17 3a90 	vmov	r3, s15
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	bfb8      	it	lt
 800bbcc:	425b      	neglt	r3, r3
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7f4 fca8 	bl	8000524 <__aeabi_i2d>
 800bbd4:	a35e      	add	r3, pc, #376	; (adr r3, 800bd50 <write_servo+0x760>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f7f4 ff7f 	bl	8000adc <__aeabi_dcmplt>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d049      	beq.n	800bc78 <write_servo+0x688>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	485e      	ldr	r0, [pc, #376]	; (800bd60 <write_servo+0x770>)
 800bbe8:	f003 fdb6 	bl	800f758 <HAL_TIM_PWM_Start>
										out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,120,500,0);
 800bbec:	edd7 7a03 	vldr	s15, [r7, #12]
 800bbf0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800bd64 <write_servo+0x774>
 800bbf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bbf8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bbfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bc00:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800bd68 <write_servo+0x778>
 800bc04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bc08:	ee16 0a90 	vmov	r0, s13
 800bc0c:	f7f4 fc9c 	bl	8000548 <__aeabi_f2d>
 800bc10:	a349      	add	r3, pc, #292	; (adr r3, 800bd38 <write_servo+0x748>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 fe19 	bl	800084c <__aeabi_ddiv>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	4618      	mov	r0, r3
 800bc20:	4621      	mov	r1, r4
 800bc22:	f7f4 ffc1 	bl	8000ba8 <__aeabi_d2f>
 800bc26:	4603      	mov	r3, r0
 800bc28:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc2c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800bd64 <write_servo+0x774>
 800bc30:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bc34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bc38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bc3c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800bd68 <write_servo+0x778>
 800bc40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bc44:	ed9f 2a4e 	vldr	s4, [pc, #312]	; 800bd80 <write_servo+0x790>
 800bc48:	eddf 1a4c 	vldr	s3, [pc, #304]	; 800bd7c <write_servo+0x78c>
 800bc4c:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800bd70 <write_servo+0x780>
 800bc50:	eef0 0a66 	vmov.f32	s1, s13
 800bc54:	ee00 3a10 	vmov	s0, r3
 800bc58:	f7ff fa6c 	bl	800b134 <PID_l>
 800bc5c:	eef0 7a40 	vmov.f32	s15, s0
 800bc60:	4b44      	ldr	r3, [pc, #272]	; (800bd74 <write_servo+0x784>)
 800bc62:	edc3 7a00 	vstr	s15, [r3]
										run_l(out_left);
 800bc66:	4b43      	ldr	r3, [pc, #268]	; (800bd74 <write_servo+0x784>)
 800bc68:	edd3 7a00 	vldr	s15, [r3]
 800bc6c:	eeb0 0a67 	vmov.f32	s0, s15
 800bc70:	f7ff fc10 	bl	800b494 <run_l>
		break;
 800bc74:	f001 b8d6 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.475)
 800bc78:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc80:	ee17 3a90 	vmov	r3, s15
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	bfb8      	it	lt
 800bc88:	425b      	neglt	r3, r3
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7f4 fc4a 	bl	8000524 <__aeabi_i2d>
 800bc90:	a331      	add	r3, pc, #196	; (adr r3, 800bd58 <write_servo+0x768>)
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	f7f4 ff21 	bl	8000adc <__aeabi_dcmplt>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d075      	beq.n	800bd8c <write_servo+0x79c>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800bca0:	2100      	movs	r1, #0
 800bca2:	482f      	ldr	r0, [pc, #188]	; (800bd60 <write_servo+0x770>)
 800bca4:	f003 fd58 	bl	800f758 <HAL_TIM_PWM_Start>
										out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,120, 700,1);
 800bca8:	edd7 7a03 	vldr	s15, [r7, #12]
 800bcac:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800bd64 <write_servo+0x774>
 800bcb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bcb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bcb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bcbc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800bd68 <write_servo+0x778>
 800bcc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bcc4:	ee16 0a90 	vmov	r0, s13
 800bcc8:	f7f4 fc3e 	bl	8000548 <__aeabi_f2d>
 800bccc:	a31a      	add	r3, pc, #104	; (adr r3, 800bd38 <write_servo+0x748>)
 800bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd2:	f7f4 fdbb 	bl	800084c <__aeabi_ddiv>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	460c      	mov	r4, r1
 800bcda:	4618      	mov	r0, r3
 800bcdc:	4621      	mov	r1, r4
 800bcde:	f7f4 ff63 	bl	8000ba8 <__aeabi_d2f>
 800bce2:	4603      	mov	r3, r0
 800bce4:	edd7 7a02 	vldr	s15, [r7, #8]
 800bce8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800bd64 <write_servo+0x774>
 800bcec:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bcf0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bcf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bcf8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800bd68 <write_servo+0x778>
 800bcfc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bd00:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800bd04:	eddf 1a19 	vldr	s3, [pc, #100]	; 800bd6c <write_servo+0x77c>
 800bd08:	ed9f 1a19 	vldr	s2, [pc, #100]	; 800bd70 <write_servo+0x780>
 800bd0c:	eef0 0a66 	vmov.f32	s1, s13
 800bd10:	ee00 3a10 	vmov	s0, r3
 800bd14:	f7ff fa0e 	bl	800b134 <PID_l>
 800bd18:	eef0 7a40 	vmov.f32	s15, s0
 800bd1c:	4b15      	ldr	r3, [pc, #84]	; (800bd74 <write_servo+0x784>)
 800bd1e:	edc3 7a00 	vstr	s15, [r3]
										run_l(out_left);
 800bd22:	4b14      	ldr	r3, [pc, #80]	; (800bd74 <write_servo+0x784>)
 800bd24:	edd3 7a00 	vldr	s15, [r3]
 800bd28:	eeb0 0a67 	vmov.f32	s0, s15
 800bd2c:	f7ff fbb2 	bl	800b494 <run_l>
		break;
 800bd30:	f001 b878 	b.w	800ce24 <write_servo+0x1834>
 800bd34:	f3af 8000 	nop.w
 800bd38:	4189374c 	.word	0x4189374c
 800bd3c:	3fa0e560 	.word	0x3fa0e560
 800bd40:	cccccccd 	.word	0xcccccccd
 800bd44:	3fcccccc 	.word	0x3fcccccc
 800bd48:	9999999a 	.word	0x9999999a
 800bd4c:	3fd19999 	.word	0x3fd19999
 800bd50:	33333333 	.word	0x33333333
 800bd54:	3fdb3333 	.word	0x3fdb3333
 800bd58:	66666666 	.word	0x66666666
 800bd5c:	3fde6666 	.word	0x3fde6666
 800bd60:	20008c60 	.word	0x20008c60
 800bd64:	42700000 	.word	0x42700000
 800bd68:	40490fdb 	.word	0x40490fdb
 800bd6c:	442f0000 	.word	0x442f0000
 800bd70:	42f00000 	.word	0x42f00000
 800bd74:	20004c30 	.word	0x20004c30
 800bd78:	44160000 	.word	0x44160000
 800bd7c:	43fa0000 	.word	0x43fa0000
 800bd80:	00000000 	.word	0x00000000
 800bd84:	66666666 	.word	0x66666666
 800bd88:	3fc66666 	.word	0x3fc66666
			else if(abs(velocity  )<0.575)
 800bd8c:	edd7 7a03 	vldr	s15, [r7, #12]
 800bd90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd94:	ee17 3a90 	vmov	r3, s15
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	bfb8      	it	lt
 800bd9c:	425b      	neglt	r3, r3
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7f4 fbc0 	bl	8000524 <__aeabi_i2d>
 800bda4:	a3f7      	add	r3, pc, #988	; (adr r3, 800c184 <write_servo+0xb94>)
 800bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdaa:	f7f4 fe97 	bl	8000adc <__aeabi_dcmplt>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d049      	beq.n	800be48 <write_servo+0x858>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	48e8      	ldr	r0, [pc, #928]	; (800c158 <write_servo+0xb68>)
 800bdb8:	f003 fcce 	bl	800f758 <HAL_TIM_PWM_Start>
										out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,120,600,1);
 800bdbc:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdc0:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800c15c <write_servo+0xb6c>
 800bdc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bdc8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bdcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bdd0:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 800c160 <write_servo+0xb70>
 800bdd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bdd8:	ee16 0a90 	vmov	r0, s13
 800bddc:	f7f4 fbb4 	bl	8000548 <__aeabi_f2d>
 800bde0:	a3d5      	add	r3, pc, #852	; (adr r3, 800c138 <write_servo+0xb48>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f7f4 fd31 	bl	800084c <__aeabi_ddiv>
 800bdea:	4603      	mov	r3, r0
 800bdec:	460c      	mov	r4, r1
 800bdee:	4618      	mov	r0, r3
 800bdf0:	4621      	mov	r1, r4
 800bdf2:	f7f4 fed9 	bl	8000ba8 <__aeabi_d2f>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	edd7 7a02 	vldr	s15, [r7, #8]
 800bdfc:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 800c15c <write_servo+0xb6c>
 800be00:	ee27 7a87 	vmul.f32	s14, s15, s14
 800be04:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800be08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be0c:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 800c160 <write_servo+0xb70>
 800be10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800be14:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800be18:	eddf 1ad2 	vldr	s3, [pc, #840]	; 800c164 <write_servo+0xb74>
 800be1c:	ed9f 1ad2 	vldr	s2, [pc, #840]	; 800c168 <write_servo+0xb78>
 800be20:	eef0 0a66 	vmov.f32	s1, s13
 800be24:	ee00 3a10 	vmov	s0, r3
 800be28:	f7ff f984 	bl	800b134 <PID_l>
 800be2c:	eef0 7a40 	vmov.f32	s15, s0
 800be30:	4bce      	ldr	r3, [pc, #824]	; (800c16c <write_servo+0xb7c>)
 800be32:	edc3 7a00 	vstr	s15, [r3]
										run_l(out_left);
 800be36:	4bcd      	ldr	r3, [pc, #820]	; (800c16c <write_servo+0xb7c>)
 800be38:	edd3 7a00 	vldr	s15, [r3]
 800be3c:	eeb0 0a67 	vmov.f32	s0, s15
 800be40:	f7ff fb28 	bl	800b494 <run_l>
		break;
 800be44:	f000 bfee 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.625)
 800be48:	edd7 7a03 	vldr	s15, [r7, #12]
 800be4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be50:	ee17 3a90 	vmov	r3, s15
 800be54:	2b00      	cmp	r3, #0
 800be56:	bfb8      	it	lt
 800be58:	425b      	neglt	r3, r3
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7f4 fb62 	bl	8000524 <__aeabi_i2d>
 800be60:	f04f 0200 	mov.w	r2, #0
 800be64:	4bc2      	ldr	r3, [pc, #776]	; (800c170 <write_servo+0xb80>)
 800be66:	f7f4 fe39 	bl	8000adc <__aeabi_dcmplt>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d049      	beq.n	800bf04 <write_servo+0x914>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800be70:	2100      	movs	r1, #0
 800be72:	48b9      	ldr	r0, [pc, #740]	; (800c158 <write_servo+0xb68>)
 800be74:	f003 fc70 	bl	800f758 <HAL_TIM_PWM_Start>
										out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,120, 500,1);
 800be78:	edd7 7a03 	vldr	s15, [r7, #12]
 800be7c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800c15c <write_servo+0xb6c>
 800be80:	ee27 7a87 	vmul.f32	s14, s15, s14
 800be84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800be88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be8c:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800c160 <write_servo+0xb70>
 800be90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800be94:	ee16 0a90 	vmov	r0, s13
 800be98:	f7f4 fb56 	bl	8000548 <__aeabi_f2d>
 800be9c:	a3a6      	add	r3, pc, #664	; (adr r3, 800c138 <write_servo+0xb48>)
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	f7f4 fcd3 	bl	800084c <__aeabi_ddiv>
 800bea6:	4603      	mov	r3, r0
 800bea8:	460c      	mov	r4, r1
 800beaa:	4618      	mov	r0, r3
 800beac:	4621      	mov	r1, r4
 800beae:	f7f4 fe7b 	bl	8000ba8 <__aeabi_d2f>
 800beb2:	4603      	mov	r3, r0
 800beb4:	edd7 7a02 	vldr	s15, [r7, #8]
 800beb8:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 800c15c <write_servo+0xb6c>
 800bebc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bec0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bec8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800c160 <write_servo+0xb70>
 800becc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bed0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800bed4:	eddf 1aa7 	vldr	s3, [pc, #668]	; 800c174 <write_servo+0xb84>
 800bed8:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 800c168 <write_servo+0xb78>
 800bedc:	eef0 0a66 	vmov.f32	s1, s13
 800bee0:	ee00 3a10 	vmov	s0, r3
 800bee4:	f7ff f926 	bl	800b134 <PID_l>
 800bee8:	eef0 7a40 	vmov.f32	s15, s0
 800beec:	4b9f      	ldr	r3, [pc, #636]	; (800c16c <write_servo+0xb7c>)
 800beee:	edc3 7a00 	vstr	s15, [r3]
										run_l(out_left);
 800bef2:	4b9e      	ldr	r3, [pc, #632]	; (800c16c <write_servo+0xb7c>)
 800bef4:	edd3 7a00 	vldr	s15, [r3]
 800bef8:	eeb0 0a67 	vmov.f32	s0, s15
 800befc:	f7ff faca 	bl	800b494 <run_l>
		break;
 800bf00:	f000 bf90 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.675)
 800bf04:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf0c:	ee17 3a90 	vmov	r3, s15
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bfb8      	it	lt
 800bf14:	425b      	neglt	r3, r3
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7f4 fb04 	bl	8000524 <__aeabi_i2d>
 800bf1c:	a388      	add	r3, pc, #544	; (adr r3, 800c140 <write_servo+0xb50>)
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	f7f4 fddb 	bl	8000adc <__aeabi_dcmplt>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d049      	beq.n	800bfc0 <write_servo+0x9d0>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	488a      	ldr	r0, [pc, #552]	; (800c158 <write_servo+0xb68>)
 800bf30:	f003 fc12 	bl	800f758 <HAL_TIM_PWM_Start>
										out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,100,500,1);
 800bf34:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf38:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800c15c <write_servo+0xb6c>
 800bf3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bf40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bf44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bf48:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800c160 <write_servo+0xb70>
 800bf4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bf50:	ee16 0a90 	vmov	r0, s13
 800bf54:	f7f4 faf8 	bl	8000548 <__aeabi_f2d>
 800bf58:	a377      	add	r3, pc, #476	; (adr r3, 800c138 <write_servo+0xb48>)
 800bf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5e:	f7f4 fc75 	bl	800084c <__aeabi_ddiv>
 800bf62:	4603      	mov	r3, r0
 800bf64:	460c      	mov	r4, r1
 800bf66:	4618      	mov	r0, r3
 800bf68:	4621      	mov	r1, r4
 800bf6a:	f7f4 fe1d 	bl	8000ba8 <__aeabi_d2f>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf74:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800c15c <write_servo+0xb6c>
 800bf78:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bf7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bf80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bf84:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800c160 <write_servo+0xb70>
 800bf88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bf8c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800bf90:	eddf 1a78 	vldr	s3, [pc, #480]	; 800c174 <write_servo+0xb84>
 800bf94:	ed9f 1a78 	vldr	s2, [pc, #480]	; 800c178 <write_servo+0xb88>
 800bf98:	eef0 0a66 	vmov.f32	s1, s13
 800bf9c:	ee00 3a10 	vmov	s0, r3
 800bfa0:	f7ff f8c8 	bl	800b134 <PID_l>
 800bfa4:	eef0 7a40 	vmov.f32	s15, s0
 800bfa8:	4b70      	ldr	r3, [pc, #448]	; (800c16c <write_servo+0xb7c>)
 800bfaa:	edc3 7a00 	vstr	s15, [r3]
										run_l(out_left);
 800bfae:	4b6f      	ldr	r3, [pc, #444]	; (800c16c <write_servo+0xb7c>)
 800bfb0:	edd3 7a00 	vldr	s15, [r3]
 800bfb4:	eeb0 0a67 	vmov.f32	s0, s15
 800bfb8:	f7ff fa6c 	bl	800b494 <run_l>
		break;
 800bfbc:	f000 bf32 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.725)
 800bfc0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfc8:	ee17 3a90 	vmov	r3, s15
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	bfb8      	it	lt
 800bfd0:	425b      	neglt	r3, r3
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7f4 faa6 	bl	8000524 <__aeabi_i2d>
 800bfd8:	a35b      	add	r3, pc, #364	; (adr r3, 800c148 <write_servo+0xb58>)
 800bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfde:	f7f4 fd7d 	bl	8000adc <__aeabi_dcmplt>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d049      	beq.n	800c07c <write_servo+0xa8c>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800bfe8:	2100      	movs	r1, #0
 800bfea:	485b      	ldr	r0, [pc, #364]	; (800c158 <write_servo+0xb68>)
 800bfec:	f003 fbb4 	bl	800f758 <HAL_TIM_PWM_Start>
										out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,80,450,1);
 800bff0:	edd7 7a03 	vldr	s15, [r7, #12]
 800bff4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800c15c <write_servo+0xb6c>
 800bff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bffc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c004:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800c160 <write_servo+0xb70>
 800c008:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c00c:	ee16 0a90 	vmov	r0, s13
 800c010:	f7f4 fa9a 	bl	8000548 <__aeabi_f2d>
 800c014:	a348      	add	r3, pc, #288	; (adr r3, 800c138 <write_servo+0xb48>)
 800c016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01a:	f7f4 fc17 	bl	800084c <__aeabi_ddiv>
 800c01e:	4603      	mov	r3, r0
 800c020:	460c      	mov	r4, r1
 800c022:	4618      	mov	r0, r3
 800c024:	4621      	mov	r1, r4
 800c026:	f7f4 fdbf 	bl	8000ba8 <__aeabi_d2f>
 800c02a:	4603      	mov	r3, r0
 800c02c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c030:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800c15c <write_servo+0xb6c>
 800c034:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c038:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c03c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c040:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800c160 <write_servo+0xb70>
 800c044:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c048:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800c04c:	eddf 1a4b 	vldr	s3, [pc, #300]	; 800c17c <write_servo+0xb8c>
 800c050:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 800c180 <write_servo+0xb90>
 800c054:	eef0 0a66 	vmov.f32	s1, s13
 800c058:	ee00 3a10 	vmov	s0, r3
 800c05c:	f7ff f86a 	bl	800b134 <PID_l>
 800c060:	eef0 7a40 	vmov.f32	s15, s0
 800c064:	4b41      	ldr	r3, [pc, #260]	; (800c16c <write_servo+0xb7c>)
 800c066:	edc3 7a00 	vstr	s15, [r3]
										run_l(out_left);
 800c06a:	4b40      	ldr	r3, [pc, #256]	; (800c16c <write_servo+0xb7c>)
 800c06c:	edd3 7a00 	vldr	s15, [r3]
 800c070:	eeb0 0a67 	vmov.f32	s0, s15
 800c074:	f7ff fa0e 	bl	800b494 <run_l>
		break;
 800c078:	f000 bed4 	b.w	800ce24 <write_servo+0x1834>
			else if(abs(velocity  )<0.775)
 800c07c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c084:	ee17 3a90 	vmov	r3, s15
 800c088:	2b00      	cmp	r3, #0
 800c08a:	bfb8      	it	lt
 800c08c:	425b      	neglt	r3, r3
 800c08e:	4618      	mov	r0, r3
 800c090:	f7f4 fa48 	bl	8000524 <__aeabi_i2d>
 800c094:	a32e      	add	r3, pc, #184	; (adr r3, 800c150 <write_servo+0xb60>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	f7f4 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d073      	beq.n	800c18c <write_servo+0xb9c>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	482c      	ldr	r0, [pc, #176]	; (800c158 <write_servo+0xb68>)
 800c0a8:	f003 fb56 	bl	800f758 <HAL_TIM_PWM_Start>
										out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,30,100,1);
 800c0ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c15c <write_servo+0xb6c>
 800c0b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c0b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c0bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c0c0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800c160 <write_servo+0xb70>
 800c0c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c0c8:	ee16 0a90 	vmov	r0, s13
 800c0cc:	f7f4 fa3c 	bl	8000548 <__aeabi_f2d>
 800c0d0:	a319      	add	r3, pc, #100	; (adr r3, 800c138 <write_servo+0xb48>)
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	f7f4 fbb9 	bl	800084c <__aeabi_ddiv>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	460c      	mov	r4, r1
 800c0de:	4618      	mov	r0, r3
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	f7f4 fd61 	bl	8000ba8 <__aeabi_d2f>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c0ec:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800c15c <write_servo+0xb6c>
 800c0f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c0f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c0f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c0fc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c160 <write_servo+0xb70>
 800c100:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c104:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800c108:	eddf 1a1b 	vldr	s3, [pc, #108]	; 800c178 <write_servo+0xb88>
 800c10c:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 800c110:	eef0 0a66 	vmov.f32	s1, s13
 800c114:	ee00 3a10 	vmov	s0, r3
 800c118:	f7ff f80c 	bl	800b134 <PID_l>
 800c11c:	eef0 7a40 	vmov.f32	s15, s0
 800c120:	4b12      	ldr	r3, [pc, #72]	; (800c16c <write_servo+0xb7c>)
 800c122:	edc3 7a00 	vstr	s15, [r3]
										run_l(out_left);
 800c126:	4b11      	ldr	r3, [pc, #68]	; (800c16c <write_servo+0xb7c>)
 800c128:	edd3 7a00 	vldr	s15, [r3]
 800c12c:	eeb0 0a67 	vmov.f32	s0, s15
 800c130:	f7ff f9b0 	bl	800b494 <run_l>
		break;
 800c134:	f000 be76 	b.w	800ce24 <write_servo+0x1834>
 800c138:	4189374c 	.word	0x4189374c
 800c13c:	3fa0e560 	.word	0x3fa0e560
 800c140:	9999999a 	.word	0x9999999a
 800c144:	3fe59999 	.word	0x3fe59999
 800c148:	33333333 	.word	0x33333333
 800c14c:	3fe73333 	.word	0x3fe73333
 800c150:	cccccccd 	.word	0xcccccccd
 800c154:	3fe8cccc 	.word	0x3fe8cccc
 800c158:	20008c60 	.word	0x20008c60
 800c15c:	42700000 	.word	0x42700000
 800c160:	40490fdb 	.word	0x40490fdb
 800c164:	44160000 	.word	0x44160000
 800c168:	42f00000 	.word	0x42f00000
 800c16c:	20004c30 	.word	0x20004c30
 800c170:	3fe40000 	.word	0x3fe40000
 800c174:	43fa0000 	.word	0x43fa0000
 800c178:	42c80000 	.word	0x42c80000
 800c17c:	43e10000 	.word	0x43e10000
 800c180:	42a00000 	.word	0x42a00000
 800c184:	66666666 	.word	0x66666666
 800c188:	3fe26666 	.word	0x3fe26666
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
 800c18c:	2100      	movs	r1, #0
 800c18e:	48c8      	ldr	r0, [pc, #800]	; (800c4b0 <write_servo+0xec0>)
 800c190:	f003 fae2 	bl	800f758 <HAL_TIM_PWM_Start>
				out_left = PID_l(velocity*MS2RPM,pre_velocity*RADS2RPM,20,100,1);
 800c194:	edd7 7a03 	vldr	s15, [r7, #12]
 800c198:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 800c4b4 <write_servo+0xec4>
 800c19c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c1a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c1a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c1a8:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 800c4b8 <write_servo+0xec8>
 800c1ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c1b0:	ee16 0a90 	vmov	r0, s13
 800c1b4:	f7f4 f9c8 	bl	8000548 <__aeabi_f2d>
 800c1b8:	a3b5      	add	r3, pc, #724	; (adr r3, 800c490 <write_servo+0xea0>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	f7f4 fb45 	bl	800084c <__aeabi_ddiv>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	f7f4 fced 	bl	8000ba8 <__aeabi_d2f>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	edd7 7a02 	vldr	s15, [r7, #8]
 800c1d4:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800c4b4 <write_servo+0xec4>
 800c1d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c1dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c1e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c1e4:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800c4b8 <write_servo+0xec8>
 800c1e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c1ec:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800c1f0:	eddf 1ab2 	vldr	s3, [pc, #712]	; 800c4bc <write_servo+0xecc>
 800c1f4:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 800c1f8:	eef0 0a66 	vmov.f32	s1, s13
 800c1fc:	ee00 3a10 	vmov	s0, r3
 800c200:	f7fe ff98 	bl	800b134 <PID_l>
 800c204:	eef0 7a40 	vmov.f32	s15, s0
 800c208:	4bad      	ldr	r3, [pc, #692]	; (800c4c0 <write_servo+0xed0>)
 800c20a:	edc3 7a00 	vstr	s15, [r3]
				run_l(out_left);
 800c20e:	4bac      	ldr	r3, [pc, #688]	; (800c4c0 <write_servo+0xed0>)
 800c210:	edd3 7a00 	vldr	s15, [r3]
 800c214:	eeb0 0a67 	vmov.f32	s0, s15
 800c218:	f7ff f93c 	bl	800b494 <run_l>
		break;
 800c21c:	f000 be02 	b.w	800ce24 <write_servo+0x1834>
			if (velocity == 0)
 800c220:	edd7 7a03 	vldr	s15, [r7, #12]
 800c224:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22c:	d113      	bne.n	800c256 <write_servo+0xc66>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800c22e:	4ba0      	ldr	r3, [pc, #640]	; (800c4b0 <write_servo+0xec0>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2200      	movs	r2, #0
 800c234:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2 );
 800c236:	2104      	movs	r1, #4
 800c238:	489d      	ldr	r0, [pc, #628]	; (800c4b0 <write_servo+0xec0>)
 800c23a:	f003 facb 	bl	800f7d4 <HAL_TIM_PWM_Stop>
				HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13 | GPIO_PIN_15,GPIO_PIN_RESET);
 800c23e:	2200      	movs	r2, #0
 800c240:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800c244:	489f      	ldr	r0, [pc, #636]	; (800c4c4 <write_servo+0xed4>)
 800c246:	f001 fde1 	bl	800de0c <HAL_GPIO_WritePin>
				out_r = 0;
 800c24a:	4b9f      	ldr	r3, [pc, #636]	; (800c4c8 <write_servo+0xed8>)
 800c24c:	f04f 0200 	mov.w	r2, #0
 800c250:	601a      	str	r2, [r3, #0]
		break;
 800c252:	f000 bde6 	b.w	800ce22 <write_servo+0x1832>
			else if(abs(velocity)<0.03)
 800c256:	edd7 7a03 	vldr	s15, [r7, #12]
 800c25a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c25e:	ee17 3a90 	vmov	r3, s15
 800c262:	2b00      	cmp	r3, #0
 800c264:	bfb8      	it	lt
 800c266:	425b      	neglt	r3, r3
 800c268:	4618      	mov	r0, r3
 800c26a:	f7f4 f95b 	bl	8000524 <__aeabi_i2d>
 800c26e:	a38a      	add	r3, pc, #552	; (adr r3, 800c498 <write_servo+0xea8>)
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	f7f4 fc32 	bl	8000adc <__aeabi_dcmplt>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d049      	beq.n	800c312 <write_servo+0xd22>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800c27e:	2104      	movs	r1, #4
 800c280:	488b      	ldr	r0, [pc, #556]	; (800c4b0 <write_servo+0xec0>)
 800c282:	f003 fa69 	bl	800f758 <HAL_TIM_PWM_Start>
				out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,120,300,10);
 800c286:	edd7 7a03 	vldr	s15, [r7, #12]
 800c28a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c4b4 <write_servo+0xec4>
 800c28e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c292:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c29a:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800c4b8 <write_servo+0xec8>
 800c29e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c2a2:	ee16 0a90 	vmov	r0, s13
 800c2a6:	f7f4 f94f 	bl	8000548 <__aeabi_f2d>
 800c2aa:	a379      	add	r3, pc, #484	; (adr r3, 800c490 <write_servo+0xea0>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7f4 facc 	bl	800084c <__aeabi_ddiv>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	f7f4 fc74 	bl	8000ba8 <__aeabi_d2f>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2c6:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800c4b4 <write_servo+0xec4>
 800c2ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c2ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c2d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c2d6:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800c4b8 <write_servo+0xec8>
 800c2da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c2de:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 800c2e2:	eddf 1a7a 	vldr	s3, [pc, #488]	; 800c4cc <write_servo+0xedc>
 800c2e6:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 800c4d0 <write_servo+0xee0>
 800c2ea:	eef0 0a66 	vmov.f32	s1, s13
 800c2ee:	ee00 3a10 	vmov	s0, r3
 800c2f2:	f7fe fff7 	bl	800b2e4 <PID_r>
 800c2f6:	eef0 7a40 	vmov.f32	s15, s0
 800c2fa:	4b76      	ldr	r3, [pc, #472]	; (800c4d4 <write_servo+0xee4>)
 800c2fc:	edc3 7a00 	vstr	s15, [r3]
				run_r(out_right);
 800c300:	4b74      	ldr	r3, [pc, #464]	; (800c4d4 <write_servo+0xee4>)
 800c302:	edd3 7a00 	vldr	s15, [r3]
 800c306:	eeb0 0a67 	vmov.f32	s0, s15
 800c30a:	f7ff f90d 	bl	800b528 <run_r>
		break;
 800c30e:	f000 bd88 	b.w	800ce22 <write_servo+0x1832>
			else if(abs(velocity  )<0.055)
 800c312:	edd7 7a03 	vldr	s15, [r7, #12]
 800c316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c31a:	ee17 3a90 	vmov	r3, s15
 800c31e:	2b00      	cmp	r3, #0
 800c320:	bfb8      	it	lt
 800c322:	425b      	neglt	r3, r3
 800c324:	4618      	mov	r0, r3
 800c326:	f7f4 f8fd 	bl	8000524 <__aeabi_i2d>
 800c32a:	a35d      	add	r3, pc, #372	; (adr r3, 800c4a0 <write_servo+0xeb0>)
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	f7f4 fbd4 	bl	8000adc <__aeabi_dcmplt>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d049      	beq.n	800c3ce <write_servo+0xdde>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800c33a:	2104      	movs	r1, #4
 800c33c:	485c      	ldr	r0, [pc, #368]	; (800c4b0 <write_servo+0xec0>)
 800c33e:	f003 fa0b 	bl	800f758 <HAL_TIM_PWM_Start>
							out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,120,600,5);
 800c342:	edd7 7a03 	vldr	s15, [r7, #12]
 800c346:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800c4b4 <write_servo+0xec4>
 800c34a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c34e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c356:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800c4b8 <write_servo+0xec8>
 800c35a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c35e:	ee16 0a90 	vmov	r0, s13
 800c362:	f7f4 f8f1 	bl	8000548 <__aeabi_f2d>
 800c366:	a34a      	add	r3, pc, #296	; (adr r3, 800c490 <write_servo+0xea0>)
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f7f4 fa6e 	bl	800084c <__aeabi_ddiv>
 800c370:	4603      	mov	r3, r0
 800c372:	460c      	mov	r4, r1
 800c374:	4618      	mov	r0, r3
 800c376:	4621      	mov	r1, r4
 800c378:	f7f4 fc16 	bl	8000ba8 <__aeabi_d2f>
 800c37c:	4603      	mov	r3, r0
 800c37e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c382:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c4b4 <write_servo+0xec4>
 800c386:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c38a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c38e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c392:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c4b8 <write_servo+0xec8>
 800c396:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c39a:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 800c39e:	eddf 1a4e 	vldr	s3, [pc, #312]	; 800c4d8 <write_servo+0xee8>
 800c3a2:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 800c4d0 <write_servo+0xee0>
 800c3a6:	eef0 0a66 	vmov.f32	s1, s13
 800c3aa:	ee00 3a10 	vmov	s0, r3
 800c3ae:	f7fe ff99 	bl	800b2e4 <PID_r>
 800c3b2:	eef0 7a40 	vmov.f32	s15, s0
 800c3b6:	4b47      	ldr	r3, [pc, #284]	; (800c4d4 <write_servo+0xee4>)
 800c3b8:	edc3 7a00 	vstr	s15, [r3]
							run_r(out_right);
 800c3bc:	4b45      	ldr	r3, [pc, #276]	; (800c4d4 <write_servo+0xee4>)
 800c3be:	edd3 7a00 	vldr	s15, [r3]
 800c3c2:	eeb0 0a67 	vmov.f32	s0, s15
 800c3c6:	f7ff f8af 	bl	800b528 <run_r>
		break;
 800c3ca:	f000 bd2a 	b.w	800ce22 <write_servo+0x1832>
			else if(abs(velocity  )<0.085)
 800c3ce:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3d6:	ee17 3a90 	vmov	r3, s15
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	bfb8      	it	lt
 800c3de:	425b      	neglt	r3, r3
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7f4 f89f 	bl	8000524 <__aeabi_i2d>
 800c3e6:	a330      	add	r3, pc, #192	; (adr r3, 800c4a8 <write_servo+0xeb8>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	f7f4 fb76 	bl	8000adc <__aeabi_dcmplt>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d074      	beq.n	800c4e0 <write_servo+0xef0>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800c3f6:	2104      	movs	r1, #4
 800c3f8:	482d      	ldr	r0, [pc, #180]	; (800c4b0 <write_servo+0xec0>)
 800c3fa:	f003 f9ad 	bl	800f758 <HAL_TIM_PWM_Start>
							out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,120,1000,5);
 800c3fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800c402:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800c4b4 <write_servo+0xec4>
 800c406:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c40a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c40e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c412:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c4b8 <write_servo+0xec8>
 800c416:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c41a:	ee16 0a90 	vmov	r0, s13
 800c41e:	f7f4 f893 	bl	8000548 <__aeabi_f2d>
 800c422:	a31b      	add	r3, pc, #108	; (adr r3, 800c490 <write_servo+0xea0>)
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	f7f4 fa10 	bl	800084c <__aeabi_ddiv>
 800c42c:	4603      	mov	r3, r0
 800c42e:	460c      	mov	r4, r1
 800c430:	4618      	mov	r0, r3
 800c432:	4621      	mov	r1, r4
 800c434:	f7f4 fbb8 	bl	8000ba8 <__aeabi_d2f>
 800c438:	4603      	mov	r3, r0
 800c43a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c43e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c4b4 <write_servo+0xec4>
 800c442:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c446:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c44a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c44e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c4b8 <write_servo+0xec8>
 800c452:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c456:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 800c45a:	eddf 1a20 	vldr	s3, [pc, #128]	; 800c4dc <write_servo+0xeec>
 800c45e:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 800c4d0 <write_servo+0xee0>
 800c462:	eef0 0a66 	vmov.f32	s1, s13
 800c466:	ee00 3a10 	vmov	s0, r3
 800c46a:	f7fe ff3b 	bl	800b2e4 <PID_r>
 800c46e:	eef0 7a40 	vmov.f32	s15, s0
 800c472:	4b18      	ldr	r3, [pc, #96]	; (800c4d4 <write_servo+0xee4>)
 800c474:	edc3 7a00 	vstr	s15, [r3]
							run_r(out_right);
 800c478:	4b16      	ldr	r3, [pc, #88]	; (800c4d4 <write_servo+0xee4>)
 800c47a:	edd3 7a00 	vldr	s15, [r3]
 800c47e:	eeb0 0a67 	vmov.f32	s0, s15
 800c482:	f7ff f851 	bl	800b528 <run_r>
		break;
 800c486:	f000 bccc 	b.w	800ce22 <write_servo+0x1832>
 800c48a:	bf00      	nop
 800c48c:	f3af 8000 	nop.w
 800c490:	4189374c 	.word	0x4189374c
 800c494:	3fa0e560 	.word	0x3fa0e560
 800c498:	eb851eb8 	.word	0xeb851eb8
 800c49c:	3f9eb851 	.word	0x3f9eb851
 800c4a0:	c28f5c29 	.word	0xc28f5c29
 800c4a4:	3fac28f5 	.word	0x3fac28f5
 800c4a8:	5c28f5c3 	.word	0x5c28f5c3
 800c4ac:	3fb5c28f 	.word	0x3fb5c28f
 800c4b0:	20008c60 	.word	0x20008c60
 800c4b4:	42700000 	.word	0x42700000
 800c4b8:	40490fdb 	.word	0x40490fdb
 800c4bc:	42c80000 	.word	0x42c80000
 800c4c0:	20004c30 	.word	0x20004c30
 800c4c4:	40021000 	.word	0x40021000
 800c4c8:	20004c64 	.word	0x20004c64
 800c4cc:	43960000 	.word	0x43960000
 800c4d0:	42f00000 	.word	0x42f00000
 800c4d4:	20004c34 	.word	0x20004c34
 800c4d8:	44160000 	.word	0x44160000
 800c4dc:	447a0000 	.word	0x447a0000
			else if(abs(velocity  )<0.125)
 800c4e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4e8:	ee17 3a90 	vmov	r3, s15
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	bfb8      	it	lt
 800c4f0:	425b      	neglt	r3, r3
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7f4 f816 	bl	8000524 <__aeabi_i2d>
 800c4f8:	f04f 0200 	mov.w	r2, #0
 800c4fc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c500:	f7f4 faec 	bl	8000adc <__aeabi_dcmplt>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d049      	beq.n	800c59e <write_servo+0xfae>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800c50a:	2104      	movs	r1, #4
 800c50c:	48e8      	ldr	r0, [pc, #928]	; (800c8b0 <write_servo+0x12c0>)
 800c50e:	f003 f923 	bl	800f758 <HAL_TIM_PWM_Start>
							out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,150,930,3);
 800c512:	edd7 7a03 	vldr	s15, [r7, #12]
 800c516:	ed9f 7ae7 	vldr	s14, [pc, #924]	; 800c8b4 <write_servo+0x12c4>
 800c51a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c51e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c522:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c526:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800c8b8 <write_servo+0x12c8>
 800c52a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c52e:	ee16 0a90 	vmov	r0, s13
 800c532:	f7f4 f809 	bl	8000548 <__aeabi_f2d>
 800c536:	a3d4      	add	r3, pc, #848	; (adr r3, 800c888 <write_servo+0x1298>)
 800c538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53c:	f7f4 f986 	bl	800084c <__aeabi_ddiv>
 800c540:	4603      	mov	r3, r0
 800c542:	460c      	mov	r4, r1
 800c544:	4618      	mov	r0, r3
 800c546:	4621      	mov	r1, r4
 800c548:	f7f4 fb2e 	bl	8000ba8 <__aeabi_d2f>
 800c54c:	4603      	mov	r3, r0
 800c54e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c552:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 800c8b4 <write_servo+0x12c4>
 800c556:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c55a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c55e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c562:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 800c8b8 <write_servo+0x12c8>
 800c566:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c56a:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 800c56e:	eddf 1ad3 	vldr	s3, [pc, #844]	; 800c8bc <write_servo+0x12cc>
 800c572:	ed9f 1ad3 	vldr	s2, [pc, #844]	; 800c8c0 <write_servo+0x12d0>
 800c576:	eef0 0a66 	vmov.f32	s1, s13
 800c57a:	ee00 3a10 	vmov	s0, r3
 800c57e:	f7fe feb1 	bl	800b2e4 <PID_r>
 800c582:	eef0 7a40 	vmov.f32	s15, s0
 800c586:	4bcf      	ldr	r3, [pc, #828]	; (800c8c4 <write_servo+0x12d4>)
 800c588:	edc3 7a00 	vstr	s15, [r3]
							run_r(out_right);
 800c58c:	4bcd      	ldr	r3, [pc, #820]	; (800c8c4 <write_servo+0x12d4>)
 800c58e:	edd3 7a00 	vldr	s15, [r3]
 800c592:	eeb0 0a67 	vmov.f32	s0, s15
 800c596:	f7fe ffc7 	bl	800b528 <run_r>
		break;
 800c59a:	f000 bc42 	b.w	800ce22 <write_servo+0x1832>
			else if(abs(velocity  )<0.175)
 800c59e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c5a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c5a6:	ee17 3a90 	vmov	r3, s15
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	bfb8      	it	lt
 800c5ae:	425b      	neglt	r3, r3
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7f3 ffb7 	bl	8000524 <__aeabi_i2d>
 800c5b6:	a3b6      	add	r3, pc, #728	; (adr r3, 800c890 <write_servo+0x12a0>)
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	f7f4 fa8e 	bl	8000adc <__aeabi_dcmplt>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d048      	beq.n	800c658 <write_servo+0x1068>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800c5c6:	2104      	movs	r1, #4
 800c5c8:	48b9      	ldr	r0, [pc, #740]	; (800c8b0 <write_servo+0x12c0>)
 800c5ca:	f003 f8c5 	bl	800f758 <HAL_TIM_PWM_Start>
							out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,120,700,3);
 800c5ce:	edd7 7a03 	vldr	s15, [r7, #12]
 800c5d2:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 800c8b4 <write_servo+0x12c4>
 800c5d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c5da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c5de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c5e2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800c8b8 <write_servo+0x12c8>
 800c5e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c5ea:	ee16 0a90 	vmov	r0, s13
 800c5ee:	f7f3 ffab 	bl	8000548 <__aeabi_f2d>
 800c5f2:	a3a5      	add	r3, pc, #660	; (adr r3, 800c888 <write_servo+0x1298>)
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	f7f4 f928 	bl	800084c <__aeabi_ddiv>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	460c      	mov	r4, r1
 800c600:	4618      	mov	r0, r3
 800c602:	4621      	mov	r1, r4
 800c604:	f7f4 fad0 	bl	8000ba8 <__aeabi_d2f>
 800c608:	4603      	mov	r3, r0
 800c60a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c60e:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800c8b4 <write_servo+0x12c4>
 800c612:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c616:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c61a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c61e:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800c8b8 <write_servo+0x12c8>
 800c622:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c626:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 800c62a:	eddf 1aa7 	vldr	s3, [pc, #668]	; 800c8c8 <write_servo+0x12d8>
 800c62e:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800c8cc <write_servo+0x12dc>
 800c632:	eef0 0a66 	vmov.f32	s1, s13
 800c636:	ee00 3a10 	vmov	s0, r3
 800c63a:	f7fe fe53 	bl	800b2e4 <PID_r>
 800c63e:	eef0 7a40 	vmov.f32	s15, s0
 800c642:	4ba0      	ldr	r3, [pc, #640]	; (800c8c4 <write_servo+0x12d4>)
 800c644:	edc3 7a00 	vstr	s15, [r3]
							run_r(out_right);
 800c648:	4b9e      	ldr	r3, [pc, #632]	; (800c8c4 <write_servo+0x12d4>)
 800c64a:	edd3 7a00 	vldr	s15, [r3]
 800c64e:	eeb0 0a67 	vmov.f32	s0, s15
 800c652:	f7fe ff69 	bl	800b528 <run_r>
		break;
 800c656:	e3e4      	b.n	800ce22 <write_servo+0x1832>
			else if(abs(velocity  )<0.225)
 800c658:	edd7 7a03 	vldr	s15, [r7, #12]
 800c65c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c660:	ee17 3a90 	vmov	r3, s15
 800c664:	2b00      	cmp	r3, #0
 800c666:	bfb8      	it	lt
 800c668:	425b      	neglt	r3, r3
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7f3 ff5a 	bl	8000524 <__aeabi_i2d>
 800c670:	a389      	add	r3, pc, #548	; (adr r3, 800c898 <write_servo+0x12a8>)
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	f7f4 fa31 	bl	8000adc <__aeabi_dcmplt>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d048      	beq.n	800c712 <write_servo+0x1122>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800c680:	2104      	movs	r1, #4
 800c682:	488b      	ldr	r0, [pc, #556]	; (800c8b0 <write_servo+0x12c0>)
 800c684:	f003 f868 	bl	800f758 <HAL_TIM_PWM_Start>
							out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,120,600,3);
 800c688:	edd7 7a03 	vldr	s15, [r7, #12]
 800c68c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800c8b4 <write_servo+0x12c4>
 800c690:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c694:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c69c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800c8b8 <write_servo+0x12c8>
 800c6a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c6a4:	ee16 0a90 	vmov	r0, s13
 800c6a8:	f7f3 ff4e 	bl	8000548 <__aeabi_f2d>
 800c6ac:	a376      	add	r3, pc, #472	; (adr r3, 800c888 <write_servo+0x1298>)
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	f7f4 f8cb 	bl	800084c <__aeabi_ddiv>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	460c      	mov	r4, r1
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	4621      	mov	r1, r4
 800c6be:	f7f4 fa73 	bl	8000ba8 <__aeabi_d2f>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c6c8:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800c8b4 <write_servo+0x12c4>
 800c6cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c6d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c6d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c6d8:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800c8b8 <write_servo+0x12c8>
 800c6dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c6e0:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 800c6e4:	eddf 1a7a 	vldr	s3, [pc, #488]	; 800c8d0 <write_servo+0x12e0>
 800c6e8:	ed9f 1a78 	vldr	s2, [pc, #480]	; 800c8cc <write_servo+0x12dc>
 800c6ec:	eef0 0a66 	vmov.f32	s1, s13
 800c6f0:	ee00 3a10 	vmov	s0, r3
 800c6f4:	f7fe fdf6 	bl	800b2e4 <PID_r>
 800c6f8:	eef0 7a40 	vmov.f32	s15, s0
 800c6fc:	4b71      	ldr	r3, [pc, #452]	; (800c8c4 <write_servo+0x12d4>)
 800c6fe:	edc3 7a00 	vstr	s15, [r3]
							run_r(out_right);
 800c702:	4b70      	ldr	r3, [pc, #448]	; (800c8c4 <write_servo+0x12d4>)
 800c704:	edd3 7a00 	vldr	s15, [r3]
 800c708:	eeb0 0a67 	vmov.f32	s0, s15
 800c70c:	f7fe ff0c 	bl	800b528 <run_r>
		break;
 800c710:	e387      	b.n	800ce22 <write_servo+0x1832>
			else if(abs(velocity  )<0.275)
 800c712:	edd7 7a03 	vldr	s15, [r7, #12]
 800c716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c71a:	ee17 3a90 	vmov	r3, s15
 800c71e:	2b00      	cmp	r3, #0
 800c720:	bfb8      	it	lt
 800c722:	425b      	neglt	r3, r3
 800c724:	4618      	mov	r0, r3
 800c726:	f7f3 fefd 	bl	8000524 <__aeabi_i2d>
 800c72a:	a35d      	add	r3, pc, #372	; (adr r3, 800c8a0 <write_servo+0x12b0>)
 800c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c730:	f7f4 f9d4 	bl	8000adc <__aeabi_dcmplt>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d048      	beq.n	800c7cc <write_servo+0x11dc>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800c73a:	2104      	movs	r1, #4
 800c73c:	485c      	ldr	r0, [pc, #368]	; (800c8b0 <write_servo+0x12c0>)
 800c73e:	f003 f80b 	bl	800f758 <HAL_TIM_PWM_Start>
										out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,120,500,1);
 800c742:	edd7 7a03 	vldr	s15, [r7, #12]
 800c746:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800c8b4 <write_servo+0x12c4>
 800c74a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c74e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c756:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800c8b8 <write_servo+0x12c8>
 800c75a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c75e:	ee16 0a90 	vmov	r0, s13
 800c762:	f7f3 fef1 	bl	8000548 <__aeabi_f2d>
 800c766:	a348      	add	r3, pc, #288	; (adr r3, 800c888 <write_servo+0x1298>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f4 f86e 	bl	800084c <__aeabi_ddiv>
 800c770:	4603      	mov	r3, r0
 800c772:	460c      	mov	r4, r1
 800c774:	4618      	mov	r0, r3
 800c776:	4621      	mov	r1, r4
 800c778:	f7f4 fa16 	bl	8000ba8 <__aeabi_d2f>
 800c77c:	4603      	mov	r3, r0
 800c77e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c782:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c8b4 <write_servo+0x12c4>
 800c786:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c78a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c78e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c792:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c8b8 <write_servo+0x12c8>
 800c796:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c79a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800c79e:	eddf 1a4d 	vldr	s3, [pc, #308]	; 800c8d4 <write_servo+0x12e4>
 800c7a2:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 800c8cc <write_servo+0x12dc>
 800c7a6:	eef0 0a66 	vmov.f32	s1, s13
 800c7aa:	ee00 3a10 	vmov	s0, r3
 800c7ae:	f7fe fd99 	bl	800b2e4 <PID_r>
 800c7b2:	eef0 7a40 	vmov.f32	s15, s0
 800c7b6:	4b43      	ldr	r3, [pc, #268]	; (800c8c4 <write_servo+0x12d4>)
 800c7b8:	edc3 7a00 	vstr	s15, [r3]
										run_r(out_right);
 800c7bc:	4b41      	ldr	r3, [pc, #260]	; (800c8c4 <write_servo+0x12d4>)
 800c7be:	edd3 7a00 	vldr	s15, [r3]
 800c7c2:	eeb0 0a67 	vmov.f32	s0, s15
 800c7c6:	f7fe feaf 	bl	800b528 <run_r>
		break;
 800c7ca:	e32a      	b.n	800ce22 <write_servo+0x1832>
			else if(abs(velocity  )<0.425)
 800c7cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800c7d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7d4:	ee17 3a90 	vmov	r3, s15
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	bfb8      	it	lt
 800c7dc:	425b      	neglt	r3, r3
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7f3 fea0 	bl	8000524 <__aeabi_i2d>
 800c7e4:	a330      	add	r3, pc, #192	; (adr r3, 800c8a8 <write_servo+0x12b8>)
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f7f4 f977 	bl	8000adc <__aeabi_dcmplt>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d073      	beq.n	800c8dc <write_servo+0x12ec>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800c7f4:	2104      	movs	r1, #4
 800c7f6:	482e      	ldr	r0, [pc, #184]	; (800c8b0 <write_servo+0x12c0>)
 800c7f8:	f002 ffae 	bl	800f758 <HAL_TIM_PWM_Start>
										out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,120,500,0);
 800c7fc:	edd7 7a03 	vldr	s15, [r7, #12]
 800c800:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800c8b4 <write_servo+0x12c4>
 800c804:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c808:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c80c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c810:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c8b8 <write_servo+0x12c8>
 800c814:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c818:	ee16 0a90 	vmov	r0, s13
 800c81c:	f7f3 fe94 	bl	8000548 <__aeabi_f2d>
 800c820:	a319      	add	r3, pc, #100	; (adr r3, 800c888 <write_servo+0x1298>)
 800c822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c826:	f7f4 f811 	bl	800084c <__aeabi_ddiv>
 800c82a:	4603      	mov	r3, r0
 800c82c:	460c      	mov	r4, r1
 800c82e:	4618      	mov	r0, r3
 800c830:	4621      	mov	r1, r4
 800c832:	f7f4 f9b9 	bl	8000ba8 <__aeabi_d2f>
 800c836:	4603      	mov	r3, r0
 800c838:	edd7 7a02 	vldr	s15, [r7, #8]
 800c83c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c8b4 <write_servo+0x12c4>
 800c840:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c844:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c84c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c8b8 <write_servo+0x12c8>
 800c850:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c854:	ed9f 2a20 	vldr	s4, [pc, #128]	; 800c8d8 <write_servo+0x12e8>
 800c858:	eddf 1a1e 	vldr	s3, [pc, #120]	; 800c8d4 <write_servo+0x12e4>
 800c85c:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 800c8cc <write_servo+0x12dc>
 800c860:	eef0 0a66 	vmov.f32	s1, s13
 800c864:	ee00 3a10 	vmov	s0, r3
 800c868:	f7fe fd3c 	bl	800b2e4 <PID_r>
 800c86c:	eef0 7a40 	vmov.f32	s15, s0
 800c870:	4b14      	ldr	r3, [pc, #80]	; (800c8c4 <write_servo+0x12d4>)
 800c872:	edc3 7a00 	vstr	s15, [r3]
										run_r(out_right);
 800c876:	4b13      	ldr	r3, [pc, #76]	; (800c8c4 <write_servo+0x12d4>)
 800c878:	edd3 7a00 	vldr	s15, [r3]
 800c87c:	eeb0 0a67 	vmov.f32	s0, s15
 800c880:	f7fe fe52 	bl	800b528 <run_r>
		break;
 800c884:	e2cd      	b.n	800ce22 <write_servo+0x1832>
 800c886:	bf00      	nop
 800c888:	4189374c 	.word	0x4189374c
 800c88c:	3fa0e560 	.word	0x3fa0e560
 800c890:	66666666 	.word	0x66666666
 800c894:	3fc66666 	.word	0x3fc66666
 800c898:	cccccccd 	.word	0xcccccccd
 800c89c:	3fcccccc 	.word	0x3fcccccc
 800c8a0:	9999999a 	.word	0x9999999a
 800c8a4:	3fd19999 	.word	0x3fd19999
 800c8a8:	33333333 	.word	0x33333333
 800c8ac:	3fdb3333 	.word	0x3fdb3333
 800c8b0:	20008c60 	.word	0x20008c60
 800c8b4:	42700000 	.word	0x42700000
 800c8b8:	40490fdb 	.word	0x40490fdb
 800c8bc:	44688000 	.word	0x44688000
 800c8c0:	43160000 	.word	0x43160000
 800c8c4:	20004c34 	.word	0x20004c34
 800c8c8:	442f0000 	.word	0x442f0000
 800c8cc:	42f00000 	.word	0x42f00000
 800c8d0:	44160000 	.word	0x44160000
 800c8d4:	43fa0000 	.word	0x43fa0000
 800c8d8:	00000000 	.word	0x00000000
			else if(abs(velocity  )<0.475)
 800c8dc:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8e4:	ee17 3a90 	vmov	r3, s15
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	bfb8      	it	lt
 800c8ec:	425b      	neglt	r3, r3
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7f3 fe18 	bl	8000524 <__aeabi_i2d>
 800c8f4:	a3f6      	add	r3, pc, #984	; (adr r3, 800ccd0 <write_servo+0x16e0>)
 800c8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fa:	f7f4 f8ef 	bl	8000adc <__aeabi_dcmplt>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d048      	beq.n	800c996 <write_servo+0x13a6>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800c904:	2104      	movs	r1, #4
 800c906:	48e6      	ldr	r0, [pc, #920]	; (800cca0 <write_servo+0x16b0>)
 800c908:	f002 ff26 	bl	800f758 <HAL_TIM_PWM_Start>
										out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,120, 700,1);
 800c90c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c910:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800cca4 <write_servo+0x16b4>
 800c914:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c918:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c91c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c920:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 800cca8 <write_servo+0x16b8>
 800c924:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c928:	ee16 0a90 	vmov	r0, s13
 800c92c:	f7f3 fe0c 	bl	8000548 <__aeabi_f2d>
 800c930:	a3d3      	add	r3, pc, #844	; (adr r3, 800cc80 <write_servo+0x1690>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	f7f3 ff89 	bl	800084c <__aeabi_ddiv>
 800c93a:	4603      	mov	r3, r0
 800c93c:	460c      	mov	r4, r1
 800c93e:	4618      	mov	r0, r3
 800c940:	4621      	mov	r1, r4
 800c942:	f7f4 f931 	bl	8000ba8 <__aeabi_d2f>
 800c946:	4603      	mov	r3, r0
 800c948:	edd7 7a02 	vldr	s15, [r7, #8]
 800c94c:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 800cca4 <write_servo+0x16b4>
 800c950:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c954:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c95c:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800cca8 <write_servo+0x16b8>
 800c960:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c964:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800c968:	eddf 1ad0 	vldr	s3, [pc, #832]	; 800ccac <write_servo+0x16bc>
 800c96c:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 800ccb0 <write_servo+0x16c0>
 800c970:	eef0 0a66 	vmov.f32	s1, s13
 800c974:	ee00 3a10 	vmov	s0, r3
 800c978:	f7fe fcb4 	bl	800b2e4 <PID_r>
 800c97c:	eef0 7a40 	vmov.f32	s15, s0
 800c980:	4bcc      	ldr	r3, [pc, #816]	; (800ccb4 <write_servo+0x16c4>)
 800c982:	edc3 7a00 	vstr	s15, [r3]
										run_r(out_right);
 800c986:	4bcb      	ldr	r3, [pc, #812]	; (800ccb4 <write_servo+0x16c4>)
 800c988:	edd3 7a00 	vldr	s15, [r3]
 800c98c:	eeb0 0a67 	vmov.f32	s0, s15
 800c990:	f7fe fdca 	bl	800b528 <run_r>
		break;
 800c994:	e245      	b.n	800ce22 <write_servo+0x1832>
			else if(abs(velocity  )<0.575)
 800c996:	edd7 7a03 	vldr	s15, [r7, #12]
 800c99a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c99e:	ee17 3a90 	vmov	r3, s15
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bfb8      	it	lt
 800c9a6:	425b      	neglt	r3, r3
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7f3 fdbb 	bl	8000524 <__aeabi_i2d>
 800c9ae:	a3b6      	add	r3, pc, #728	; (adr r3, 800cc88 <write_servo+0x1698>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7f4 f892 	bl	8000adc <__aeabi_dcmplt>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d048      	beq.n	800ca50 <write_servo+0x1460>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800c9be:	2104      	movs	r1, #4
 800c9c0:	48b7      	ldr	r0, [pc, #732]	; (800cca0 <write_servo+0x16b0>)
 800c9c2:	f002 fec9 	bl	800f758 <HAL_TIM_PWM_Start>
										out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,120,600,1);
 800c9c6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c9ca:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 800cca4 <write_servo+0x16b4>
 800c9ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c9d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c9d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c9da:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800cca8 <write_servo+0x16b8>
 800c9de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c9e2:	ee16 0a90 	vmov	r0, s13
 800c9e6:	f7f3 fdaf 	bl	8000548 <__aeabi_f2d>
 800c9ea:	a3a5      	add	r3, pc, #660	; (adr r3, 800cc80 <write_servo+0x1690>)
 800c9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f0:	f7f3 ff2c 	bl	800084c <__aeabi_ddiv>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	f7f4 f8d4 	bl	8000ba8 <__aeabi_d2f>
 800ca00:	4603      	mov	r3, r0
 800ca02:	edd7 7a02 	vldr	s15, [r7, #8]
 800ca06:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800cca4 <write_servo+0x16b4>
 800ca0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ca0e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ca12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca16:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800cca8 <write_servo+0x16b8>
 800ca1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ca1e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800ca22:	eddf 1aa5 	vldr	s3, [pc, #660]	; 800ccb8 <write_servo+0x16c8>
 800ca26:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 800ccb0 <write_servo+0x16c0>
 800ca2a:	eef0 0a66 	vmov.f32	s1, s13
 800ca2e:	ee00 3a10 	vmov	s0, r3
 800ca32:	f7fe fc57 	bl	800b2e4 <PID_r>
 800ca36:	eef0 7a40 	vmov.f32	s15, s0
 800ca3a:	4b9e      	ldr	r3, [pc, #632]	; (800ccb4 <write_servo+0x16c4>)
 800ca3c:	edc3 7a00 	vstr	s15, [r3]
										run_r(out_right);
 800ca40:	4b9c      	ldr	r3, [pc, #624]	; (800ccb4 <write_servo+0x16c4>)
 800ca42:	edd3 7a00 	vldr	s15, [r3]
 800ca46:	eeb0 0a67 	vmov.f32	s0, s15
 800ca4a:	f7fe fd6d 	bl	800b528 <run_r>
		break;
 800ca4e:	e1e8      	b.n	800ce22 <write_servo+0x1832>
			else if(abs(velocity  )<0.625)
 800ca50:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca58:	ee17 3a90 	vmov	r3, s15
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	bfb8      	it	lt
 800ca60:	425b      	neglt	r3, r3
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7f3 fd5e 	bl	8000524 <__aeabi_i2d>
 800ca68:	f04f 0200 	mov.w	r2, #0
 800ca6c:	4b93      	ldr	r3, [pc, #588]	; (800ccbc <write_servo+0x16cc>)
 800ca6e:	f7f4 f835 	bl	8000adc <__aeabi_dcmplt>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d048      	beq.n	800cb0a <write_servo+0x151a>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800ca78:	2104      	movs	r1, #4
 800ca7a:	4889      	ldr	r0, [pc, #548]	; (800cca0 <write_servo+0x16b0>)
 800ca7c:	f002 fe6c 	bl	800f758 <HAL_TIM_PWM_Start>
										out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,120, 500,1);
 800ca80:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca84:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800cca4 <write_servo+0x16b4>
 800ca88:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ca8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ca90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca94:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800cca8 <write_servo+0x16b8>
 800ca98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ca9c:	ee16 0a90 	vmov	r0, s13
 800caa0:	f7f3 fd52 	bl	8000548 <__aeabi_f2d>
 800caa4:	a376      	add	r3, pc, #472	; (adr r3, 800cc80 <write_servo+0x1690>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f7f3 fecf 	bl	800084c <__aeabi_ddiv>
 800caae:	4603      	mov	r3, r0
 800cab0:	460c      	mov	r4, r1
 800cab2:	4618      	mov	r0, r3
 800cab4:	4621      	mov	r1, r4
 800cab6:	f7f4 f877 	bl	8000ba8 <__aeabi_d2f>
 800caba:	4603      	mov	r3, r0
 800cabc:	edd7 7a02 	vldr	s15, [r7, #8]
 800cac0:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800cca4 <write_servo+0x16b4>
 800cac4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cac8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cacc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cad0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800cca8 <write_servo+0x16b8>
 800cad4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cad8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800cadc:	eddf 1a78 	vldr	s3, [pc, #480]	; 800ccc0 <write_servo+0x16d0>
 800cae0:	ed9f 1a73 	vldr	s2, [pc, #460]	; 800ccb0 <write_servo+0x16c0>
 800cae4:	eef0 0a66 	vmov.f32	s1, s13
 800cae8:	ee00 3a10 	vmov	s0, r3
 800caec:	f7fe fbfa 	bl	800b2e4 <PID_r>
 800caf0:	eef0 7a40 	vmov.f32	s15, s0
 800caf4:	4b6f      	ldr	r3, [pc, #444]	; (800ccb4 <write_servo+0x16c4>)
 800caf6:	edc3 7a00 	vstr	s15, [r3]
										run_r(out_right);
 800cafa:	4b6e      	ldr	r3, [pc, #440]	; (800ccb4 <write_servo+0x16c4>)
 800cafc:	edd3 7a00 	vldr	s15, [r3]
 800cb00:	eeb0 0a67 	vmov.f32	s0, s15
 800cb04:	f7fe fd10 	bl	800b528 <run_r>
		break;
 800cb08:	e18b      	b.n	800ce22 <write_servo+0x1832>
			else if(abs(velocity  )<0.675)
 800cb0a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb12:	ee17 3a90 	vmov	r3, s15
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	bfb8      	it	lt
 800cb1a:	425b      	neglt	r3, r3
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7f3 fd01 	bl	8000524 <__aeabi_i2d>
 800cb22:	a35b      	add	r3, pc, #364	; (adr r3, 800cc90 <write_servo+0x16a0>)
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	f7f3 ffd8 	bl	8000adc <__aeabi_dcmplt>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d048      	beq.n	800cbc4 <write_servo+0x15d4>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800cb32:	2104      	movs	r1, #4
 800cb34:	485a      	ldr	r0, [pc, #360]	; (800cca0 <write_servo+0x16b0>)
 800cb36:	f002 fe0f 	bl	800f758 <HAL_TIM_PWM_Start>
										out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,100,500,1);
 800cb3a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb3e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800cca4 <write_servo+0x16b4>
 800cb42:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cb46:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cb4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb4e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800cca8 <write_servo+0x16b8>
 800cb52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cb56:	ee16 0a90 	vmov	r0, s13
 800cb5a:	f7f3 fcf5 	bl	8000548 <__aeabi_f2d>
 800cb5e:	a348      	add	r3, pc, #288	; (adr r3, 800cc80 <write_servo+0x1690>)
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	f7f3 fe72 	bl	800084c <__aeabi_ddiv>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	4621      	mov	r1, r4
 800cb70:	f7f4 f81a 	bl	8000ba8 <__aeabi_d2f>
 800cb74:	4603      	mov	r3, r0
 800cb76:	edd7 7a02 	vldr	s15, [r7, #8]
 800cb7a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800cca4 <write_servo+0x16b4>
 800cb7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cb82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cb86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb8a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800cca8 <write_servo+0x16b8>
 800cb8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cb92:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800cb96:	eddf 1a4a 	vldr	s3, [pc, #296]	; 800ccc0 <write_servo+0x16d0>
 800cb9a:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 800ccc4 <write_servo+0x16d4>
 800cb9e:	eef0 0a66 	vmov.f32	s1, s13
 800cba2:	ee00 3a10 	vmov	s0, r3
 800cba6:	f7fe fb9d 	bl	800b2e4 <PID_r>
 800cbaa:	eef0 7a40 	vmov.f32	s15, s0
 800cbae:	4b41      	ldr	r3, [pc, #260]	; (800ccb4 <write_servo+0x16c4>)
 800cbb0:	edc3 7a00 	vstr	s15, [r3]
										run_r(out_right);
 800cbb4:	4b3f      	ldr	r3, [pc, #252]	; (800ccb4 <write_servo+0x16c4>)
 800cbb6:	edd3 7a00 	vldr	s15, [r3]
 800cbba:	eeb0 0a67 	vmov.f32	s0, s15
 800cbbe:	f7fe fcb3 	bl	800b528 <run_r>
		break;
 800cbc2:	e12e      	b.n	800ce22 <write_servo+0x1832>
			else if(abs(velocity  )<0.725)
 800cbc4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cbcc:	ee17 3a90 	vmov	r3, s15
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	bfb8      	it	lt
 800cbd4:	425b      	neglt	r3, r3
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7f3 fca4 	bl	8000524 <__aeabi_i2d>
 800cbdc:	a32e      	add	r3, pc, #184	; (adr r3, 800cc98 <write_servo+0x16a8>)
 800cbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe2:	f7f3 ff7b 	bl	8000adc <__aeabi_dcmplt>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d075      	beq.n	800ccd8 <write_servo+0x16e8>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800cbec:	2104      	movs	r1, #4
 800cbee:	482c      	ldr	r0, [pc, #176]	; (800cca0 <write_servo+0x16b0>)
 800cbf0:	f002 fdb2 	bl	800f758 <HAL_TIM_PWM_Start>
										out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,80,450,1);
 800cbf4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbf8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800cca4 <write_servo+0x16b4>
 800cbfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cc04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc08:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800cca8 <write_servo+0x16b8>
 800cc0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cc10:	ee16 0a90 	vmov	r0, s13
 800cc14:	f7f3 fc98 	bl	8000548 <__aeabi_f2d>
 800cc18:	a319      	add	r3, pc, #100	; (adr r3, 800cc80 <write_servo+0x1690>)
 800cc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1e:	f7f3 fe15 	bl	800084c <__aeabi_ddiv>
 800cc22:	4603      	mov	r3, r0
 800cc24:	460c      	mov	r4, r1
 800cc26:	4618      	mov	r0, r3
 800cc28:	4621      	mov	r1, r4
 800cc2a:	f7f3 ffbd 	bl	8000ba8 <__aeabi_d2f>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	edd7 7a02 	vldr	s15, [r7, #8]
 800cc34:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800cca4 <write_servo+0x16b4>
 800cc38:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cc40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc44:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800cca8 <write_servo+0x16b8>
 800cc48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cc4c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800cc50:	eddf 1a1d 	vldr	s3, [pc, #116]	; 800ccc8 <write_servo+0x16d8>
 800cc54:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800cccc <write_servo+0x16dc>
 800cc58:	eef0 0a66 	vmov.f32	s1, s13
 800cc5c:	ee00 3a10 	vmov	s0, r3
 800cc60:	f7fe fb40 	bl	800b2e4 <PID_r>
 800cc64:	eef0 7a40 	vmov.f32	s15, s0
 800cc68:	4b12      	ldr	r3, [pc, #72]	; (800ccb4 <write_servo+0x16c4>)
 800cc6a:	edc3 7a00 	vstr	s15, [r3]
										run_r(out_right);
 800cc6e:	4b11      	ldr	r3, [pc, #68]	; (800ccb4 <write_servo+0x16c4>)
 800cc70:	edd3 7a00 	vldr	s15, [r3]
 800cc74:	eeb0 0a67 	vmov.f32	s0, s15
 800cc78:	f7fe fc56 	bl	800b528 <run_r>
		break;
 800cc7c:	e0d1      	b.n	800ce22 <write_servo+0x1832>
 800cc7e:	bf00      	nop
 800cc80:	4189374c 	.word	0x4189374c
 800cc84:	3fa0e560 	.word	0x3fa0e560
 800cc88:	66666666 	.word	0x66666666
 800cc8c:	3fe26666 	.word	0x3fe26666
 800cc90:	9999999a 	.word	0x9999999a
 800cc94:	3fe59999 	.word	0x3fe59999
 800cc98:	33333333 	.word	0x33333333
 800cc9c:	3fe73333 	.word	0x3fe73333
 800cca0:	20008c60 	.word	0x20008c60
 800cca4:	42700000 	.word	0x42700000
 800cca8:	40490fdb 	.word	0x40490fdb
 800ccac:	442f0000 	.word	0x442f0000
 800ccb0:	42f00000 	.word	0x42f00000
 800ccb4:	20004c34 	.word	0x20004c34
 800ccb8:	44160000 	.word	0x44160000
 800ccbc:	3fe40000 	.word	0x3fe40000
 800ccc0:	43fa0000 	.word	0x43fa0000
 800ccc4:	42c80000 	.word	0x42c80000
 800ccc8:	43e10000 	.word	0x43e10000
 800cccc:	42a00000 	.word	0x42a00000
 800ccd0:	66666666 	.word	0x66666666
 800ccd4:	3fde6666 	.word	0x3fde6666
			else if(abs(velocity  )<0.775)
 800ccd8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cce0:	ee17 3a90 	vmov	r3, s15
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	bfb8      	it	lt
 800cce8:	425b      	neglt	r3, r3
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7f3 fc1a 	bl	8000524 <__aeabi_i2d>
 800ccf0:	a356      	add	r3, pc, #344	; (adr r3, 800ce4c <write_servo+0x185c>)
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	f7f3 fef1 	bl	8000adc <__aeabi_dcmplt>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d048      	beq.n	800cd92 <write_servo+0x17a2>
							HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800cd00:	2104      	movs	r1, #4
 800cd02:	484d      	ldr	r0, [pc, #308]	; (800ce38 <write_servo+0x1848>)
 800cd04:	f002 fd28 	bl	800f758 <HAL_TIM_PWM_Start>
										out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,30,100,1);
 800cd08:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd0c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ce3c <write_servo+0x184c>
 800cd10:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cd14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cd18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd1c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800ce40 <write_servo+0x1850>
 800cd20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cd24:	ee16 0a90 	vmov	r0, s13
 800cd28:	f7f3 fc0e 	bl	8000548 <__aeabi_f2d>
 800cd2c:	a340      	add	r3, pc, #256	; (adr r3, 800ce30 <write_servo+0x1840>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	f7f3 fd8b 	bl	800084c <__aeabi_ddiv>
 800cd36:	4603      	mov	r3, r0
 800cd38:	460c      	mov	r4, r1
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	f7f3 ff33 	bl	8000ba8 <__aeabi_d2f>
 800cd42:	4603      	mov	r3, r0
 800cd44:	edd7 7a02 	vldr	s15, [r7, #8]
 800cd48:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800ce3c <write_servo+0x184c>
 800cd4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cd50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cd54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd58:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800ce40 <write_servo+0x1850>
 800cd5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cd60:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800cd64:	eddf 1a37 	vldr	s3, [pc, #220]	; 800ce44 <write_servo+0x1854>
 800cd68:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 800cd6c:	eef0 0a66 	vmov.f32	s1, s13
 800cd70:	ee00 3a10 	vmov	s0, r3
 800cd74:	f7fe fab6 	bl	800b2e4 <PID_r>
 800cd78:	eef0 7a40 	vmov.f32	s15, s0
 800cd7c:	4b32      	ldr	r3, [pc, #200]	; (800ce48 <write_servo+0x1858>)
 800cd7e:	edc3 7a00 	vstr	s15, [r3]
										run_r(out_right);
 800cd82:	4b31      	ldr	r3, [pc, #196]	; (800ce48 <write_servo+0x1858>)
 800cd84:	edd3 7a00 	vldr	s15, [r3]
 800cd88:	eeb0 0a67 	vmov.f32	s0, s15
 800cd8c:	f7fe fbcc 	bl	800b528 <run_r>
		break;
 800cd90:	e047      	b.n	800ce22 <write_servo+0x1832>
				HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800cd92:	2104      	movs	r1, #4
 800cd94:	4828      	ldr	r0, [pc, #160]	; (800ce38 <write_servo+0x1848>)
 800cd96:	f002 fcdf 	bl	800f758 <HAL_TIM_PWM_Start>
				out_right = PID_r(velocity*MS2RPM,pre_velocity*RADS2RPM,20,100,1);
 800cd9a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd9e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800ce3c <write_servo+0x184c>
 800cda2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cda6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cdaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdae:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800ce40 <write_servo+0x1850>
 800cdb2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cdb6:	ee16 0a90 	vmov	r0, s13
 800cdba:	f7f3 fbc5 	bl	8000548 <__aeabi_f2d>
 800cdbe:	a31c      	add	r3, pc, #112	; (adr r3, 800ce30 <write_servo+0x1840>)
 800cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc4:	f7f3 fd42 	bl	800084c <__aeabi_ddiv>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	4618      	mov	r0, r3
 800cdce:	4621      	mov	r1, r4
 800cdd0:	f7f3 feea 	bl	8000ba8 <__aeabi_d2f>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	edd7 7a02 	vldr	s15, [r7, #8]
 800cdda:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800ce3c <write_servo+0x184c>
 800cdde:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cde2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cde6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800ce40 <write_servo+0x1850>
 800cdee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cdf2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800cdf6:	eddf 1a13 	vldr	s3, [pc, #76]	; 800ce44 <write_servo+0x1854>
 800cdfa:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 800cdfe:	eef0 0a66 	vmov.f32	s1, s13
 800ce02:	ee00 3a10 	vmov	s0, r3
 800ce06:	f7fe fa6d 	bl	800b2e4 <PID_r>
 800ce0a:	eef0 7a40 	vmov.f32	s15, s0
 800ce0e:	4b0e      	ldr	r3, [pc, #56]	; (800ce48 <write_servo+0x1858>)
 800ce10:	edc3 7a00 	vstr	s15, [r3]
				run_r(out_right);
 800ce14:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <write_servo+0x1858>)
 800ce16:	edd3 7a00 	vldr	s15, [r3]
 800ce1a:	eeb0 0a67 	vmov.f32	s0, s15
 800ce1e:	f7fe fb83 	bl	800b528 <run_r>
		break;
 800ce22:	bf00      	nop
	}

}
 800ce24:	bf00      	nop
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd90      	pop	{r4, r7, pc}
 800ce2c:	f3af 8000 	nop.w
 800ce30:	4189374c 	.word	0x4189374c
 800ce34:	3fa0e560 	.word	0x3fa0e560
 800ce38:	20008c60 	.word	0x20008c60
 800ce3c:	42700000 	.word	0x42700000
 800ce40:	40490fdb 	.word	0x40490fdb
 800ce44:	42c80000 	.word	0x42c80000
 800ce48:	20004c34 	.word	0x20004c34
 800ce4c:	cccccccd 	.word	0xcccccccd
 800ce50:	3fe8cccc 	.word	0x3fe8cccc

0800ce54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ce58:	4b0b      	ldr	r3, [pc, #44]	; (800ce88 <HAL_Init+0x34>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a0a      	ldr	r2, [pc, #40]	; (800ce88 <HAL_Init+0x34>)
 800ce5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ce62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ce64:	4b08      	ldr	r3, [pc, #32]	; (800ce88 <HAL_Init+0x34>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a07      	ldr	r2, [pc, #28]	; (800ce88 <HAL_Init+0x34>)
 800ce6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce6e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ce70:	2003      	movs	r0, #3
 800ce72:	f000 f94d 	bl	800d110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ce76:	200f      	movs	r0, #15
 800ce78:	f000 f808 	bl	800ce8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ce7c:	f7fc faa2 	bl	80093c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	40023c00 	.word	0x40023c00

0800ce8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ce94:	4b12      	ldr	r3, [pc, #72]	; (800cee0 <HAL_InitTick+0x54>)
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	4b12      	ldr	r3, [pc, #72]	; (800cee4 <HAL_InitTick+0x58>)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cea2:	fbb3 f3f1 	udiv	r3, r3, r1
 800cea6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 f965 	bl	800d17a <HAL_SYSTICK_Config>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d001      	beq.n	800ceba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e00e      	b.n	800ced8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b0f      	cmp	r3, #15
 800cebe:	d80a      	bhi.n	800ced6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cec0:	2200      	movs	r2, #0
 800cec2:	6879      	ldr	r1, [r7, #4]
 800cec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cec8:	f000 f92d 	bl	800d126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800cecc:	4a06      	ldr	r2, [pc, #24]	; (800cee8 <HAL_InitTick+0x5c>)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ced2:	2300      	movs	r3, #0
 800ced4:	e000      	b.n	800ced8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	20000010 	.word	0x20000010
 800cee4:	200000c0 	.word	0x200000c0
 800cee8:	200000bc 	.word	0x200000bc

0800ceec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ceec:	b480      	push	{r7}
 800ceee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cef0:	4b06      	ldr	r3, [pc, #24]	; (800cf0c <HAL_IncTick+0x20>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	461a      	mov	r2, r3
 800cef6:	4b06      	ldr	r3, [pc, #24]	; (800cf10 <HAL_IncTick+0x24>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4413      	add	r3, r2
 800cefc:	4a04      	ldr	r2, [pc, #16]	; (800cf10 <HAL_IncTick+0x24>)
 800cefe:	6013      	str	r3, [r2, #0]
}
 800cf00:	bf00      	nop
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop
 800cf0c:	200000c0 	.word	0x200000c0
 800cf10:	20008dbc 	.word	0x20008dbc

0800cf14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cf14:	b480      	push	{r7}
 800cf16:	af00      	add	r7, sp, #0
  return uwTick;
 800cf18:	4b03      	ldr	r3, [pc, #12]	; (800cf28 <HAL_GetTick+0x14>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	20008dbc 	.word	0x20008dbc

0800cf2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cf34:	f7ff ffee 	bl	800cf14 <HAL_GetTick>
 800cf38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf44:	d005      	beq.n	800cf52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cf46:	4b09      	ldr	r3, [pc, #36]	; (800cf6c <HAL_Delay+0x40>)
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	4413      	add	r3, r2
 800cf50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cf52:	bf00      	nop
 800cf54:	f7ff ffde 	bl	800cf14 <HAL_GetTick>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d8f7      	bhi.n	800cf54 <HAL_Delay+0x28>
  {
  }
}
 800cf64:	bf00      	nop
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	200000c0 	.word	0x200000c0

0800cf70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f003 0307 	and.w	r3, r3, #7
 800cf7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cf80:	4b0c      	ldr	r3, [pc, #48]	; (800cfb4 <__NVIC_SetPriorityGrouping+0x44>)
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cf98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cf9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cfa2:	4a04      	ldr	r2, [pc, #16]	; (800cfb4 <__NVIC_SetPriorityGrouping+0x44>)
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	60d3      	str	r3, [r2, #12]
}
 800cfa8:	bf00      	nop
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	e000ed00 	.word	0xe000ed00

0800cfb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cfbc:	4b04      	ldr	r3, [pc, #16]	; (800cfd0 <__NVIC_GetPriorityGrouping+0x18>)
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	0a1b      	lsrs	r3, r3, #8
 800cfc2:	f003 0307 	and.w	r3, r3, #7
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr
 800cfd0:	e000ed00 	.word	0xe000ed00

0800cfd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	4603      	mov	r3, r0
 800cfdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cfde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	db0b      	blt.n	800cffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cfe6:	79fb      	ldrb	r3, [r7, #7]
 800cfe8:	f003 021f 	and.w	r2, r3, #31
 800cfec:	4907      	ldr	r1, [pc, #28]	; (800d00c <__NVIC_EnableIRQ+0x38>)
 800cfee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cff2:	095b      	lsrs	r3, r3, #5
 800cff4:	2001      	movs	r0, #1
 800cff6:	fa00 f202 	lsl.w	r2, r0, r2
 800cffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800cffe:	bf00      	nop
 800d000:	370c      	adds	r7, #12
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	e000e100 	.word	0xe000e100

0800d010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	4603      	mov	r3, r0
 800d018:	6039      	str	r1, [r7, #0]
 800d01a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d01c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d020:	2b00      	cmp	r3, #0
 800d022:	db0a      	blt.n	800d03a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	b2da      	uxtb	r2, r3
 800d028:	490c      	ldr	r1, [pc, #48]	; (800d05c <__NVIC_SetPriority+0x4c>)
 800d02a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d02e:	0112      	lsls	r2, r2, #4
 800d030:	b2d2      	uxtb	r2, r2
 800d032:	440b      	add	r3, r1
 800d034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d038:	e00a      	b.n	800d050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	4908      	ldr	r1, [pc, #32]	; (800d060 <__NVIC_SetPriority+0x50>)
 800d040:	79fb      	ldrb	r3, [r7, #7]
 800d042:	f003 030f 	and.w	r3, r3, #15
 800d046:	3b04      	subs	r3, #4
 800d048:	0112      	lsls	r2, r2, #4
 800d04a:	b2d2      	uxtb	r2, r2
 800d04c:	440b      	add	r3, r1
 800d04e:	761a      	strb	r2, [r3, #24]
}
 800d050:	bf00      	nop
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	e000e100 	.word	0xe000e100
 800d060:	e000ed00 	.word	0xe000ed00

0800d064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d064:	b480      	push	{r7}
 800d066:	b089      	sub	sp, #36	; 0x24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f003 0307 	and.w	r3, r3, #7
 800d076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	f1c3 0307 	rsb	r3, r3, #7
 800d07e:	2b04      	cmp	r3, #4
 800d080:	bf28      	it	cs
 800d082:	2304      	movcs	r3, #4
 800d084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	3304      	adds	r3, #4
 800d08a:	2b06      	cmp	r3, #6
 800d08c:	d902      	bls.n	800d094 <NVIC_EncodePriority+0x30>
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	3b03      	subs	r3, #3
 800d092:	e000      	b.n	800d096 <NVIC_EncodePriority+0x32>
 800d094:	2300      	movs	r3, #0
 800d096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	fa02 f303 	lsl.w	r3, r2, r3
 800d0a2:	43da      	mvns	r2, r3
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	401a      	ands	r2, r3
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d0ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	fa01 f303 	lsl.w	r3, r1, r3
 800d0b6:	43d9      	mvns	r1, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d0bc:	4313      	orrs	r3, r2
         );
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3724      	adds	r7, #36	; 0x24
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
	...

0800d0cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d0dc:	d301      	bcc.n	800d0e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e00f      	b.n	800d102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d0e2:	4a0a      	ldr	r2, [pc, #40]	; (800d10c <SysTick_Config+0x40>)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d0ea:	210f      	movs	r1, #15
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0f0:	f7ff ff8e 	bl	800d010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d0f4:	4b05      	ldr	r3, [pc, #20]	; (800d10c <SysTick_Config+0x40>)
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d0fa:	4b04      	ldr	r3, [pc, #16]	; (800d10c <SysTick_Config+0x40>)
 800d0fc:	2207      	movs	r2, #7
 800d0fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	e000e010 	.word	0xe000e010

0800d110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f7ff ff29 	bl	800cf70 <__NVIC_SetPriorityGrouping>
}
 800d11e:	bf00      	nop
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d126:	b580      	push	{r7, lr}
 800d128:	b086      	sub	sp, #24
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	4603      	mov	r3, r0
 800d12e:	60b9      	str	r1, [r7, #8]
 800d130:	607a      	str	r2, [r7, #4]
 800d132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d134:	2300      	movs	r3, #0
 800d136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d138:	f7ff ff3e 	bl	800cfb8 <__NVIC_GetPriorityGrouping>
 800d13c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	68b9      	ldr	r1, [r7, #8]
 800d142:	6978      	ldr	r0, [r7, #20]
 800d144:	f7ff ff8e 	bl	800d064 <NVIC_EncodePriority>
 800d148:	4602      	mov	r2, r0
 800d14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d14e:	4611      	mov	r1, r2
 800d150:	4618      	mov	r0, r3
 800d152:	f7ff ff5d 	bl	800d010 <__NVIC_SetPriority>
}
 800d156:	bf00      	nop
 800d158:	3718      	adds	r7, #24
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b082      	sub	sp, #8
 800d162:	af00      	add	r7, sp, #0
 800d164:	4603      	mov	r3, r0
 800d166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7ff ff31 	bl	800cfd4 <__NVIC_EnableIRQ>
}
 800d172:	bf00      	nop
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b082      	sub	sp, #8
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f7ff ffa2 	bl	800d0cc <SysTick_Config>
 800d188:	4603      	mov	r3, r0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800d19c:	2300      	movs	r3, #0
 800d19e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800d1a0:	f7ff feb8 	bl	800cf14 <HAL_GetTick>
 800d1a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d101      	bne.n	800d1b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e099      	b.n	800d2e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2202      	movs	r2, #2
 800d1bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f022 0201 	bic.w	r2, r2, #1
 800d1ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d1d0:	e00f      	b.n	800d1f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d1d2:	f7ff fe9f 	bl	800cf14 <HAL_GetTick>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	2b05      	cmp	r3, #5
 800d1de:	d908      	bls.n	800d1f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2220      	movs	r2, #32
 800d1e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2203      	movs	r2, #3
 800d1ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	e078      	b.n	800d2e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d1e8      	bne.n	800d1d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d208:	697a      	ldr	r2, [r7, #20]
 800d20a:	4b38      	ldr	r3, [pc, #224]	; (800d2ec <HAL_DMA_Init+0x158>)
 800d20c:	4013      	ands	r3, r2
 800d20e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685a      	ldr	r2, [r3, #4]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	689b      	ldr	r3, [r3, #8]
 800d218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d21e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d22a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	699b      	ldr	r3, [r3, #24]
 800d230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a1b      	ldr	r3, [r3, #32]
 800d23c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	4313      	orrs	r3, r2
 800d242:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d248:	2b04      	cmp	r3, #4
 800d24a:	d107      	bne.n	800d25c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d254:	4313      	orrs	r3, r2
 800d256:	697a      	ldr	r2, [r7, #20]
 800d258:	4313      	orrs	r3, r2
 800d25a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	697a      	ldr	r2, [r7, #20]
 800d262:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	695b      	ldr	r3, [r3, #20]
 800d26a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	f023 0307 	bic.w	r3, r3, #7
 800d272:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d278:	697a      	ldr	r2, [r7, #20]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d282:	2b04      	cmp	r3, #4
 800d284:	d117      	bne.n	800d2b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28a:	697a      	ldr	r2, [r7, #20]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00e      	beq.n	800d2b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fa91 	bl	800d7c0 <DMA_CheckFifoParam>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d008      	beq.n	800d2b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2240      	movs	r2, #64	; 0x40
 800d2a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e016      	b.n	800d2e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	697a      	ldr	r2, [r7, #20]
 800d2bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 fa48 	bl	800d754 <DMA_CalcBaseAndBitshift>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2cc:	223f      	movs	r2, #63	; 0x3f
 800d2ce:	409a      	lsls	r2, r3
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3718      	adds	r7, #24
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	f010803f 	.word	0xf010803f

0800d2f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	607a      	str	r2, [r7, #4]
 800d2fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d306:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d101      	bne.n	800d316 <HAL_DMA_Start_IT+0x26>
 800d312:	2302      	movs	r3, #2
 800d314:	e040      	b.n	800d398 <HAL_DMA_Start_IT+0xa8>
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2201      	movs	r2, #1
 800d31a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d324:	b2db      	uxtb	r3, r3
 800d326:	2b01      	cmp	r3, #1
 800d328:	d12f      	bne.n	800d38a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2202      	movs	r2, #2
 800d32e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2200      	movs	r2, #0
 800d336:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	68b9      	ldr	r1, [r7, #8]
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f000 f9da 	bl	800d6f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d348:	223f      	movs	r2, #63	; 0x3f
 800d34a:	409a      	lsls	r2, r3
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f042 0216 	orr.w	r2, r2, #22
 800d35e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d364:	2b00      	cmp	r3, #0
 800d366:	d007      	beq.n	800d378 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f042 0208 	orr.w	r2, r2, #8
 800d376:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f042 0201 	orr.w	r2, r2, #1
 800d386:	601a      	str	r2, [r3, #0]
 800d388:	e005      	b.n	800d396 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800d392:	2302      	movs	r3, #2
 800d394:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800d396:	7dfb      	ldrb	r3, [r7, #23]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3718      	adds	r7, #24
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d004      	beq.n	800d3be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2280      	movs	r2, #128	; 0x80
 800d3b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e00c      	b.n	800d3d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2205      	movs	r2, #5
 800d3c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f022 0201 	bic.w	r2, r2, #1
 800d3d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d3f0:	4b92      	ldr	r3, [pc, #584]	; (800d63c <HAL_DMA_IRQHandler+0x258>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a92      	ldr	r2, [pc, #584]	; (800d640 <HAL_DMA_IRQHandler+0x25c>)
 800d3f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3fa:	0a9b      	lsrs	r3, r3, #10
 800d3fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d402:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d40e:	2208      	movs	r2, #8
 800d410:	409a      	lsls	r2, r3
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	4013      	ands	r3, r2
 800d416:	2b00      	cmp	r3, #0
 800d418:	d01a      	beq.n	800d450 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 0304 	and.w	r3, r3, #4
 800d424:	2b00      	cmp	r3, #0
 800d426:	d013      	beq.n	800d450 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f022 0204 	bic.w	r2, r2, #4
 800d436:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d43c:	2208      	movs	r2, #8
 800d43e:	409a      	lsls	r2, r3
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d448:	f043 0201 	orr.w	r2, r3, #1
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d454:	2201      	movs	r2, #1
 800d456:	409a      	lsls	r2, r3
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	4013      	ands	r3, r2
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d012      	beq.n	800d486 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	695b      	ldr	r3, [r3, #20]
 800d466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00b      	beq.n	800d486 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d472:	2201      	movs	r2, #1
 800d474:	409a      	lsls	r2, r3
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d47e:	f043 0202 	orr.w	r2, r3, #2
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d48a:	2204      	movs	r2, #4
 800d48c:	409a      	lsls	r2, r3
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	4013      	ands	r3, r2
 800d492:	2b00      	cmp	r3, #0
 800d494:	d012      	beq.n	800d4bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f003 0302 	and.w	r3, r3, #2
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00b      	beq.n	800d4bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4a8:	2204      	movs	r2, #4
 800d4aa:	409a      	lsls	r2, r3
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4b4:	f043 0204 	orr.w	r2, r3, #4
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4c0:	2210      	movs	r2, #16
 800d4c2:	409a      	lsls	r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d043      	beq.n	800d554 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f003 0308 	and.w	r3, r3, #8
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d03c      	beq.n	800d554 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4de:	2210      	movs	r2, #16
 800d4e0:	409a      	lsls	r2, r3
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d018      	beq.n	800d526 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d108      	bne.n	800d514 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d506:	2b00      	cmp	r3, #0
 800d508:	d024      	beq.n	800d554 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	4798      	blx	r3
 800d512:	e01f      	b.n	800d554 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d01b      	beq.n	800d554 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	4798      	blx	r3
 800d524:	e016      	b.n	800d554 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d530:	2b00      	cmp	r3, #0
 800d532:	d107      	bne.n	800d544 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f022 0208 	bic.w	r2, r2, #8
 800d542:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d003      	beq.n	800d554 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d558:	2220      	movs	r2, #32
 800d55a:	409a      	lsls	r2, r3
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	4013      	ands	r3, r2
 800d560:	2b00      	cmp	r3, #0
 800d562:	f000 808e 	beq.w	800d682 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f003 0310 	and.w	r3, r3, #16
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 8086 	beq.w	800d682 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d57a:	2220      	movs	r2, #32
 800d57c:	409a      	lsls	r2, r3
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	2b05      	cmp	r3, #5
 800d58c:	d136      	bne.n	800d5fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f022 0216 	bic.w	r2, r2, #22
 800d59c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	695a      	ldr	r2, [r3, #20]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d5ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d103      	bne.n	800d5be <HAL_DMA_IRQHandler+0x1da>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d007      	beq.n	800d5ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f022 0208 	bic.w	r2, r2, #8
 800d5cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5d2:	223f      	movs	r2, #63	; 0x3f
 800d5d4:	409a      	lsls	r2, r3
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d07d      	beq.n	800d6ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	4798      	blx	r3
        }
        return;
 800d5fa:	e078      	b.n	800d6ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d606:	2b00      	cmp	r3, #0
 800d608:	d01c      	beq.n	800d644 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d614:	2b00      	cmp	r3, #0
 800d616:	d108      	bne.n	800d62a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d030      	beq.n	800d682 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	4798      	blx	r3
 800d628:	e02b      	b.n	800d682 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d027      	beq.n	800d682 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	4798      	blx	r3
 800d63a:	e022      	b.n	800d682 <HAL_DMA_IRQHandler+0x29e>
 800d63c:	20000010 	.word	0x20000010
 800d640:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d10f      	bne.n	800d672 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f022 0210 	bic.w	r2, r2, #16
 800d660:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d676:	2b00      	cmp	r3, #0
 800d678:	d003      	beq.n	800d682 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d686:	2b00      	cmp	r3, #0
 800d688:	d032      	beq.n	800d6f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	2b00      	cmp	r3, #0
 800d694:	d022      	beq.n	800d6dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2205      	movs	r2, #5
 800d69a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f022 0201 	bic.w	r2, r2, #1
 800d6ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	60bb      	str	r3, [r7, #8]
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d307      	bcc.n	800d6ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f003 0301 	and.w	r3, r3, #1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1f2      	bne.n	800d6ae <HAL_DMA_IRQHandler+0x2ca>
 800d6c8:	e000      	b.n	800d6cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 800d6ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d005      	beq.n	800d6f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	4798      	blx	r3
 800d6ec:	e000      	b.n	800d6f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800d6ee:	bf00      	nop
    }
  }
}
 800d6f0:	3718      	adds	r7, #24
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop

0800d6f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
 800d704:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d714:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	683a      	ldr	r2, [r7, #0]
 800d71c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	2b40      	cmp	r3, #64	; 0x40
 800d724:	d108      	bne.n	800d738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d736:	e007      	b.n	800d748 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	60da      	str	r2, [r3, #12]
}
 800d748:	bf00      	nop
 800d74a:	3714      	adds	r7, #20
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	b2db      	uxtb	r3, r3
 800d762:	3b10      	subs	r3, #16
 800d764:	4a14      	ldr	r2, [pc, #80]	; (800d7b8 <DMA_CalcBaseAndBitshift+0x64>)
 800d766:	fba2 2303 	umull	r2, r3, r2, r3
 800d76a:	091b      	lsrs	r3, r3, #4
 800d76c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d76e:	4a13      	ldr	r2, [pc, #76]	; (800d7bc <DMA_CalcBaseAndBitshift+0x68>)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	4413      	add	r3, r2
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	461a      	mov	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2b03      	cmp	r3, #3
 800d780:	d909      	bls.n	800d796 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d78a:	f023 0303 	bic.w	r3, r3, #3
 800d78e:	1d1a      	adds	r2, r3, #4
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	659a      	str	r2, [r3, #88]	; 0x58
 800d794:	e007      	b.n	800d7a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d79e:	f023 0303 	bic.w	r3, r3, #3
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3714      	adds	r7, #20
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	aaaaaaab 	.word	0xaaaaaaab
 800d7bc:	080155a4 	.word	0x080155a4

0800d7c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d11f      	bne.n	800d81a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	2b03      	cmp	r3, #3
 800d7de:	d855      	bhi.n	800d88c <DMA_CheckFifoParam+0xcc>
 800d7e0:	a201      	add	r2, pc, #4	; (adr r2, 800d7e8 <DMA_CheckFifoParam+0x28>)
 800d7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e6:	bf00      	nop
 800d7e8:	0800d7f9 	.word	0x0800d7f9
 800d7ec:	0800d80b 	.word	0x0800d80b
 800d7f0:	0800d7f9 	.word	0x0800d7f9
 800d7f4:	0800d88d 	.word	0x0800d88d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d800:	2b00      	cmp	r3, #0
 800d802:	d045      	beq.n	800d890 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d808:	e042      	b.n	800d890 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d812:	d13f      	bne.n	800d894 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800d814:	2301      	movs	r3, #1
 800d816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d818:	e03c      	b.n	800d894 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	699b      	ldr	r3, [r3, #24]
 800d81e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d822:	d121      	bne.n	800d868 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2b03      	cmp	r3, #3
 800d828:	d836      	bhi.n	800d898 <DMA_CheckFifoParam+0xd8>
 800d82a:	a201      	add	r2, pc, #4	; (adr r2, 800d830 <DMA_CheckFifoParam+0x70>)
 800d82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d830:	0800d841 	.word	0x0800d841
 800d834:	0800d847 	.word	0x0800d847
 800d838:	0800d841 	.word	0x0800d841
 800d83c:	0800d859 	.word	0x0800d859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	73fb      	strb	r3, [r7, #15]
      break;
 800d844:	e02f      	b.n	800d8a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d024      	beq.n	800d89c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d856:	e021      	b.n	800d89c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d860:	d11e      	bne.n	800d8a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d866:	e01b      	b.n	800d8a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d902      	bls.n	800d874 <DMA_CheckFifoParam+0xb4>
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d003      	beq.n	800d87a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d872:	e018      	b.n	800d8a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	73fb      	strb	r3, [r7, #15]
      break;
 800d878:	e015      	b.n	800d8a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00e      	beq.n	800d8a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800d886:	2301      	movs	r3, #1
 800d888:	73fb      	strb	r3, [r7, #15]
      break;
 800d88a:	e00b      	b.n	800d8a4 <DMA_CheckFifoParam+0xe4>
      break;
 800d88c:	bf00      	nop
 800d88e:	e00a      	b.n	800d8a6 <DMA_CheckFifoParam+0xe6>
      break;
 800d890:	bf00      	nop
 800d892:	e008      	b.n	800d8a6 <DMA_CheckFifoParam+0xe6>
      break;
 800d894:	bf00      	nop
 800d896:	e006      	b.n	800d8a6 <DMA_CheckFifoParam+0xe6>
      break;
 800d898:	bf00      	nop
 800d89a:	e004      	b.n	800d8a6 <DMA_CheckFifoParam+0xe6>
      break;
 800d89c:	bf00      	nop
 800d89e:	e002      	b.n	800d8a6 <DMA_CheckFifoParam+0xe6>
      break;   
 800d8a0:	bf00      	nop
 800d8a2:	e000      	b.n	800d8a6 <DMA_CheckFifoParam+0xe6>
      break;
 800d8a4:	bf00      	nop
    }
  } 
  
  return status; 
 800d8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b089      	sub	sp, #36	; 0x24
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	61fb      	str	r3, [r7, #28]
 800d8ce:	e16b      	b.n	800dba8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	697a      	ldr	r2, [r7, #20]
 800d8e0:	4013      	ands	r3, r2
 800d8e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d8e4:	693a      	ldr	r2, [r7, #16]
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	f040 815a 	bne.w	800dba2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d00b      	beq.n	800d90e <HAL_GPIO_Init+0x5a>
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d007      	beq.n	800d90e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d902:	2b11      	cmp	r3, #17
 800d904:	d003      	beq.n	800d90e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	2b12      	cmp	r3, #18
 800d90c:	d130      	bne.n	800d970 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	005b      	lsls	r3, r3, #1
 800d918:	2203      	movs	r2, #3
 800d91a:	fa02 f303 	lsl.w	r3, r2, r3
 800d91e:	43db      	mvns	r3, r3
 800d920:	69ba      	ldr	r2, [r7, #24]
 800d922:	4013      	ands	r3, r2
 800d924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	68da      	ldr	r2, [r3, #12]
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	005b      	lsls	r3, r3, #1
 800d92e:	fa02 f303 	lsl.w	r3, r2, r3
 800d932:	69ba      	ldr	r2, [r7, #24]
 800d934:	4313      	orrs	r3, r2
 800d936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	69ba      	ldr	r2, [r7, #24]
 800d93c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d944:	2201      	movs	r2, #1
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	fa02 f303 	lsl.w	r3, r2, r3
 800d94c:	43db      	mvns	r3, r3
 800d94e:	69ba      	ldr	r2, [r7, #24]
 800d950:	4013      	ands	r3, r2
 800d952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	091b      	lsrs	r3, r3, #4
 800d95a:	f003 0201 	and.w	r2, r3, #1
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	fa02 f303 	lsl.w	r3, r2, r3
 800d964:	69ba      	ldr	r2, [r7, #24]
 800d966:	4313      	orrs	r3, r2
 800d968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	69ba      	ldr	r2, [r7, #24]
 800d96e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	005b      	lsls	r3, r3, #1
 800d97a:	2203      	movs	r2, #3
 800d97c:	fa02 f303 	lsl.w	r3, r2, r3
 800d980:	43db      	mvns	r3, r3
 800d982:	69ba      	ldr	r2, [r7, #24]
 800d984:	4013      	ands	r3, r2
 800d986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	689a      	ldr	r2, [r3, #8]
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	005b      	lsls	r3, r3, #1
 800d990:	fa02 f303 	lsl.w	r3, r2, r3
 800d994:	69ba      	ldr	r2, [r7, #24]
 800d996:	4313      	orrs	r3, r2
 800d998:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	69ba      	ldr	r2, [r7, #24]
 800d99e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	2b02      	cmp	r3, #2
 800d9a6:	d003      	beq.n	800d9b0 <HAL_GPIO_Init+0xfc>
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	2b12      	cmp	r3, #18
 800d9ae:	d123      	bne.n	800d9f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	08da      	lsrs	r2, r3, #3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	3208      	adds	r2, #8
 800d9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	f003 0307 	and.w	r3, r3, #7
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	220f      	movs	r2, #15
 800d9c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9cc:	43db      	mvns	r3, r3
 800d9ce:	69ba      	ldr	r2, [r7, #24]
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	691a      	ldr	r2, [r3, #16]
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	f003 0307 	and.w	r3, r3, #7
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9e4:	69ba      	ldr	r2, [r7, #24]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	08da      	lsrs	r2, r3, #3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	3208      	adds	r2, #8
 800d9f2:	69b9      	ldr	r1, [r7, #24]
 800d9f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	005b      	lsls	r3, r3, #1
 800da02:	2203      	movs	r2, #3
 800da04:	fa02 f303 	lsl.w	r3, r2, r3
 800da08:	43db      	mvns	r3, r3
 800da0a:	69ba      	ldr	r2, [r7, #24]
 800da0c:	4013      	ands	r3, r2
 800da0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	f003 0203 	and.w	r2, r3, #3
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	005b      	lsls	r3, r3, #1
 800da1c:	fa02 f303 	lsl.w	r3, r2, r3
 800da20:	69ba      	ldr	r2, [r7, #24]
 800da22:	4313      	orrs	r3, r2
 800da24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	69ba      	ldr	r2, [r7, #24]
 800da2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da34:	2b00      	cmp	r3, #0
 800da36:	f000 80b4 	beq.w	800dba2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da3a:	2300      	movs	r3, #0
 800da3c:	60fb      	str	r3, [r7, #12]
 800da3e:	4b5f      	ldr	r3, [pc, #380]	; (800dbbc <HAL_GPIO_Init+0x308>)
 800da40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da42:	4a5e      	ldr	r2, [pc, #376]	; (800dbbc <HAL_GPIO_Init+0x308>)
 800da44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da48:	6453      	str	r3, [r2, #68]	; 0x44
 800da4a:	4b5c      	ldr	r3, [pc, #368]	; (800dbbc <HAL_GPIO_Init+0x308>)
 800da4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da52:	60fb      	str	r3, [r7, #12]
 800da54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800da56:	4a5a      	ldr	r2, [pc, #360]	; (800dbc0 <HAL_GPIO_Init+0x30c>)
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	089b      	lsrs	r3, r3, #2
 800da5c:	3302      	adds	r3, #2
 800da5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	f003 0303 	and.w	r3, r3, #3
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	220f      	movs	r2, #15
 800da6e:	fa02 f303 	lsl.w	r3, r2, r3
 800da72:	43db      	mvns	r3, r3
 800da74:	69ba      	ldr	r2, [r7, #24]
 800da76:	4013      	ands	r3, r2
 800da78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a51      	ldr	r2, [pc, #324]	; (800dbc4 <HAL_GPIO_Init+0x310>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d02b      	beq.n	800dada <HAL_GPIO_Init+0x226>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4a50      	ldr	r2, [pc, #320]	; (800dbc8 <HAL_GPIO_Init+0x314>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d025      	beq.n	800dad6 <HAL_GPIO_Init+0x222>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4a4f      	ldr	r2, [pc, #316]	; (800dbcc <HAL_GPIO_Init+0x318>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d01f      	beq.n	800dad2 <HAL_GPIO_Init+0x21e>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a4e      	ldr	r2, [pc, #312]	; (800dbd0 <HAL_GPIO_Init+0x31c>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d019      	beq.n	800dace <HAL_GPIO_Init+0x21a>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4a4d      	ldr	r2, [pc, #308]	; (800dbd4 <HAL_GPIO_Init+0x320>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d013      	beq.n	800daca <HAL_GPIO_Init+0x216>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a4c      	ldr	r2, [pc, #304]	; (800dbd8 <HAL_GPIO_Init+0x324>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d00d      	beq.n	800dac6 <HAL_GPIO_Init+0x212>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4a4b      	ldr	r2, [pc, #300]	; (800dbdc <HAL_GPIO_Init+0x328>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d007      	beq.n	800dac2 <HAL_GPIO_Init+0x20e>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a4a      	ldr	r2, [pc, #296]	; (800dbe0 <HAL_GPIO_Init+0x32c>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d101      	bne.n	800dabe <HAL_GPIO_Init+0x20a>
 800daba:	2307      	movs	r3, #7
 800dabc:	e00e      	b.n	800dadc <HAL_GPIO_Init+0x228>
 800dabe:	2308      	movs	r3, #8
 800dac0:	e00c      	b.n	800dadc <HAL_GPIO_Init+0x228>
 800dac2:	2306      	movs	r3, #6
 800dac4:	e00a      	b.n	800dadc <HAL_GPIO_Init+0x228>
 800dac6:	2305      	movs	r3, #5
 800dac8:	e008      	b.n	800dadc <HAL_GPIO_Init+0x228>
 800daca:	2304      	movs	r3, #4
 800dacc:	e006      	b.n	800dadc <HAL_GPIO_Init+0x228>
 800dace:	2303      	movs	r3, #3
 800dad0:	e004      	b.n	800dadc <HAL_GPIO_Init+0x228>
 800dad2:	2302      	movs	r3, #2
 800dad4:	e002      	b.n	800dadc <HAL_GPIO_Init+0x228>
 800dad6:	2301      	movs	r3, #1
 800dad8:	e000      	b.n	800dadc <HAL_GPIO_Init+0x228>
 800dada:	2300      	movs	r3, #0
 800dadc:	69fa      	ldr	r2, [r7, #28]
 800dade:	f002 0203 	and.w	r2, r2, #3
 800dae2:	0092      	lsls	r2, r2, #2
 800dae4:	4093      	lsls	r3, r2
 800dae6:	69ba      	ldr	r2, [r7, #24]
 800dae8:	4313      	orrs	r3, r2
 800daea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800daec:	4934      	ldr	r1, [pc, #208]	; (800dbc0 <HAL_GPIO_Init+0x30c>)
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	089b      	lsrs	r3, r3, #2
 800daf2:	3302      	adds	r3, #2
 800daf4:	69ba      	ldr	r2, [r7, #24]
 800daf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800dafa:	4b3a      	ldr	r3, [pc, #232]	; (800dbe4 <HAL_GPIO_Init+0x330>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	43db      	mvns	r3, r3
 800db04:	69ba      	ldr	r2, [r7, #24]
 800db06:	4013      	ands	r3, r2
 800db08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db12:	2b00      	cmp	r3, #0
 800db14:	d003      	beq.n	800db1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800db16:	69ba      	ldr	r2, [r7, #24]
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800db1e:	4a31      	ldr	r2, [pc, #196]	; (800dbe4 <HAL_GPIO_Init+0x330>)
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800db24:	4b2f      	ldr	r3, [pc, #188]	; (800dbe4 <HAL_GPIO_Init+0x330>)
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	43db      	mvns	r3, r3
 800db2e:	69ba      	ldr	r2, [r7, #24]
 800db30:	4013      	ands	r3, r2
 800db32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d003      	beq.n	800db48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800db40:	69ba      	ldr	r2, [r7, #24]
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	4313      	orrs	r3, r2
 800db46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800db48:	4a26      	ldr	r2, [pc, #152]	; (800dbe4 <HAL_GPIO_Init+0x330>)
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800db4e:	4b25      	ldr	r3, [pc, #148]	; (800dbe4 <HAL_GPIO_Init+0x330>)
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	43db      	mvns	r3, r3
 800db58:	69ba      	ldr	r2, [r7, #24]
 800db5a:	4013      	ands	r3, r2
 800db5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db66:	2b00      	cmp	r3, #0
 800db68:	d003      	beq.n	800db72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800db6a:	69ba      	ldr	r2, [r7, #24]
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	4313      	orrs	r3, r2
 800db70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800db72:	4a1c      	ldr	r2, [pc, #112]	; (800dbe4 <HAL_GPIO_Init+0x330>)
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800db78:	4b1a      	ldr	r3, [pc, #104]	; (800dbe4 <HAL_GPIO_Init+0x330>)
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	43db      	mvns	r3, r3
 800db82:	69ba      	ldr	r2, [r7, #24]
 800db84:	4013      	ands	r3, r2
 800db86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db90:	2b00      	cmp	r3, #0
 800db92:	d003      	beq.n	800db9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800db94:	69ba      	ldr	r2, [r7, #24]
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	4313      	orrs	r3, r2
 800db9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800db9c:	4a11      	ldr	r2, [pc, #68]	; (800dbe4 <HAL_GPIO_Init+0x330>)
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	3301      	adds	r3, #1
 800dba6:	61fb      	str	r3, [r7, #28]
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	2b0f      	cmp	r3, #15
 800dbac:	f67f ae90 	bls.w	800d8d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800dbb0:	bf00      	nop
 800dbb2:	3724      	adds	r7, #36	; 0x24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	40023800 	.word	0x40023800
 800dbc0:	40013800 	.word	0x40013800
 800dbc4:	40020000 	.word	0x40020000
 800dbc8:	40020400 	.word	0x40020400
 800dbcc:	40020800 	.word	0x40020800
 800dbd0:	40020c00 	.word	0x40020c00
 800dbd4:	40021000 	.word	0x40021000
 800dbd8:	40021400 	.word	0x40021400
 800dbdc:	40021800 	.word	0x40021800
 800dbe0:	40021c00 	.word	0x40021c00
 800dbe4:	40013c00 	.word	0x40013c00

0800dbe8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b087      	sub	sp, #28
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dbfe:	2300      	movs	r3, #0
 800dc00:	617b      	str	r3, [r7, #20]
 800dc02:	e0cd      	b.n	800dda0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800dc04:	2201      	movs	r2, #1
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	fa02 f303 	lsl.w	r3, r2, r3
 800dc0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800dc0e:	683a      	ldr	r2, [r7, #0]
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	4013      	ands	r3, r2
 800dc14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	f040 80bd 	bne.w	800dd9a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800dc20:	4a64      	ldr	r2, [pc, #400]	; (800ddb4 <HAL_GPIO_DeInit+0x1cc>)
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	089b      	lsrs	r3, r3, #2
 800dc26:	3302      	adds	r3, #2
 800dc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc2c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	f003 0303 	and.w	r3, r3, #3
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	220f      	movs	r2, #15
 800dc38:	fa02 f303 	lsl.w	r3, r2, r3
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	4013      	ands	r3, r2
 800dc40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	4a5c      	ldr	r2, [pc, #368]	; (800ddb8 <HAL_GPIO_DeInit+0x1d0>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d02b      	beq.n	800dca2 <HAL_GPIO_DeInit+0xba>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	4a5b      	ldr	r2, [pc, #364]	; (800ddbc <HAL_GPIO_DeInit+0x1d4>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d025      	beq.n	800dc9e <HAL_GPIO_DeInit+0xb6>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	4a5a      	ldr	r2, [pc, #360]	; (800ddc0 <HAL_GPIO_DeInit+0x1d8>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d01f      	beq.n	800dc9a <HAL_GPIO_DeInit+0xb2>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4a59      	ldr	r2, [pc, #356]	; (800ddc4 <HAL_GPIO_DeInit+0x1dc>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d019      	beq.n	800dc96 <HAL_GPIO_DeInit+0xae>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	4a58      	ldr	r2, [pc, #352]	; (800ddc8 <HAL_GPIO_DeInit+0x1e0>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d013      	beq.n	800dc92 <HAL_GPIO_DeInit+0xaa>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	4a57      	ldr	r2, [pc, #348]	; (800ddcc <HAL_GPIO_DeInit+0x1e4>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d00d      	beq.n	800dc8e <HAL_GPIO_DeInit+0xa6>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4a56      	ldr	r2, [pc, #344]	; (800ddd0 <HAL_GPIO_DeInit+0x1e8>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d007      	beq.n	800dc8a <HAL_GPIO_DeInit+0xa2>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4a55      	ldr	r2, [pc, #340]	; (800ddd4 <HAL_GPIO_DeInit+0x1ec>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d101      	bne.n	800dc86 <HAL_GPIO_DeInit+0x9e>
 800dc82:	2307      	movs	r3, #7
 800dc84:	e00e      	b.n	800dca4 <HAL_GPIO_DeInit+0xbc>
 800dc86:	2308      	movs	r3, #8
 800dc88:	e00c      	b.n	800dca4 <HAL_GPIO_DeInit+0xbc>
 800dc8a:	2306      	movs	r3, #6
 800dc8c:	e00a      	b.n	800dca4 <HAL_GPIO_DeInit+0xbc>
 800dc8e:	2305      	movs	r3, #5
 800dc90:	e008      	b.n	800dca4 <HAL_GPIO_DeInit+0xbc>
 800dc92:	2304      	movs	r3, #4
 800dc94:	e006      	b.n	800dca4 <HAL_GPIO_DeInit+0xbc>
 800dc96:	2303      	movs	r3, #3
 800dc98:	e004      	b.n	800dca4 <HAL_GPIO_DeInit+0xbc>
 800dc9a:	2302      	movs	r3, #2
 800dc9c:	e002      	b.n	800dca4 <HAL_GPIO_DeInit+0xbc>
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e000      	b.n	800dca4 <HAL_GPIO_DeInit+0xbc>
 800dca2:	2300      	movs	r3, #0
 800dca4:	697a      	ldr	r2, [r7, #20]
 800dca6:	f002 0203 	and.w	r2, r2, #3
 800dcaa:	0092      	lsls	r2, r2, #2
 800dcac:	4093      	lsls	r3, r2
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d132      	bne.n	800dd1a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800dcb4:	4b48      	ldr	r3, [pc, #288]	; (800ddd8 <HAL_GPIO_DeInit+0x1f0>)
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	43db      	mvns	r3, r3
 800dcbc:	4946      	ldr	r1, [pc, #280]	; (800ddd8 <HAL_GPIO_DeInit+0x1f0>)
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800dcc2:	4b45      	ldr	r3, [pc, #276]	; (800ddd8 <HAL_GPIO_DeInit+0x1f0>)
 800dcc4:	685a      	ldr	r2, [r3, #4]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	43db      	mvns	r3, r3
 800dcca:	4943      	ldr	r1, [pc, #268]	; (800ddd8 <HAL_GPIO_DeInit+0x1f0>)
 800dccc:	4013      	ands	r3, r2
 800dcce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800dcd0:	4b41      	ldr	r3, [pc, #260]	; (800ddd8 <HAL_GPIO_DeInit+0x1f0>)
 800dcd2:	689a      	ldr	r2, [r3, #8]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	43db      	mvns	r3, r3
 800dcd8:	493f      	ldr	r1, [pc, #252]	; (800ddd8 <HAL_GPIO_DeInit+0x1f0>)
 800dcda:	4013      	ands	r3, r2
 800dcdc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800dcde:	4b3e      	ldr	r3, [pc, #248]	; (800ddd8 <HAL_GPIO_DeInit+0x1f0>)
 800dce0:	68da      	ldr	r2, [r3, #12]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	43db      	mvns	r3, r3
 800dce6:	493c      	ldr	r1, [pc, #240]	; (800ddd8 <HAL_GPIO_DeInit+0x1f0>)
 800dce8:	4013      	ands	r3, r2
 800dcea:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	f003 0303 	and.w	r3, r3, #3
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	220f      	movs	r2, #15
 800dcf6:	fa02 f303 	lsl.w	r3, r2, r3
 800dcfa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800dcfc:	4a2d      	ldr	r2, [pc, #180]	; (800ddb4 <HAL_GPIO_DeInit+0x1cc>)
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	089b      	lsrs	r3, r3, #2
 800dd02:	3302      	adds	r3, #2
 800dd04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	43da      	mvns	r2, r3
 800dd0c:	4829      	ldr	r0, [pc, #164]	; (800ddb4 <HAL_GPIO_DeInit+0x1cc>)
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	089b      	lsrs	r3, r3, #2
 800dd12:	400a      	ands	r2, r1
 800dd14:	3302      	adds	r3, #2
 800dd16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	005b      	lsls	r3, r3, #1
 800dd22:	2103      	movs	r1, #3
 800dd24:	fa01 f303 	lsl.w	r3, r1, r3
 800dd28:	43db      	mvns	r3, r3
 800dd2a:	401a      	ands	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	08da      	lsrs	r2, r3, #3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	3208      	adds	r2, #8
 800dd38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	f003 0307 	and.w	r3, r3, #7
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	220f      	movs	r2, #15
 800dd46:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4a:	43db      	mvns	r3, r3
 800dd4c:	697a      	ldr	r2, [r7, #20]
 800dd4e:	08d2      	lsrs	r2, r2, #3
 800dd50:	4019      	ands	r1, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	3208      	adds	r2, #8
 800dd56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68da      	ldr	r2, [r3, #12]
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	005b      	lsls	r3, r3, #1
 800dd62:	2103      	movs	r1, #3
 800dd64:	fa01 f303 	lsl.w	r3, r1, r3
 800dd68:	43db      	mvns	r3, r3
 800dd6a:	401a      	ands	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	685a      	ldr	r2, [r3, #4]
 800dd74:	2101      	movs	r1, #1
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	fa01 f303 	lsl.w	r3, r1, r3
 800dd7c:	43db      	mvns	r3, r3
 800dd7e:	401a      	ands	r2, r3
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	689a      	ldr	r2, [r3, #8]
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	005b      	lsls	r3, r3, #1
 800dd8c:	2103      	movs	r1, #3
 800dd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800dd92:	43db      	mvns	r3, r3
 800dd94:	401a      	ands	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	617b      	str	r3, [r7, #20]
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	2b0f      	cmp	r3, #15
 800dda4:	f67f af2e 	bls.w	800dc04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800dda8:	bf00      	nop
 800ddaa:	371c      	adds	r7, #28
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr
 800ddb4:	40013800 	.word	0x40013800
 800ddb8:	40020000 	.word	0x40020000
 800ddbc:	40020400 	.word	0x40020400
 800ddc0:	40020800 	.word	0x40020800
 800ddc4:	40020c00 	.word	0x40020c00
 800ddc8:	40021000 	.word	0x40021000
 800ddcc:	40021400 	.word	0x40021400
 800ddd0:	40021800 	.word	0x40021800
 800ddd4:	40021c00 	.word	0x40021c00
 800ddd8:	40013c00 	.word	0x40013c00

0800dddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b085      	sub	sp, #20
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	460b      	mov	r3, r1
 800dde6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	691a      	ldr	r2, [r3, #16]
 800ddec:	887b      	ldrh	r3, [r7, #2]
 800ddee:	4013      	ands	r3, r2
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d002      	beq.n	800ddfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	73fb      	strb	r3, [r7, #15]
 800ddf8:	e001      	b.n	800ddfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ddfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3714      	adds	r7, #20
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	460b      	mov	r3, r1
 800de16:	807b      	strh	r3, [r7, #2]
 800de18:	4613      	mov	r3, r2
 800de1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800de1c:	787b      	ldrb	r3, [r7, #1]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d003      	beq.n	800de2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800de22:	887a      	ldrh	r2, [r7, #2]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800de28:	e003      	b.n	800de32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800de2a:	887b      	ldrh	r3, [r7, #2]
 800de2c:	041a      	lsls	r2, r3, #16
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	619a      	str	r2, [r3, #24]
}
 800de32:	bf00      	nop
 800de34:	370c      	adds	r7, #12
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800de3e:	b480      	push	{r7}
 800de40:	b083      	sub	sp, #12
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
 800de46:	460b      	mov	r3, r1
 800de48:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	695a      	ldr	r2, [r3, #20]
 800de4e:	887b      	ldrh	r3, [r7, #2]
 800de50:	401a      	ands	r2, r3
 800de52:	887b      	ldrh	r3, [r7, #2]
 800de54:	429a      	cmp	r2, r3
 800de56:	d104      	bne.n	800de62 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800de58:	887b      	ldrh	r3, [r7, #2]
 800de5a:	041a      	lsls	r2, r3, #16
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800de60:	e002      	b.n	800de68 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800de62:	887a      	ldrh	r2, [r7, #2]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	619a      	str	r2, [r3, #24]
}
 800de68:	bf00      	nop
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d101      	bne.n	800de86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800de82:	2301      	movs	r3, #1
 800de84:	e11f      	b.n	800e0c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d106      	bne.n	800dea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7fb fd94 	bl	80099c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2224      	movs	r2, #36	; 0x24
 800dea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f022 0201 	bic.w	r2, r2, #1
 800deb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ded6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ded8:	f001 fbb6 	bl	800f648 <HAL_RCC_GetPCLK1Freq>
 800dedc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	4a7b      	ldr	r2, [pc, #492]	; (800e0d0 <HAL_I2C_Init+0x25c>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d807      	bhi.n	800def8 <HAL_I2C_Init+0x84>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	4a7a      	ldr	r2, [pc, #488]	; (800e0d4 <HAL_I2C_Init+0x260>)
 800deec:	4293      	cmp	r3, r2
 800deee:	bf94      	ite	ls
 800def0:	2301      	movls	r3, #1
 800def2:	2300      	movhi	r3, #0
 800def4:	b2db      	uxtb	r3, r3
 800def6:	e006      	b.n	800df06 <HAL_I2C_Init+0x92>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	4a77      	ldr	r2, [pc, #476]	; (800e0d8 <HAL_I2C_Init+0x264>)
 800defc:	4293      	cmp	r3, r2
 800defe:	bf94      	ite	ls
 800df00:	2301      	movls	r3, #1
 800df02:	2300      	movhi	r3, #0
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d001      	beq.n	800df0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800df0a:	2301      	movs	r3, #1
 800df0c:	e0db      	b.n	800e0c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	4a72      	ldr	r2, [pc, #456]	; (800e0dc <HAL_I2C_Init+0x268>)
 800df12:	fba2 2303 	umull	r2, r3, r2, r3
 800df16:	0c9b      	lsrs	r3, r3, #18
 800df18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	430a      	orrs	r2, r1
 800df2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	6a1b      	ldr	r3, [r3, #32]
 800df34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	4a64      	ldr	r2, [pc, #400]	; (800e0d0 <HAL_I2C_Init+0x25c>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d802      	bhi.n	800df48 <HAL_I2C_Init+0xd4>
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	3301      	adds	r3, #1
 800df46:	e009      	b.n	800df5c <HAL_I2C_Init+0xe8>
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800df4e:	fb02 f303 	mul.w	r3, r2, r3
 800df52:	4a63      	ldr	r2, [pc, #396]	; (800e0e0 <HAL_I2C_Init+0x26c>)
 800df54:	fba2 2303 	umull	r2, r3, r2, r3
 800df58:	099b      	lsrs	r3, r3, #6
 800df5a:	3301      	adds	r3, #1
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	6812      	ldr	r2, [r2, #0]
 800df60:	430b      	orrs	r3, r1
 800df62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	69db      	ldr	r3, [r3, #28]
 800df6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800df6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	4956      	ldr	r1, [pc, #344]	; (800e0d0 <HAL_I2C_Init+0x25c>)
 800df78:	428b      	cmp	r3, r1
 800df7a:	d80d      	bhi.n	800df98 <HAL_I2C_Init+0x124>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	1e59      	subs	r1, r3, #1
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	fbb1 f3f3 	udiv	r3, r1, r3
 800df8a:	3301      	adds	r3, #1
 800df8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df90:	2b04      	cmp	r3, #4
 800df92:	bf38      	it	cc
 800df94:	2304      	movcc	r3, #4
 800df96:	e04f      	b.n	800e038 <HAL_I2C_Init+0x1c4>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d111      	bne.n	800dfc4 <HAL_I2C_Init+0x150>
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	1e58      	subs	r0, r3, #1
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6859      	ldr	r1, [r3, #4]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	005b      	lsls	r3, r3, #1
 800dfac:	440b      	add	r3, r1
 800dfae:	fbb0 f3f3 	udiv	r3, r0, r3
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	bf0c      	ite	eq
 800dfbc:	2301      	moveq	r3, #1
 800dfbe:	2300      	movne	r3, #0
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	e012      	b.n	800dfea <HAL_I2C_Init+0x176>
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	1e58      	subs	r0, r3, #1
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6859      	ldr	r1, [r3, #4]
 800dfcc:	460b      	mov	r3, r1
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	440b      	add	r3, r1
 800dfd2:	0099      	lsls	r1, r3, #2
 800dfd4:	440b      	add	r3, r1
 800dfd6:	fbb0 f3f3 	udiv	r3, r0, r3
 800dfda:	3301      	adds	r3, #1
 800dfdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	bf0c      	ite	eq
 800dfe4:	2301      	moveq	r3, #1
 800dfe6:	2300      	movne	r3, #0
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <HAL_I2C_Init+0x17e>
 800dfee:	2301      	movs	r3, #1
 800dff0:	e022      	b.n	800e038 <HAL_I2C_Init+0x1c4>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10e      	bne.n	800e018 <HAL_I2C_Init+0x1a4>
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	1e58      	subs	r0, r3, #1
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6859      	ldr	r1, [r3, #4]
 800e002:	460b      	mov	r3, r1
 800e004:	005b      	lsls	r3, r3, #1
 800e006:	440b      	add	r3, r1
 800e008:	fbb0 f3f3 	udiv	r3, r0, r3
 800e00c:	3301      	adds	r3, #1
 800e00e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e016:	e00f      	b.n	800e038 <HAL_I2C_Init+0x1c4>
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	1e58      	subs	r0, r3, #1
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6859      	ldr	r1, [r3, #4]
 800e020:	460b      	mov	r3, r1
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	440b      	add	r3, r1
 800e026:	0099      	lsls	r1, r3, #2
 800e028:	440b      	add	r3, r1
 800e02a:	fbb0 f3f3 	udiv	r3, r0, r3
 800e02e:	3301      	adds	r3, #1
 800e030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e038:	6879      	ldr	r1, [r7, #4]
 800e03a:	6809      	ldr	r1, [r1, #0]
 800e03c:	4313      	orrs	r3, r2
 800e03e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	69da      	ldr	r2, [r3, #28]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	431a      	orrs	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	430a      	orrs	r2, r1
 800e05a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800e066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	6911      	ldr	r1, [r2, #16]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	68d2      	ldr	r2, [r2, #12]
 800e072:	4311      	orrs	r1, r2
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	6812      	ldr	r2, [r2, #0]
 800e078:	430b      	orrs	r3, r1
 800e07a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	695a      	ldr	r2, [r3, #20]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	699b      	ldr	r3, [r3, #24]
 800e08e:	431a      	orrs	r2, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	430a      	orrs	r2, r1
 800e096:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f042 0201 	orr.w	r2, r2, #1
 800e0a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2220      	movs	r2, #32
 800e0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	000186a0 	.word	0x000186a0
 800e0d4:	001e847f 	.word	0x001e847f
 800e0d8:	003d08ff 	.word	0x003d08ff
 800e0dc:	431bde83 	.word	0x431bde83
 800e0e0:	10624dd3 	.word	0x10624dd3

0800e0e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b088      	sub	sp, #32
 800e0e8:	af02      	add	r7, sp, #8
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	4608      	mov	r0, r1
 800e0ee:	4611      	mov	r1, r2
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	817b      	strh	r3, [r7, #10]
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	813b      	strh	r3, [r7, #8]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e0fe:	f7fe ff09 	bl	800cf14 <HAL_GetTick>
 800e102:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	2b20      	cmp	r3, #32
 800e10e:	f040 80d9 	bne.w	800e2c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	2319      	movs	r3, #25
 800e118:	2201      	movs	r2, #1
 800e11a:	496d      	ldr	r1, [pc, #436]	; (800e2d0 <HAL_I2C_Mem_Write+0x1ec>)
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f000 fc7b 	bl	800ea18 <I2C_WaitOnFlagUntilTimeout>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800e128:	2302      	movs	r3, #2
 800e12a:	e0cc      	b.n	800e2c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e132:	2b01      	cmp	r3, #1
 800e134:	d101      	bne.n	800e13a <HAL_I2C_Mem_Write+0x56>
 800e136:	2302      	movs	r3, #2
 800e138:	e0c5      	b.n	800e2c6 <HAL_I2C_Mem_Write+0x1e2>
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f003 0301 	and.w	r3, r3, #1
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d007      	beq.n	800e160 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f042 0201 	orr.w	r2, r2, #1
 800e15e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e16e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2221      	movs	r2, #33	; 0x21
 800e174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2240      	movs	r2, #64	; 0x40
 800e17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2200      	movs	r2, #0
 800e184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	6a3a      	ldr	r2, [r7, #32]
 800e18a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e196:	b29a      	uxth	r2, r3
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	4a4d      	ldr	r2, [pc, #308]	; (800e2d4 <HAL_I2C_Mem_Write+0x1f0>)
 800e1a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e1a2:	88f8      	ldrh	r0, [r7, #6]
 800e1a4:	893a      	ldrh	r2, [r7, #8]
 800e1a6:	8979      	ldrh	r1, [r7, #10]
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	9301      	str	r3, [sp, #4]
 800e1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f000 fab6 	bl	800e724 <I2C_RequestMemoryWrite>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d052      	beq.n	800e264 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e081      	b.n	800e2c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f000 fcfc 	bl	800ebc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00d      	beq.n	800e1ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d6:	2b04      	cmp	r3, #4
 800e1d8:	d107      	bne.n	800e1ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e06b      	b.n	800e2c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f2:	781a      	ldrb	r2, [r3, #0]
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1fe:	1c5a      	adds	r2, r3, #1
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e208:	3b01      	subs	r3, #1
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e214:	b29b      	uxth	r3, r3
 800e216:	3b01      	subs	r3, #1
 800e218:	b29a      	uxth	r2, r3
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	695b      	ldr	r3, [r3, #20]
 800e224:	f003 0304 	and.w	r3, r3, #4
 800e228:	2b04      	cmp	r3, #4
 800e22a:	d11b      	bne.n	800e264 <HAL_I2C_Mem_Write+0x180>
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e230:	2b00      	cmp	r3, #0
 800e232:	d017      	beq.n	800e264 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e238:	781a      	ldrb	r2, [r3, #0]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e244:	1c5a      	adds	r2, r3, #1
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e24e:	3b01      	subs	r3, #1
 800e250:	b29a      	uxth	r2, r3
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	3b01      	subs	r3, #1
 800e25e:	b29a      	uxth	r2, r3
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1aa      	bne.n	800e1c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e26c:	697a      	ldr	r2, [r7, #20]
 800e26e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f000 fce8 	bl	800ec46 <I2C_WaitOnBTFFlagUntilTimeout>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00d      	beq.n	800e298 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e280:	2b04      	cmp	r3, #4
 800e282:	d107      	bne.n	800e294 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e292:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e294:	2301      	movs	r3, #1
 800e296:	e016      	b.n	800e2c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2220      	movs	r2, #32
 800e2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	e000      	b.n	800e2c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800e2c4:	2302      	movs	r3, #2
  }
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3718      	adds	r7, #24
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	00100002 	.word	0x00100002
 800e2d4:	ffff0000 	.word	0xffff0000

0800e2d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b08c      	sub	sp, #48	; 0x30
 800e2dc:	af02      	add	r7, sp, #8
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	4608      	mov	r0, r1
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	817b      	strh	r3, [r7, #10]
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	813b      	strh	r3, [r7, #8]
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e2f2:	f7fe fe0f 	bl	800cf14 <HAL_GetTick>
 800e2f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	2b20      	cmp	r3, #32
 800e302:	f040 8208 	bne.w	800e716 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	2319      	movs	r3, #25
 800e30c:	2201      	movs	r2, #1
 800e30e:	497b      	ldr	r1, [pc, #492]	; (800e4fc <HAL_I2C_Mem_Read+0x224>)
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f000 fb81 	bl	800ea18 <I2C_WaitOnFlagUntilTimeout>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d001      	beq.n	800e320 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800e31c:	2302      	movs	r3, #2
 800e31e:	e1fb      	b.n	800e718 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e326:	2b01      	cmp	r3, #1
 800e328:	d101      	bne.n	800e32e <HAL_I2C_Mem_Read+0x56>
 800e32a:	2302      	movs	r3, #2
 800e32c:	e1f4      	b.n	800e718 <HAL_I2C_Mem_Read+0x440>
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2201      	movs	r2, #1
 800e332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f003 0301 	and.w	r3, r3, #1
 800e340:	2b01      	cmp	r3, #1
 800e342:	d007      	beq.n	800e354 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f042 0201 	orr.w	r2, r2, #1
 800e352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2222      	movs	r2, #34	; 0x22
 800e368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2240      	movs	r2, #64	; 0x40
 800e370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e37e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	4a5b      	ldr	r2, [pc, #364]	; (800e500 <HAL_I2C_Mem_Read+0x228>)
 800e394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e396:	88f8      	ldrh	r0, [r7, #6]
 800e398:	893a      	ldrh	r2, [r7, #8]
 800e39a:	8979      	ldrh	r1, [r7, #10]
 800e39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39e:	9301      	str	r3, [sp, #4]
 800e3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f000 fa50 	bl	800e84c <I2C_RequestMemoryRead>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e1b0      	b.n	800e718 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d113      	bne.n	800e3e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3be:	2300      	movs	r3, #0
 800e3c0:	623b      	str	r3, [r7, #32]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	695b      	ldr	r3, [r3, #20]
 800e3c8:	623b      	str	r3, [r7, #32]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	699b      	ldr	r3, [r3, #24]
 800e3d0:	623b      	str	r3, [r7, #32]
 800e3d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3e2:	601a      	str	r2, [r3, #0]
 800e3e4:	e184      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d11b      	bne.n	800e426 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3fe:	2300      	movs	r3, #0
 800e400:	61fb      	str	r3, [r7, #28]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	695b      	ldr	r3, [r3, #20]
 800e408:	61fb      	str	r3, [r7, #28]
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	699b      	ldr	r3, [r3, #24]
 800e410:	61fb      	str	r3, [r7, #28]
 800e412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e422:	601a      	str	r2, [r3, #0]
 800e424:	e164      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	d11b      	bne.n	800e466 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e43c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e44c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e44e:	2300      	movs	r3, #0
 800e450:	61bb      	str	r3, [r7, #24]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	695b      	ldr	r3, [r3, #20]
 800e458:	61bb      	str	r3, [r7, #24]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	699b      	ldr	r3, [r3, #24]
 800e460:	61bb      	str	r3, [r7, #24]
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	e144      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e466:	2300      	movs	r3, #0
 800e468:	617b      	str	r3, [r7, #20]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	695b      	ldr	r3, [r3, #20]
 800e470:	617b      	str	r3, [r7, #20]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	617b      	str	r3, [r7, #20]
 800e47a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800e47c:	e138      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e482:	2b03      	cmp	r3, #3
 800e484:	f200 80f1 	bhi.w	800e66a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d123      	bne.n	800e4d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e492:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f000 fc17 	bl	800ecc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d001      	beq.n	800e4a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	e139      	b.n	800e718 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	691a      	ldr	r2, [r3, #16]
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ae:	b2d2      	uxtb	r2, r2
 800e4b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b6:	1c5a      	adds	r2, r3, #1
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e4d6:	e10b      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	d14e      	bne.n	800e57e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e2:	9300      	str	r3, [sp, #0]
 800e4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	4906      	ldr	r1, [pc, #24]	; (800e504 <HAL_I2C_Mem_Read+0x22c>)
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f000 fa94 	bl	800ea18 <I2C_WaitOnFlagUntilTimeout>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d008      	beq.n	800e508 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e10e      	b.n	800e718 <HAL_I2C_Mem_Read+0x440>
 800e4fa:	bf00      	nop
 800e4fc:	00100002 	.word	0x00100002
 800e500:	ffff0000 	.word	0xffff0000
 800e504:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	691a      	ldr	r2, [r3, #16]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e522:	b2d2      	uxtb	r2, r2
 800e524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52a:	1c5a      	adds	r2, r3, #1
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e534:	3b01      	subs	r3, #1
 800e536:	b29a      	uxth	r2, r3
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e540:	b29b      	uxth	r3, r3
 800e542:	3b01      	subs	r3, #1
 800e544:	b29a      	uxth	r2, r3
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	691a      	ldr	r2, [r3, #16]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e554:	b2d2      	uxtb	r2, r2
 800e556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e55c:	1c5a      	adds	r2, r3, #1
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e566:	3b01      	subs	r3, #1
 800e568:	b29a      	uxth	r2, r3
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e572:	b29b      	uxth	r3, r3
 800e574:	3b01      	subs	r3, #1
 800e576:	b29a      	uxth	r2, r3
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e57c:	e0b8      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e584:	2200      	movs	r2, #0
 800e586:	4966      	ldr	r1, [pc, #408]	; (800e720 <HAL_I2C_Mem_Read+0x448>)
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f000 fa45 	bl	800ea18 <I2C_WaitOnFlagUntilTimeout>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800e594:	2301      	movs	r3, #1
 800e596:	e0bf      	b.n	800e718 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	691a      	ldr	r2, [r3, #16]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b2:	b2d2      	uxtb	r2, r2
 800e5b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ba:	1c5a      	adds	r2, r3, #1
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	b29a      	uxth	r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	494f      	ldr	r1, [pc, #316]	; (800e720 <HAL_I2C_Mem_Read+0x448>)
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f000 fa17 	bl	800ea18 <I2C_WaitOnFlagUntilTimeout>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d001      	beq.n	800e5f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e091      	b.n	800e718 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	691a      	ldr	r2, [r3, #16]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60e:	b2d2      	uxtb	r2, r2
 800e610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e616:	1c5a      	adds	r2, r3, #1
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e620:	3b01      	subs	r3, #1
 800e622:	b29a      	uxth	r2, r3
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	3b01      	subs	r3, #1
 800e630:	b29a      	uxth	r2, r3
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	691a      	ldr	r2, [r3, #16]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e640:	b2d2      	uxtb	r2, r2
 800e642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e648:	1c5a      	adds	r2, r3, #1
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e652:	3b01      	subs	r3, #1
 800e654:	b29a      	uxth	r2, r3
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e65e:	b29b      	uxth	r3, r3
 800e660:	3b01      	subs	r3, #1
 800e662:	b29a      	uxth	r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e668:	e042      	b.n	800e6f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e66a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e66c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f000 fb2a 	bl	800ecc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d001      	beq.n	800e67e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	e04c      	b.n	800e718 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	691a      	ldr	r2, [r3, #16]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e688:	b2d2      	uxtb	r2, r2
 800e68a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e690:	1c5a      	adds	r2, r3, #1
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e69a:	3b01      	subs	r3, #1
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	3b01      	subs	r3, #1
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	695b      	ldr	r3, [r3, #20]
 800e6b6:	f003 0304 	and.w	r3, r3, #4
 800e6ba:	2b04      	cmp	r3, #4
 800e6bc:	d118      	bne.n	800e6f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	691a      	ldr	r2, [r3, #16]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c8:	b2d2      	uxtb	r2, r2
 800e6ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d0:	1c5a      	adds	r2, r3, #1
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	f47f aec2 	bne.w	800e47e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2220      	movs	r2, #32
 800e6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2200      	movs	r2, #0
 800e706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e712:	2300      	movs	r3, #0
 800e714:	e000      	b.n	800e718 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800e716:	2302      	movs	r3, #2
  }
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3728      	adds	r7, #40	; 0x28
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	00010004 	.word	0x00010004

0800e724 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b088      	sub	sp, #32
 800e728:	af02      	add	r7, sp, #8
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	4608      	mov	r0, r1
 800e72e:	4611      	mov	r1, r2
 800e730:	461a      	mov	r2, r3
 800e732:	4603      	mov	r3, r0
 800e734:	817b      	strh	r3, [r7, #10]
 800e736:	460b      	mov	r3, r1
 800e738:	813b      	strh	r3, [r7, #8]
 800e73a:	4613      	mov	r3, r2
 800e73c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e74c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	6a3b      	ldr	r3, [r7, #32]
 800e754:	2200      	movs	r2, #0
 800e756:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f000 f95c 	bl	800ea18 <I2C_WaitOnFlagUntilTimeout>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00c      	beq.n	800e780 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e77a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e77c:	2303      	movs	r3, #3
 800e77e:	e05f      	b.n	800e840 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e780:	897b      	ldrh	r3, [r7, #10]
 800e782:	b2db      	uxtb	r3, r3
 800e784:	461a      	mov	r2, r3
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e78e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	6a3a      	ldr	r2, [r7, #32]
 800e794:	492c      	ldr	r1, [pc, #176]	; (800e848 <I2C_RequestMemoryWrite+0x124>)
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f000 f995 	bl	800eac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e04c      	b.n	800e840 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	617b      	str	r3, [r7, #20]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	695b      	ldr	r3, [r3, #20]
 800e7b0:	617b      	str	r3, [r7, #20]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	699b      	ldr	r3, [r3, #24]
 800e7b8:	617b      	str	r3, [r7, #20]
 800e7ba:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7be:	6a39      	ldr	r1, [r7, #32]
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f000 f9ff 	bl	800ebc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00d      	beq.n	800e7e8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d0:	2b04      	cmp	r3, #4
 800e7d2:	d107      	bne.n	800e7e4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	e02b      	b.n	800e840 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e7e8:	88fb      	ldrh	r3, [r7, #6]
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d105      	bne.n	800e7fa <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e7ee:	893b      	ldrh	r3, [r7, #8]
 800e7f0:	b2da      	uxtb	r2, r3
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	611a      	str	r2, [r3, #16]
 800e7f8:	e021      	b.n	800e83e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e7fa:	893b      	ldrh	r3, [r7, #8]
 800e7fc:	0a1b      	lsrs	r3, r3, #8
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	b2da      	uxtb	r2, r3
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e80a:	6a39      	ldr	r1, [r7, #32]
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f000 f9d9 	bl	800ebc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d00d      	beq.n	800e834 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e81c:	2b04      	cmp	r3, #4
 800e81e:	d107      	bne.n	800e830 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e82e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e830:	2301      	movs	r3, #1
 800e832:	e005      	b.n	800e840 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e834:	893b      	ldrh	r3, [r7, #8]
 800e836:	b2da      	uxtb	r2, r3
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3718      	adds	r7, #24
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	00010002 	.word	0x00010002

0800e84c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b088      	sub	sp, #32
 800e850:	af02      	add	r7, sp, #8
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	4608      	mov	r0, r1
 800e856:	4611      	mov	r1, r2
 800e858:	461a      	mov	r2, r3
 800e85a:	4603      	mov	r3, r0
 800e85c:	817b      	strh	r3, [r7, #10]
 800e85e:	460b      	mov	r3, r1
 800e860:	813b      	strh	r3, [r7, #8]
 800e862:	4613      	mov	r3, r2
 800e864:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e874:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e884:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e888:	9300      	str	r3, [sp, #0]
 800e88a:	6a3b      	ldr	r3, [r7, #32]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f000 f8c0 	bl	800ea18 <I2C_WaitOnFlagUntilTimeout>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00c      	beq.n	800e8b8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d003      	beq.n	800e8b4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	e0a9      	b.n	800ea0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e8b8:	897b      	ldrh	r3, [r7, #10]
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	461a      	mov	r2, r3
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e8c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ca:	6a3a      	ldr	r2, [r7, #32]
 800e8cc:	4951      	ldr	r1, [pc, #324]	; (800ea14 <I2C_RequestMemoryRead+0x1c8>)
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f000 f8f9 	bl	800eac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d001      	beq.n	800e8de <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e096      	b.n	800ea0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e8de:	2300      	movs	r3, #0
 800e8e0:	617b      	str	r3, [r7, #20]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	695b      	ldr	r3, [r3, #20]
 800e8e8:	617b      	str	r3, [r7, #20]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	699b      	ldr	r3, [r3, #24]
 800e8f0:	617b      	str	r3, [r7, #20]
 800e8f2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8f6:	6a39      	ldr	r1, [r7, #32]
 800e8f8:	68f8      	ldr	r0, [r7, #12]
 800e8fa:	f000 f963 	bl	800ebc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00d      	beq.n	800e920 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d107      	bne.n	800e91c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e91a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e91c:	2301      	movs	r3, #1
 800e91e:	e075      	b.n	800ea0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e920:	88fb      	ldrh	r3, [r7, #6]
 800e922:	2b01      	cmp	r3, #1
 800e924:	d105      	bne.n	800e932 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e926:	893b      	ldrh	r3, [r7, #8]
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	611a      	str	r2, [r3, #16]
 800e930:	e021      	b.n	800e976 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e932:	893b      	ldrh	r3, [r7, #8]
 800e934:	0a1b      	lsrs	r3, r3, #8
 800e936:	b29b      	uxth	r3, r3
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e942:	6a39      	ldr	r1, [r7, #32]
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f000 f93d 	bl	800ebc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00d      	beq.n	800e96c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e954:	2b04      	cmp	r3, #4
 800e956:	d107      	bne.n	800e968 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e966:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e968:	2301      	movs	r3, #1
 800e96a:	e04f      	b.n	800ea0c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e96c:	893b      	ldrh	r3, [r7, #8]
 800e96e:	b2da      	uxtb	r2, r3
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e978:	6a39      	ldr	r1, [r7, #32]
 800e97a:	68f8      	ldr	r0, [r7, #12]
 800e97c:	f000 f922 	bl	800ebc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e980:	4603      	mov	r3, r0
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00d      	beq.n	800e9a2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e98a:	2b04      	cmp	r3, #4
 800e98c:	d107      	bne.n	800e99e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e99c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e034      	b.n	800ea0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e9b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	9300      	str	r3, [sp, #0]
 800e9b6:	6a3b      	ldr	r3, [r7, #32]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f000 f82a 	bl	800ea18 <I2C_WaitOnFlagUntilTimeout>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00c      	beq.n	800e9e4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d003      	beq.n	800e9e0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e9e0:	2303      	movs	r3, #3
 800e9e2:	e013      	b.n	800ea0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e9e4:	897b      	ldrh	r3, [r7, #10]
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	f043 0301 	orr.w	r3, r3, #1
 800e9ec:	b2da      	uxtb	r2, r3
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	6a3a      	ldr	r2, [r7, #32]
 800e9f8:	4906      	ldr	r1, [pc, #24]	; (800ea14 <I2C_RequestMemoryRead+0x1c8>)
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f000 f863 	bl	800eac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d001      	beq.n	800ea0a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800ea06:	2301      	movs	r3, #1
 800ea08:	e000      	b.n	800ea0c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3718      	adds	r7, #24
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	00010002 	.word	0x00010002

0800ea18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	603b      	str	r3, [r7, #0]
 800ea24:	4613      	mov	r3, r2
 800ea26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea28:	e025      	b.n	800ea76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea30:	d021      	beq.n	800ea76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea32:	f7fe fa6f 	bl	800cf14 <HAL_GetTick>
 800ea36:	4602      	mov	r2, r0
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	683a      	ldr	r2, [r7, #0]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d302      	bcc.n	800ea48 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d116      	bne.n	800ea76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2220      	movs	r2, #32
 800ea52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea62:	f043 0220 	orr.w	r2, r3, #32
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ea72:	2301      	movs	r3, #1
 800ea74:	e023      	b.n	800eabe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	0c1b      	lsrs	r3, r3, #16
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d10d      	bne.n	800ea9c <I2C_WaitOnFlagUntilTimeout+0x84>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	695b      	ldr	r3, [r3, #20]
 800ea86:	43da      	mvns	r2, r3
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	4013      	ands	r3, r2
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	bf0c      	ite	eq
 800ea92:	2301      	moveq	r3, #1
 800ea94:	2300      	movne	r3, #0
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	461a      	mov	r2, r3
 800ea9a:	e00c      	b.n	800eab6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	699b      	ldr	r3, [r3, #24]
 800eaa2:	43da      	mvns	r2, r3
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	bf0c      	ite	eq
 800eaae:	2301      	moveq	r3, #1
 800eab0:	2300      	movne	r3, #0
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	461a      	mov	r2, r3
 800eab6:	79fb      	ldrb	r3, [r7, #7]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d0b6      	beq.n	800ea2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b084      	sub	sp, #16
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	60f8      	str	r0, [r7, #12]
 800eace:	60b9      	str	r1, [r7, #8]
 800ead0:	607a      	str	r2, [r7, #4]
 800ead2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ead4:	e051      	b.n	800eb7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	695b      	ldr	r3, [r3, #20]
 800eadc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eae4:	d123      	bne.n	800eb2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eaf4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800eafe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2200      	movs	r2, #0
 800eb04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2220      	movs	r2, #32
 800eb0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb1a:	f043 0204 	orr.w	r2, r3, #4
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e046      	b.n	800ebbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb34:	d021      	beq.n	800eb7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb36:	f7fe f9ed 	bl	800cf14 <HAL_GetTick>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	1ad3      	subs	r3, r2, r3
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d302      	bcc.n	800eb4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d116      	bne.n	800eb7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2220      	movs	r2, #32
 800eb56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb66:	f043 0220 	orr.w	r2, r3, #32
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800eb76:	2301      	movs	r3, #1
 800eb78:	e020      	b.n	800ebbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	0c1b      	lsrs	r3, r3, #16
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d10c      	bne.n	800eb9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	695b      	ldr	r3, [r3, #20]
 800eb8a:	43da      	mvns	r2, r3
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	4013      	ands	r3, r2
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	bf14      	ite	ne
 800eb96:	2301      	movne	r3, #1
 800eb98:	2300      	moveq	r3, #0
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	e00b      	b.n	800ebb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	699b      	ldr	r3, [r3, #24]
 800eba4:	43da      	mvns	r2, r3
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	4013      	ands	r3, r2
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	bf14      	ite	ne
 800ebb0:	2301      	movne	r3, #1
 800ebb2:	2300      	moveq	r3, #0
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d18d      	bne.n	800ead6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	60b9      	str	r1, [r7, #8]
 800ebce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ebd0:	e02d      	b.n	800ec2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f000 f8ce 	bl	800ed74 <I2C_IsAcknowledgeFailed>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e02d      	b.n	800ec3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebe8:	d021      	beq.n	800ec2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebea:	f7fe f993 	bl	800cf14 <HAL_GetTick>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d302      	bcc.n	800ec00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d116      	bne.n	800ec2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2200      	movs	r2, #0
 800ec04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2220      	movs	r2, #32
 800ec0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec1a:	f043 0220 	orr.w	r2, r3, #32
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2200      	movs	r2, #0
 800ec26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e007      	b.n	800ec3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	695b      	ldr	r3, [r3, #20]
 800ec34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec38:	2b80      	cmp	r3, #128	; 0x80
 800ec3a:	d1ca      	bne.n	800ebd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ec3c:	2300      	movs	r3, #0
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b084      	sub	sp, #16
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	60f8      	str	r0, [r7, #12]
 800ec4e:	60b9      	str	r1, [r7, #8]
 800ec50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ec52:	e02d      	b.n	800ecb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f000 f88d 	bl	800ed74 <I2C_IsAcknowledgeFailed>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d001      	beq.n	800ec64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ec60:	2301      	movs	r3, #1
 800ec62:	e02d      	b.n	800ecc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec6a:	d021      	beq.n	800ecb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec6c:	f7fe f952 	bl	800cf14 <HAL_GetTick>
 800ec70:	4602      	mov	r2, r0
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d302      	bcc.n	800ec82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d116      	bne.n	800ecb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2200      	movs	r2, #0
 800ec86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2220      	movs	r2, #32
 800ec8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2200      	movs	r2, #0
 800ec94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec9c:	f043 0220 	orr.w	r2, r3, #32
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ecac:	2301      	movs	r3, #1
 800ecae:	e007      	b.n	800ecc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	695b      	ldr	r3, [r3, #20]
 800ecb6:	f003 0304 	and.w	r3, r3, #4
 800ecba:	2b04      	cmp	r3, #4
 800ecbc:	d1ca      	bne.n	800ec54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ecd4:	e042      	b.n	800ed5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	695b      	ldr	r3, [r3, #20]
 800ecdc:	f003 0310 	and.w	r3, r3, #16
 800ece0:	2b10      	cmp	r3, #16
 800ece2:	d119      	bne.n	800ed18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f06f 0210 	mvn.w	r2, #16
 800ecec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2220      	movs	r2, #32
 800ecf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ed14:	2301      	movs	r3, #1
 800ed16:	e029      	b.n	800ed6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed18:	f7fe f8fc 	bl	800cf14 <HAL_GetTick>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	68ba      	ldr	r2, [r7, #8]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d302      	bcc.n	800ed2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d116      	bne.n	800ed5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2200      	movs	r2, #0
 800ed32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2220      	movs	r2, #32
 800ed38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed48:	f043 0220 	orr.w	r2, r3, #32
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e007      	b.n	800ed6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	695b      	ldr	r3, [r3, #20]
 800ed62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed66:	2b40      	cmp	r3, #64	; 0x40
 800ed68:	d1b5      	bne.n	800ecd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	695b      	ldr	r3, [r3, #20]
 800ed82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed8a:	d11b      	bne.n	800edc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ed94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2220      	movs	r2, #32
 800eda0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edb0:	f043 0204 	orr.w	r2, r3, #4
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800edc0:	2301      	movs	r3, #1
 800edc2:	e000      	b.n	800edc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	370c      	adds	r7, #12
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr
	...

0800edd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d101      	bne.n	800ede6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ede2:	2301      	movs	r3, #1
 800ede4:	e25b      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f003 0301 	and.w	r3, r3, #1
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d075      	beq.n	800eede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800edf2:	4ba3      	ldr	r3, [pc, #652]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	f003 030c 	and.w	r3, r3, #12
 800edfa:	2b04      	cmp	r3, #4
 800edfc:	d00c      	beq.n	800ee18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800edfe:	4ba0      	ldr	r3, [pc, #640]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ee06:	2b08      	cmp	r3, #8
 800ee08:	d112      	bne.n	800ee30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee0a:	4b9d      	ldr	r3, [pc, #628]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee16:	d10b      	bne.n	800ee30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee18:	4b99      	ldr	r3, [pc, #612]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d05b      	beq.n	800eedc <HAL_RCC_OscConfig+0x108>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d157      	bne.n	800eedc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	e236      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee38:	d106      	bne.n	800ee48 <HAL_RCC_OscConfig+0x74>
 800ee3a:	4b91      	ldr	r3, [pc, #580]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4a90      	ldr	r2, [pc, #576]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee44:	6013      	str	r3, [r2, #0]
 800ee46:	e01d      	b.n	800ee84 <HAL_RCC_OscConfig+0xb0>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee50:	d10c      	bne.n	800ee6c <HAL_RCC_OscConfig+0x98>
 800ee52:	4b8b      	ldr	r3, [pc, #556]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a8a      	ldr	r2, [pc, #552]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ee5c:	6013      	str	r3, [r2, #0]
 800ee5e:	4b88      	ldr	r3, [pc, #544]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4a87      	ldr	r2, [pc, #540]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee68:	6013      	str	r3, [r2, #0]
 800ee6a:	e00b      	b.n	800ee84 <HAL_RCC_OscConfig+0xb0>
 800ee6c:	4b84      	ldr	r3, [pc, #528]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a83      	ldr	r2, [pc, #524]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee76:	6013      	str	r3, [r2, #0]
 800ee78:	4b81      	ldr	r3, [pc, #516]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4a80      	ldr	r2, [pc, #512]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ee7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ee82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d013      	beq.n	800eeb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee8c:	f7fe f842 	bl	800cf14 <HAL_GetTick>
 800ee90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee92:	e008      	b.n	800eea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ee94:	f7fe f83e 	bl	800cf14 <HAL_GetTick>
 800ee98:	4602      	mov	r2, r0
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	2b64      	cmp	r3, #100	; 0x64
 800eea0:	d901      	bls.n	800eea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800eea2:	2303      	movs	r3, #3
 800eea4:	e1fb      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eea6:	4b76      	ldr	r3, [pc, #472]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d0f0      	beq.n	800ee94 <HAL_RCC_OscConfig+0xc0>
 800eeb2:	e014      	b.n	800eede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eeb4:	f7fe f82e 	bl	800cf14 <HAL_GetTick>
 800eeb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eeba:	e008      	b.n	800eece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eebc:	f7fe f82a 	bl	800cf14 <HAL_GetTick>
 800eec0:	4602      	mov	r2, r0
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	2b64      	cmp	r3, #100	; 0x64
 800eec8:	d901      	bls.n	800eece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800eeca:	2303      	movs	r3, #3
 800eecc:	e1e7      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eece:	4b6c      	ldr	r3, [pc, #432]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1f0      	bne.n	800eebc <HAL_RCC_OscConfig+0xe8>
 800eeda:	e000      	b.n	800eede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eedc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f003 0302 	and.w	r3, r3, #2
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d063      	beq.n	800efb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800eeea:	4b65      	ldr	r3, [pc, #404]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	f003 030c 	and.w	r3, r3, #12
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00b      	beq.n	800ef0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800eef6:	4b62      	ldr	r3, [pc, #392]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800eef8:	689b      	ldr	r3, [r3, #8]
 800eefa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800eefe:	2b08      	cmp	r3, #8
 800ef00:	d11c      	bne.n	800ef3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef02:	4b5f      	ldr	r3, [pc, #380]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d116      	bne.n	800ef3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ef0e:	4b5c      	ldr	r3, [pc, #368]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f003 0302 	and.w	r3, r3, #2
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d005      	beq.n	800ef26 <HAL_RCC_OscConfig+0x152>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d001      	beq.n	800ef26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ef22:	2301      	movs	r3, #1
 800ef24:	e1bb      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef26:	4b56      	ldr	r3, [pc, #344]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	691b      	ldr	r3, [r3, #16]
 800ef32:	00db      	lsls	r3, r3, #3
 800ef34:	4952      	ldr	r1, [pc, #328]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ef36:	4313      	orrs	r3, r2
 800ef38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ef3a:	e03a      	b.n	800efb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d020      	beq.n	800ef86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ef44:	4b4f      	ldr	r3, [pc, #316]	; (800f084 <HAL_RCC_OscConfig+0x2b0>)
 800ef46:	2201      	movs	r2, #1
 800ef48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef4a:	f7fd ffe3 	bl	800cf14 <HAL_GetTick>
 800ef4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef50:	e008      	b.n	800ef64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ef52:	f7fd ffdf 	bl	800cf14 <HAL_GetTick>
 800ef56:	4602      	mov	r2, r0
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	1ad3      	subs	r3, r2, r3
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d901      	bls.n	800ef64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ef60:	2303      	movs	r3, #3
 800ef62:	e19c      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef64:	4b46      	ldr	r3, [pc, #280]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f003 0302 	and.w	r3, r3, #2
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d0f0      	beq.n	800ef52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef70:	4b43      	ldr	r3, [pc, #268]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	00db      	lsls	r3, r3, #3
 800ef7e:	4940      	ldr	r1, [pc, #256]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800ef80:	4313      	orrs	r3, r2
 800ef82:	600b      	str	r3, [r1, #0]
 800ef84:	e015      	b.n	800efb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ef86:	4b3f      	ldr	r3, [pc, #252]	; (800f084 <HAL_RCC_OscConfig+0x2b0>)
 800ef88:	2200      	movs	r2, #0
 800ef8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef8c:	f7fd ffc2 	bl	800cf14 <HAL_GetTick>
 800ef90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef92:	e008      	b.n	800efa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ef94:	f7fd ffbe 	bl	800cf14 <HAL_GetTick>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	2b02      	cmp	r3, #2
 800efa0:	d901      	bls.n	800efa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800efa2:	2303      	movs	r3, #3
 800efa4:	e17b      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800efa6:	4b36      	ldr	r3, [pc, #216]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f003 0302 	and.w	r3, r3, #2
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1f0      	bne.n	800ef94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f003 0308 	and.w	r3, r3, #8
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d030      	beq.n	800f020 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	695b      	ldr	r3, [r3, #20]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d016      	beq.n	800eff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800efc6:	4b30      	ldr	r3, [pc, #192]	; (800f088 <HAL_RCC_OscConfig+0x2b4>)
 800efc8:	2201      	movs	r2, #1
 800efca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800efcc:	f7fd ffa2 	bl	800cf14 <HAL_GetTick>
 800efd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800efd2:	e008      	b.n	800efe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800efd4:	f7fd ff9e 	bl	800cf14 <HAL_GetTick>
 800efd8:	4602      	mov	r2, r0
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d901      	bls.n	800efe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800efe2:	2303      	movs	r3, #3
 800efe4:	e15b      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800efe6:	4b26      	ldr	r3, [pc, #152]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800efe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efea:	f003 0302 	and.w	r3, r3, #2
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d0f0      	beq.n	800efd4 <HAL_RCC_OscConfig+0x200>
 800eff2:	e015      	b.n	800f020 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eff4:	4b24      	ldr	r3, [pc, #144]	; (800f088 <HAL_RCC_OscConfig+0x2b4>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800effa:	f7fd ff8b 	bl	800cf14 <HAL_GetTick>
 800effe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f000:	e008      	b.n	800f014 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f002:	f7fd ff87 	bl	800cf14 <HAL_GetTick>
 800f006:	4602      	mov	r2, r0
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	2b02      	cmp	r3, #2
 800f00e:	d901      	bls.n	800f014 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f010:	2303      	movs	r3, #3
 800f012:	e144      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f014:	4b1a      	ldr	r3, [pc, #104]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800f016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f018:	f003 0302 	and.w	r3, r3, #2
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1f0      	bne.n	800f002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f003 0304 	and.w	r3, r3, #4
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f000 80a0 	beq.w	800f16e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f02e:	2300      	movs	r3, #0
 800f030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f032:	4b13      	ldr	r3, [pc, #76]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800f034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d10f      	bne.n	800f05e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f03e:	2300      	movs	r3, #0
 800f040:	60bb      	str	r3, [r7, #8]
 800f042:	4b0f      	ldr	r3, [pc, #60]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800f044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f046:	4a0e      	ldr	r2, [pc, #56]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800f048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f04c:	6413      	str	r3, [r2, #64]	; 0x40
 800f04e:	4b0c      	ldr	r3, [pc, #48]	; (800f080 <HAL_RCC_OscConfig+0x2ac>)
 800f050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f056:	60bb      	str	r3, [r7, #8]
 800f058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f05a:	2301      	movs	r3, #1
 800f05c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f05e:	4b0b      	ldr	r3, [pc, #44]	; (800f08c <HAL_RCC_OscConfig+0x2b8>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f066:	2b00      	cmp	r3, #0
 800f068:	d121      	bne.n	800f0ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f06a:	4b08      	ldr	r3, [pc, #32]	; (800f08c <HAL_RCC_OscConfig+0x2b8>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4a07      	ldr	r2, [pc, #28]	; (800f08c <HAL_RCC_OscConfig+0x2b8>)
 800f070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f076:	f7fd ff4d 	bl	800cf14 <HAL_GetTick>
 800f07a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f07c:	e011      	b.n	800f0a2 <HAL_RCC_OscConfig+0x2ce>
 800f07e:	bf00      	nop
 800f080:	40023800 	.word	0x40023800
 800f084:	42470000 	.word	0x42470000
 800f088:	42470e80 	.word	0x42470e80
 800f08c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f090:	f7fd ff40 	bl	800cf14 <HAL_GetTick>
 800f094:	4602      	mov	r2, r0
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	2b02      	cmp	r3, #2
 800f09c:	d901      	bls.n	800f0a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800f09e:	2303      	movs	r3, #3
 800f0a0:	e0fd      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f0a2:	4b81      	ldr	r3, [pc, #516]	; (800f2a8 <HAL_RCC_OscConfig+0x4d4>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d0f0      	beq.n	800f090 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	689b      	ldr	r3, [r3, #8]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d106      	bne.n	800f0c4 <HAL_RCC_OscConfig+0x2f0>
 800f0b6:	4b7d      	ldr	r3, [pc, #500]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ba:	4a7c      	ldr	r2, [pc, #496]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f0bc:	f043 0301 	orr.w	r3, r3, #1
 800f0c0:	6713      	str	r3, [r2, #112]	; 0x70
 800f0c2:	e01c      	b.n	800f0fe <HAL_RCC_OscConfig+0x32a>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	2b05      	cmp	r3, #5
 800f0ca:	d10c      	bne.n	800f0e6 <HAL_RCC_OscConfig+0x312>
 800f0cc:	4b77      	ldr	r3, [pc, #476]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0d0:	4a76      	ldr	r2, [pc, #472]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f0d2:	f043 0304 	orr.w	r3, r3, #4
 800f0d6:	6713      	str	r3, [r2, #112]	; 0x70
 800f0d8:	4b74      	ldr	r3, [pc, #464]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0dc:	4a73      	ldr	r2, [pc, #460]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f0de:	f043 0301 	orr.w	r3, r3, #1
 800f0e2:	6713      	str	r3, [r2, #112]	; 0x70
 800f0e4:	e00b      	b.n	800f0fe <HAL_RCC_OscConfig+0x32a>
 800f0e6:	4b71      	ldr	r3, [pc, #452]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ea:	4a70      	ldr	r2, [pc, #448]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f0ec:	f023 0301 	bic.w	r3, r3, #1
 800f0f0:	6713      	str	r3, [r2, #112]	; 0x70
 800f0f2:	4b6e      	ldr	r3, [pc, #440]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0f6:	4a6d      	ldr	r2, [pc, #436]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f0f8:	f023 0304 	bic.w	r3, r3, #4
 800f0fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d015      	beq.n	800f132 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f106:	f7fd ff05 	bl	800cf14 <HAL_GetTick>
 800f10a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f10c:	e00a      	b.n	800f124 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f10e:	f7fd ff01 	bl	800cf14 <HAL_GetTick>
 800f112:	4602      	mov	r2, r0
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	f241 3288 	movw	r2, #5000	; 0x1388
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d901      	bls.n	800f124 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800f120:	2303      	movs	r3, #3
 800f122:	e0bc      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f124:	4b61      	ldr	r3, [pc, #388]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f128:	f003 0302 	and.w	r3, r3, #2
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d0ee      	beq.n	800f10e <HAL_RCC_OscConfig+0x33a>
 800f130:	e014      	b.n	800f15c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f132:	f7fd feef 	bl	800cf14 <HAL_GetTick>
 800f136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f138:	e00a      	b.n	800f150 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f13a:	f7fd feeb 	bl	800cf14 <HAL_GetTick>
 800f13e:	4602      	mov	r2, r0
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	1ad3      	subs	r3, r2, r3
 800f144:	f241 3288 	movw	r2, #5000	; 0x1388
 800f148:	4293      	cmp	r3, r2
 800f14a:	d901      	bls.n	800f150 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800f14c:	2303      	movs	r3, #3
 800f14e:	e0a6      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f150:	4b56      	ldr	r3, [pc, #344]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f154:	f003 0302 	and.w	r3, r3, #2
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1ee      	bne.n	800f13a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f15c:	7dfb      	ldrb	r3, [r7, #23]
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d105      	bne.n	800f16e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f162:	4b52      	ldr	r3, [pc, #328]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f166:	4a51      	ldr	r2, [pc, #324]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f16c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	699b      	ldr	r3, [r3, #24]
 800f172:	2b00      	cmp	r3, #0
 800f174:	f000 8092 	beq.w	800f29c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f178:	4b4c      	ldr	r3, [pc, #304]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	f003 030c 	and.w	r3, r3, #12
 800f180:	2b08      	cmp	r3, #8
 800f182:	d05c      	beq.n	800f23e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	699b      	ldr	r3, [r3, #24]
 800f188:	2b02      	cmp	r3, #2
 800f18a:	d141      	bne.n	800f210 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f18c:	4b48      	ldr	r3, [pc, #288]	; (800f2b0 <HAL_RCC_OscConfig+0x4dc>)
 800f18e:	2200      	movs	r2, #0
 800f190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f192:	f7fd febf 	bl	800cf14 <HAL_GetTick>
 800f196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f198:	e008      	b.n	800f1ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f19a:	f7fd febb 	bl	800cf14 <HAL_GetTick>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	2b02      	cmp	r3, #2
 800f1a6:	d901      	bls.n	800f1ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800f1a8:	2303      	movs	r3, #3
 800f1aa:	e078      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f1ac:	4b3f      	ldr	r3, [pc, #252]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1f0      	bne.n	800f19a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	69da      	ldr	r2, [r3, #28]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6a1b      	ldr	r3, [r3, #32]
 800f1c0:	431a      	orrs	r2, r3
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c6:	019b      	lsls	r3, r3, #6
 800f1c8:	431a      	orrs	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ce:	085b      	lsrs	r3, r3, #1
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	041b      	lsls	r3, r3, #16
 800f1d4:	431a      	orrs	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1da:	061b      	lsls	r3, r3, #24
 800f1dc:	4933      	ldr	r1, [pc, #204]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f1e2:	4b33      	ldr	r3, [pc, #204]	; (800f2b0 <HAL_RCC_OscConfig+0x4dc>)
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f1e8:	f7fd fe94 	bl	800cf14 <HAL_GetTick>
 800f1ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f1ee:	e008      	b.n	800f202 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f1f0:	f7fd fe90 	bl	800cf14 <HAL_GetTick>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	2b02      	cmp	r3, #2
 800f1fc:	d901      	bls.n	800f202 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800f1fe:	2303      	movs	r3, #3
 800f200:	e04d      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f202:	4b2a      	ldr	r3, [pc, #168]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d0f0      	beq.n	800f1f0 <HAL_RCC_OscConfig+0x41c>
 800f20e:	e045      	b.n	800f29c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f210:	4b27      	ldr	r3, [pc, #156]	; (800f2b0 <HAL_RCC_OscConfig+0x4dc>)
 800f212:	2200      	movs	r2, #0
 800f214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f216:	f7fd fe7d 	bl	800cf14 <HAL_GetTick>
 800f21a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f21c:	e008      	b.n	800f230 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f21e:	f7fd fe79 	bl	800cf14 <HAL_GetTick>
 800f222:	4602      	mov	r2, r0
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	1ad3      	subs	r3, r2, r3
 800f228:	2b02      	cmp	r3, #2
 800f22a:	d901      	bls.n	800f230 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800f22c:	2303      	movs	r3, #3
 800f22e:	e036      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f230:	4b1e      	ldr	r3, [pc, #120]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d1f0      	bne.n	800f21e <HAL_RCC_OscConfig+0x44a>
 800f23c:	e02e      	b.n	800f29c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	699b      	ldr	r3, [r3, #24]
 800f242:	2b01      	cmp	r3, #1
 800f244:	d101      	bne.n	800f24a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800f246:	2301      	movs	r3, #1
 800f248:	e029      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800f24a:	4b18      	ldr	r3, [pc, #96]	; (800f2ac <HAL_RCC_OscConfig+0x4d8>)
 800f24c:	689b      	ldr	r3, [r3, #8]
 800f24e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	69db      	ldr	r3, [r3, #28]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d11c      	bne.n	800f298 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f268:	429a      	cmp	r2, r3
 800f26a:	d115      	bne.n	800f298 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f26c:	68fa      	ldr	r2, [r7, #12]
 800f26e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f272:	4013      	ands	r3, r2
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f278:	4293      	cmp	r3, r2
 800f27a:	d10d      	bne.n	800f298 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800f286:	429a      	cmp	r2, r3
 800f288:	d106      	bne.n	800f298 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f294:	429a      	cmp	r2, r3
 800f296:	d001      	beq.n	800f29c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800f298:	2301      	movs	r3, #1
 800f29a:	e000      	b.n	800f29e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3718      	adds	r7, #24
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	40007000 	.word	0x40007000
 800f2ac:	40023800 	.word	0x40023800
 800f2b0:	42470060 	.word	0x42470060

0800f2b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d101      	bne.n	800f2c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	e0cc      	b.n	800f462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f2c8:	4b68      	ldr	r3, [pc, #416]	; (800f46c <HAL_RCC_ClockConfig+0x1b8>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f003 030f 	and.w	r3, r3, #15
 800f2d0:	683a      	ldr	r2, [r7, #0]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d90c      	bls.n	800f2f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f2d6:	4b65      	ldr	r3, [pc, #404]	; (800f46c <HAL_RCC_ClockConfig+0x1b8>)
 800f2d8:	683a      	ldr	r2, [r7, #0]
 800f2da:	b2d2      	uxtb	r2, r2
 800f2dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f2de:	4b63      	ldr	r3, [pc, #396]	; (800f46c <HAL_RCC_ClockConfig+0x1b8>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f003 030f 	and.w	r3, r3, #15
 800f2e6:	683a      	ldr	r2, [r7, #0]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d001      	beq.n	800f2f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e0b8      	b.n	800f462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f003 0302 	and.w	r3, r3, #2
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d020      	beq.n	800f33e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f003 0304 	and.w	r3, r3, #4
 800f304:	2b00      	cmp	r3, #0
 800f306:	d005      	beq.n	800f314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f308:	4b59      	ldr	r3, [pc, #356]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	4a58      	ldr	r2, [pc, #352]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f30e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f003 0308 	and.w	r3, r3, #8
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d005      	beq.n	800f32c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f320:	4b53      	ldr	r3, [pc, #332]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	4a52      	ldr	r2, [pc, #328]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f32a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f32c:	4b50      	ldr	r3, [pc, #320]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	494d      	ldr	r1, [pc, #308]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f33a:	4313      	orrs	r3, r2
 800f33c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f003 0301 	and.w	r3, r3, #1
 800f346:	2b00      	cmp	r3, #0
 800f348:	d044      	beq.n	800f3d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d107      	bne.n	800f362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f352:	4b47      	ldr	r3, [pc, #284]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d119      	bne.n	800f392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f35e:	2301      	movs	r3, #1
 800f360:	e07f      	b.n	800f462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	2b02      	cmp	r3, #2
 800f368:	d003      	beq.n	800f372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f36e:	2b03      	cmp	r3, #3
 800f370:	d107      	bne.n	800f382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f372:	4b3f      	ldr	r3, [pc, #252]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d109      	bne.n	800f392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f37e:	2301      	movs	r3, #1
 800f380:	e06f      	b.n	800f462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f382:	4b3b      	ldr	r3, [pc, #236]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f003 0302 	and.w	r3, r3, #2
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d101      	bne.n	800f392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f38e:	2301      	movs	r3, #1
 800f390:	e067      	b.n	800f462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f392:	4b37      	ldr	r3, [pc, #220]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	f023 0203 	bic.w	r2, r3, #3
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	4934      	ldr	r1, [pc, #208]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f3a4:	f7fd fdb6 	bl	800cf14 <HAL_GetTick>
 800f3a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3aa:	e00a      	b.n	800f3c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f3ac:	f7fd fdb2 	bl	800cf14 <HAL_GetTick>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d901      	bls.n	800f3c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f3be:	2303      	movs	r3, #3
 800f3c0:	e04f      	b.n	800f462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3c2:	4b2b      	ldr	r3, [pc, #172]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	f003 020c 	and.w	r2, r3, #12
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d1eb      	bne.n	800f3ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f3d4:	4b25      	ldr	r3, [pc, #148]	; (800f46c <HAL_RCC_ClockConfig+0x1b8>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f003 030f 	and.w	r3, r3, #15
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d20c      	bcs.n	800f3fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f3e2:	4b22      	ldr	r3, [pc, #136]	; (800f46c <HAL_RCC_ClockConfig+0x1b8>)
 800f3e4:	683a      	ldr	r2, [r7, #0]
 800f3e6:	b2d2      	uxtb	r2, r2
 800f3e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3ea:	4b20      	ldr	r3, [pc, #128]	; (800f46c <HAL_RCC_ClockConfig+0x1b8>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f003 030f 	and.w	r3, r3, #15
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d001      	beq.n	800f3fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	e032      	b.n	800f462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f003 0304 	and.w	r3, r3, #4
 800f404:	2b00      	cmp	r3, #0
 800f406:	d008      	beq.n	800f41a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f408:	4b19      	ldr	r3, [pc, #100]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	4916      	ldr	r1, [pc, #88]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f416:	4313      	orrs	r3, r2
 800f418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f003 0308 	and.w	r3, r3, #8
 800f422:	2b00      	cmp	r3, #0
 800f424:	d009      	beq.n	800f43a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f426:	4b12      	ldr	r3, [pc, #72]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f428:	689b      	ldr	r3, [r3, #8]
 800f42a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	691b      	ldr	r3, [r3, #16]
 800f432:	00db      	lsls	r3, r3, #3
 800f434:	490e      	ldr	r1, [pc, #56]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f436:	4313      	orrs	r3, r2
 800f438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f43a:	f000 f821 	bl	800f480 <HAL_RCC_GetSysClockFreq>
 800f43e:	4601      	mov	r1, r0
 800f440:	4b0b      	ldr	r3, [pc, #44]	; (800f470 <HAL_RCC_ClockConfig+0x1bc>)
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	091b      	lsrs	r3, r3, #4
 800f446:	f003 030f 	and.w	r3, r3, #15
 800f44a:	4a0a      	ldr	r2, [pc, #40]	; (800f474 <HAL_RCC_ClockConfig+0x1c0>)
 800f44c:	5cd3      	ldrb	r3, [r2, r3]
 800f44e:	fa21 f303 	lsr.w	r3, r1, r3
 800f452:	4a09      	ldr	r2, [pc, #36]	; (800f478 <HAL_RCC_ClockConfig+0x1c4>)
 800f454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f456:	4b09      	ldr	r3, [pc, #36]	; (800f47c <HAL_RCC_ClockConfig+0x1c8>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7fd fd16 	bl	800ce8c <HAL_InitTick>

  return HAL_OK;
 800f460:	2300      	movs	r3, #0
}
 800f462:	4618      	mov	r0, r3
 800f464:	3710      	adds	r7, #16
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	40023c00 	.word	0x40023c00
 800f470:	40023800 	.word	0x40023800
 800f474:	0801558c 	.word	0x0801558c
 800f478:	20000010 	.word	0x20000010
 800f47c:	200000bc 	.word	0x200000bc

0800f480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f480:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f486:	2300      	movs	r3, #0
 800f488:	607b      	str	r3, [r7, #4]
 800f48a:	2300      	movs	r3, #0
 800f48c:	60fb      	str	r3, [r7, #12]
 800f48e:	2300      	movs	r3, #0
 800f490:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800f492:	2300      	movs	r3, #0
 800f494:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f496:	4b63      	ldr	r3, [pc, #396]	; (800f624 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	f003 030c 	and.w	r3, r3, #12
 800f49e:	2b04      	cmp	r3, #4
 800f4a0:	d007      	beq.n	800f4b2 <HAL_RCC_GetSysClockFreq+0x32>
 800f4a2:	2b08      	cmp	r3, #8
 800f4a4:	d008      	beq.n	800f4b8 <HAL_RCC_GetSysClockFreq+0x38>
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f040 80b4 	bne.w	800f614 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f4ac:	4b5e      	ldr	r3, [pc, #376]	; (800f628 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800f4ae:	60bb      	str	r3, [r7, #8]
       break;
 800f4b0:	e0b3      	b.n	800f61a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f4b2:	4b5e      	ldr	r3, [pc, #376]	; (800f62c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800f4b4:	60bb      	str	r3, [r7, #8]
      break;
 800f4b6:	e0b0      	b.n	800f61a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f4b8:	4b5a      	ldr	r3, [pc, #360]	; (800f624 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f4c2:	4b58      	ldr	r3, [pc, #352]	; (800f624 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d04a      	beq.n	800f564 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f4ce:	4b55      	ldr	r3, [pc, #340]	; (800f624 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	099b      	lsrs	r3, r3, #6
 800f4d4:	f04f 0400 	mov.w	r4, #0
 800f4d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f4dc:	f04f 0200 	mov.w	r2, #0
 800f4e0:	ea03 0501 	and.w	r5, r3, r1
 800f4e4:	ea04 0602 	and.w	r6, r4, r2
 800f4e8:	4629      	mov	r1, r5
 800f4ea:	4632      	mov	r2, r6
 800f4ec:	f04f 0300 	mov.w	r3, #0
 800f4f0:	f04f 0400 	mov.w	r4, #0
 800f4f4:	0154      	lsls	r4, r2, #5
 800f4f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800f4fa:	014b      	lsls	r3, r1, #5
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	4622      	mov	r2, r4
 800f500:	1b49      	subs	r1, r1, r5
 800f502:	eb62 0206 	sbc.w	r2, r2, r6
 800f506:	f04f 0300 	mov.w	r3, #0
 800f50a:	f04f 0400 	mov.w	r4, #0
 800f50e:	0194      	lsls	r4, r2, #6
 800f510:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800f514:	018b      	lsls	r3, r1, #6
 800f516:	1a5b      	subs	r3, r3, r1
 800f518:	eb64 0402 	sbc.w	r4, r4, r2
 800f51c:	f04f 0100 	mov.w	r1, #0
 800f520:	f04f 0200 	mov.w	r2, #0
 800f524:	00e2      	lsls	r2, r4, #3
 800f526:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800f52a:	00d9      	lsls	r1, r3, #3
 800f52c:	460b      	mov	r3, r1
 800f52e:	4614      	mov	r4, r2
 800f530:	195b      	adds	r3, r3, r5
 800f532:	eb44 0406 	adc.w	r4, r4, r6
 800f536:	f04f 0100 	mov.w	r1, #0
 800f53a:	f04f 0200 	mov.w	r2, #0
 800f53e:	0262      	lsls	r2, r4, #9
 800f540:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800f544:	0259      	lsls	r1, r3, #9
 800f546:	460b      	mov	r3, r1
 800f548:	4614      	mov	r4, r2
 800f54a:	4618      	mov	r0, r3
 800f54c:	4621      	mov	r1, r4
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f04f 0400 	mov.w	r4, #0
 800f554:	461a      	mov	r2, r3
 800f556:	4623      	mov	r3, r4
 800f558:	f7f1 fb76 	bl	8000c48 <__aeabi_uldivmod>
 800f55c:	4603      	mov	r3, r0
 800f55e:	460c      	mov	r4, r1
 800f560:	60fb      	str	r3, [r7, #12]
 800f562:	e049      	b.n	800f5f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f564:	4b2f      	ldr	r3, [pc, #188]	; (800f624 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	099b      	lsrs	r3, r3, #6
 800f56a:	f04f 0400 	mov.w	r4, #0
 800f56e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f572:	f04f 0200 	mov.w	r2, #0
 800f576:	ea03 0501 	and.w	r5, r3, r1
 800f57a:	ea04 0602 	and.w	r6, r4, r2
 800f57e:	4629      	mov	r1, r5
 800f580:	4632      	mov	r2, r6
 800f582:	f04f 0300 	mov.w	r3, #0
 800f586:	f04f 0400 	mov.w	r4, #0
 800f58a:	0154      	lsls	r4, r2, #5
 800f58c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800f590:	014b      	lsls	r3, r1, #5
 800f592:	4619      	mov	r1, r3
 800f594:	4622      	mov	r2, r4
 800f596:	1b49      	subs	r1, r1, r5
 800f598:	eb62 0206 	sbc.w	r2, r2, r6
 800f59c:	f04f 0300 	mov.w	r3, #0
 800f5a0:	f04f 0400 	mov.w	r4, #0
 800f5a4:	0194      	lsls	r4, r2, #6
 800f5a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800f5aa:	018b      	lsls	r3, r1, #6
 800f5ac:	1a5b      	subs	r3, r3, r1
 800f5ae:	eb64 0402 	sbc.w	r4, r4, r2
 800f5b2:	f04f 0100 	mov.w	r1, #0
 800f5b6:	f04f 0200 	mov.w	r2, #0
 800f5ba:	00e2      	lsls	r2, r4, #3
 800f5bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800f5c0:	00d9      	lsls	r1, r3, #3
 800f5c2:	460b      	mov	r3, r1
 800f5c4:	4614      	mov	r4, r2
 800f5c6:	195b      	adds	r3, r3, r5
 800f5c8:	eb44 0406 	adc.w	r4, r4, r6
 800f5cc:	f04f 0100 	mov.w	r1, #0
 800f5d0:	f04f 0200 	mov.w	r2, #0
 800f5d4:	02a2      	lsls	r2, r4, #10
 800f5d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800f5da:	0299      	lsls	r1, r3, #10
 800f5dc:	460b      	mov	r3, r1
 800f5de:	4614      	mov	r4, r2
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	4621      	mov	r1, r4
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f04f 0400 	mov.w	r4, #0
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	4623      	mov	r3, r4
 800f5ee:	f7f1 fb2b 	bl	8000c48 <__aeabi_uldivmod>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f5f8:	4b0a      	ldr	r3, [pc, #40]	; (800f624 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	0c1b      	lsrs	r3, r3, #16
 800f5fe:	f003 0303 	and.w	r3, r3, #3
 800f602:	3301      	adds	r3, #1
 800f604:	005b      	lsls	r3, r3, #1
 800f606:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f608:	68fa      	ldr	r2, [r7, #12]
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f610:	60bb      	str	r3, [r7, #8]
      break;
 800f612:	e002      	b.n	800f61a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f614:	4b04      	ldr	r3, [pc, #16]	; (800f628 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800f616:	60bb      	str	r3, [r7, #8]
      break;
 800f618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f61a:	68bb      	ldr	r3, [r7, #8]
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3714      	adds	r7, #20
 800f620:	46bd      	mov	sp, r7
 800f622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f624:	40023800 	.word	0x40023800
 800f628:	00f42400 	.word	0x00f42400
 800f62c:	007a1200 	.word	0x007a1200

0800f630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f630:	b480      	push	{r7}
 800f632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f634:	4b03      	ldr	r3, [pc, #12]	; (800f644 <HAL_RCC_GetHCLKFreq+0x14>)
 800f636:	681b      	ldr	r3, [r3, #0]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop
 800f644:	20000010 	.word	0x20000010

0800f648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f64c:	f7ff fff0 	bl	800f630 <HAL_RCC_GetHCLKFreq>
 800f650:	4601      	mov	r1, r0
 800f652:	4b05      	ldr	r3, [pc, #20]	; (800f668 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	0a9b      	lsrs	r3, r3, #10
 800f658:	f003 0307 	and.w	r3, r3, #7
 800f65c:	4a03      	ldr	r2, [pc, #12]	; (800f66c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f65e:	5cd3      	ldrb	r3, [r2, r3]
 800f660:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f664:	4618      	mov	r0, r3
 800f666:	bd80      	pop	{r7, pc}
 800f668:	40023800 	.word	0x40023800
 800f66c:	0801559c 	.word	0x0801559c

0800f670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f674:	f7ff ffdc 	bl	800f630 <HAL_RCC_GetHCLKFreq>
 800f678:	4601      	mov	r1, r0
 800f67a:	4b05      	ldr	r3, [pc, #20]	; (800f690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	0b5b      	lsrs	r3, r3, #13
 800f680:	f003 0307 	and.w	r3, r3, #7
 800f684:	4a03      	ldr	r2, [pc, #12]	; (800f694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f686:	5cd3      	ldrb	r3, [r2, r3]
 800f688:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	40023800 	.word	0x40023800
 800f694:	0801559c 	.word	0x0801559c

0800f698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d101      	bne.n	800f6aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e01d      	b.n	800f6e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d106      	bne.n	800f6c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f7fa f8d0 	bl	8009864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2202      	movs	r2, #2
 800f6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	3304      	adds	r3, #4
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4610      	mov	r0, r2
 800f6d8:	f000 fb1c 	bl	800fd14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2201      	movs	r2, #1
 800f6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f6e4:	2300      	movs	r3, #0
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3708      	adds	r7, #8
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}

0800f6ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b082      	sub	sp, #8
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d101      	bne.n	800f700 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e01d      	b.n	800f73c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f706:	b2db      	uxtb	r3, r3
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d106      	bne.n	800f71a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2200      	movs	r2, #0
 800f710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f815 	bl	800f744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2202      	movs	r2, #2
 800f71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	3304      	adds	r3, #4
 800f72a:	4619      	mov	r1, r3
 800f72c:	4610      	mov	r0, r2
 800f72e:	f000 faf1 	bl	800fd14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2201      	movs	r2, #1
 800f736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3708      	adds	r7, #8
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2201      	movs	r2, #1
 800f768:	6839      	ldr	r1, [r7, #0]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f000 fdbc 	bl	80102e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a15      	ldr	r2, [pc, #84]	; (800f7cc <HAL_TIM_PWM_Start+0x74>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d004      	beq.n	800f784 <HAL_TIM_PWM_Start+0x2c>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4a14      	ldr	r2, [pc, #80]	; (800f7d0 <HAL_TIM_PWM_Start+0x78>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d101      	bne.n	800f788 <HAL_TIM_PWM_Start+0x30>
 800f784:	2301      	movs	r3, #1
 800f786:	e000      	b.n	800f78a <HAL_TIM_PWM_Start+0x32>
 800f788:	2300      	movs	r3, #0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d007      	beq.n	800f79e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f79c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	f003 0307 	and.w	r3, r3, #7
 800f7a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2b06      	cmp	r3, #6
 800f7ae:	d007      	beq.n	800f7c0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f042 0201 	orr.w	r2, r2, #1
 800f7be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	40010000 	.word	0x40010000
 800f7d0:	40010400 	.word	0x40010400

0800f7d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	6839      	ldr	r1, [r7, #0]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f000 fd7e 	bl	80102e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a22      	ldr	r2, [pc, #136]	; (800f87c <HAL_TIM_PWM_Stop+0xa8>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d004      	beq.n	800f800 <HAL_TIM_PWM_Stop+0x2c>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a21      	ldr	r2, [pc, #132]	; (800f880 <HAL_TIM_PWM_Stop+0xac>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d101      	bne.n	800f804 <HAL_TIM_PWM_Stop+0x30>
 800f800:	2301      	movs	r3, #1
 800f802:	e000      	b.n	800f806 <HAL_TIM_PWM_Stop+0x32>
 800f804:	2300      	movs	r3, #0
 800f806:	2b00      	cmp	r3, #0
 800f808:	d017      	beq.n	800f83a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	6a1a      	ldr	r2, [r3, #32]
 800f810:	f241 1311 	movw	r3, #4369	; 0x1111
 800f814:	4013      	ands	r3, r2
 800f816:	2b00      	cmp	r3, #0
 800f818:	d10f      	bne.n	800f83a <HAL_TIM_PWM_Stop+0x66>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	6a1a      	ldr	r2, [r3, #32]
 800f820:	f240 4344 	movw	r3, #1092	; 0x444
 800f824:	4013      	ands	r3, r2
 800f826:	2b00      	cmp	r3, #0
 800f828:	d107      	bne.n	800f83a <HAL_TIM_PWM_Stop+0x66>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f838:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	6a1a      	ldr	r2, [r3, #32]
 800f840:	f241 1311 	movw	r3, #4369	; 0x1111
 800f844:	4013      	ands	r3, r2
 800f846:	2b00      	cmp	r3, #0
 800f848:	d10f      	bne.n	800f86a <HAL_TIM_PWM_Stop+0x96>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6a1a      	ldr	r2, [r3, #32]
 800f850:	f240 4344 	movw	r3, #1092	; 0x444
 800f854:	4013      	ands	r3, r2
 800f856:	2b00      	cmp	r3, #0
 800f858:	d107      	bne.n	800f86a <HAL_TIM_PWM_Stop+0x96>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f022 0201 	bic.w	r2, r2, #1
 800f868:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2201      	movs	r2, #1
 800f86e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	40010000 	.word	0x40010000
 800f880:	40010400 	.word	0x40010400

0800f884 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d101      	bne.n	800f898 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f894:	2301      	movs	r3, #1
 800f896:	e083      	b.n	800f9a0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d106      	bne.n	800f8b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7f9 ff3f 	bl	8009730 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2202      	movs	r2, #2
 800f8b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	6812      	ldr	r2, [r2, #0]
 800f8c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8c8:	f023 0307 	bic.w	r3, r3, #7
 800f8cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	3304      	adds	r3, #4
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	4610      	mov	r0, r2
 800f8da:	f000 fa1b 	bl	800fd14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	689b      	ldr	r3, [r3, #8]
 800f8e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	699b      	ldr	r3, [r3, #24]
 800f8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	6a1b      	ldr	r3, [r3, #32]
 800f8f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	697a      	ldr	r2, [r7, #20]
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f906:	f023 0303 	bic.w	r3, r3, #3
 800f90a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	689a      	ldr	r2, [r3, #8]
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	699b      	ldr	r3, [r3, #24]
 800f914:	021b      	lsls	r3, r3, #8
 800f916:	4313      	orrs	r3, r2
 800f918:	693a      	ldr	r2, [r7, #16]
 800f91a:	4313      	orrs	r3, r2
 800f91c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f924:	f023 030c 	bic.w	r3, r3, #12
 800f928:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	68da      	ldr	r2, [r3, #12]
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	69db      	ldr	r3, [r3, #28]
 800f93e:	021b      	lsls	r3, r3, #8
 800f940:	4313      	orrs	r3, r2
 800f942:	693a      	ldr	r2, [r7, #16]
 800f944:	4313      	orrs	r3, r2
 800f946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	691b      	ldr	r3, [r3, #16]
 800f94c:	011a      	lsls	r2, r3, #4
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	031b      	lsls	r3, r3, #12
 800f954:	4313      	orrs	r3, r2
 800f956:	693a      	ldr	r2, [r7, #16]
 800f958:	4313      	orrs	r3, r2
 800f95a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f962:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f96a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	685a      	ldr	r2, [r3, #4]
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	011b      	lsls	r3, r3, #4
 800f976:	4313      	orrs	r3, r2
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	4313      	orrs	r3, r2
 800f97c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	697a      	ldr	r2, [r7, #20]
 800f984:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	693a      	ldr	r2, [r7, #16]
 800f98c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	68fa      	ldr	r2, [r7, #12]
 800f994:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2201      	movs	r2, #1
 800f99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f99e:	2300      	movs	r3, #0
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3718      	adds	r7, #24
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d002      	beq.n	800f9be <HAL_TIM_Encoder_Start+0x16>
 800f9b8:	2b04      	cmp	r3, #4
 800f9ba:	d008      	beq.n	800f9ce <HAL_TIM_Encoder_Start+0x26>
 800f9bc:	e00f      	b.n	800f9de <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	2100      	movs	r1, #0
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 fc8e 	bl	80102e8 <TIM_CCxChannelCmd>
      break;
 800f9cc:	e016      	b.n	800f9fc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	2104      	movs	r1, #4
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f000 fc86 	bl	80102e8 <TIM_CCxChannelCmd>
      break;
 800f9dc:	e00e      	b.n	800f9fc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f000 fc7e 	bl	80102e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	2104      	movs	r1, #4
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f000 fc77 	bl	80102e8 <TIM_CCxChannelCmd>
      break;
 800f9fa:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	681a      	ldr	r2, [r3, #0]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f042 0201 	orr.w	r2, r2, #1
 800fa0a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
	...

0800fa18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d101      	bne.n	800fa32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800fa2e:	2302      	movs	r3, #2
 800fa30:	e0b4      	b.n	800fb9c <HAL_TIM_PWM_ConfigChannel+0x184>
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2201      	movs	r2, #1
 800fa36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2202      	movs	r2, #2
 800fa3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2b0c      	cmp	r3, #12
 800fa46:	f200 809f 	bhi.w	800fb88 <HAL_TIM_PWM_ConfigChannel+0x170>
 800fa4a:	a201      	add	r2, pc, #4	; (adr r2, 800fa50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800fa4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa50:	0800fa85 	.word	0x0800fa85
 800fa54:	0800fb89 	.word	0x0800fb89
 800fa58:	0800fb89 	.word	0x0800fb89
 800fa5c:	0800fb89 	.word	0x0800fb89
 800fa60:	0800fac5 	.word	0x0800fac5
 800fa64:	0800fb89 	.word	0x0800fb89
 800fa68:	0800fb89 	.word	0x0800fb89
 800fa6c:	0800fb89 	.word	0x0800fb89
 800fa70:	0800fb07 	.word	0x0800fb07
 800fa74:	0800fb89 	.word	0x0800fb89
 800fa78:	0800fb89 	.word	0x0800fb89
 800fa7c:	0800fb89 	.word	0x0800fb89
 800fa80:	0800fb47 	.word	0x0800fb47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	68b9      	ldr	r1, [r7, #8]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f000 f9e2 	bl	800fe54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	699a      	ldr	r2, [r3, #24]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f042 0208 	orr.w	r2, r2, #8
 800fa9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	699a      	ldr	r2, [r3, #24]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	f022 0204 	bic.w	r2, r2, #4
 800faae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	6999      	ldr	r1, [r3, #24]
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	691a      	ldr	r2, [r3, #16]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	430a      	orrs	r2, r1
 800fac0:	619a      	str	r2, [r3, #24]
      break;
 800fac2:	e062      	b.n	800fb8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	68b9      	ldr	r1, [r7, #8]
 800faca:	4618      	mov	r0, r3
 800facc:	f000 fa32 	bl	800ff34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	699a      	ldr	r2, [r3, #24]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	699a      	ldr	r2, [r3, #24]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800faee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	6999      	ldr	r1, [r3, #24]
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	691b      	ldr	r3, [r3, #16]
 800fafa:	021a      	lsls	r2, r3, #8
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	430a      	orrs	r2, r1
 800fb02:	619a      	str	r2, [r3, #24]
      break;
 800fb04:	e041      	b.n	800fb8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	68b9      	ldr	r1, [r7, #8]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f000 fa87 	bl	8010020 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	69da      	ldr	r2, [r3, #28]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f042 0208 	orr.w	r2, r2, #8
 800fb20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	69da      	ldr	r2, [r3, #28]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f022 0204 	bic.w	r2, r2, #4
 800fb30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	69d9      	ldr	r1, [r3, #28]
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	691a      	ldr	r2, [r3, #16]
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	430a      	orrs	r2, r1
 800fb42:	61da      	str	r2, [r3, #28]
      break;
 800fb44:	e021      	b.n	800fb8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	68b9      	ldr	r1, [r7, #8]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f000 fadb 	bl	8010108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	69da      	ldr	r2, [r3, #28]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	69da      	ldr	r2, [r3, #28]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	69d9      	ldr	r1, [r3, #28]
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	691b      	ldr	r3, [r3, #16]
 800fb7c:	021a      	lsls	r2, r3, #8
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	430a      	orrs	r2, r1
 800fb84:	61da      	str	r2, [r3, #28]
      break;
 800fb86:	e000      	b.n	800fb8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800fb88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2200      	movs	r2, #0
 800fb96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb9a:	2300      	movs	r3, #0
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3710      	adds	r7, #16
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d101      	bne.n	800fbbc <HAL_TIM_ConfigClockSource+0x18>
 800fbb8:	2302      	movs	r3, #2
 800fbba:	e0a6      	b.n	800fd0a <HAL_TIM_ConfigClockSource+0x166>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2202      	movs	r2, #2
 800fbc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fbda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fbe2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b40      	cmp	r3, #64	; 0x40
 800fbf2:	d067      	beq.n	800fcc4 <HAL_TIM_ConfigClockSource+0x120>
 800fbf4:	2b40      	cmp	r3, #64	; 0x40
 800fbf6:	d80b      	bhi.n	800fc10 <HAL_TIM_ConfigClockSource+0x6c>
 800fbf8:	2b10      	cmp	r3, #16
 800fbfa:	d073      	beq.n	800fce4 <HAL_TIM_ConfigClockSource+0x140>
 800fbfc:	2b10      	cmp	r3, #16
 800fbfe:	d802      	bhi.n	800fc06 <HAL_TIM_ConfigClockSource+0x62>
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d06f      	beq.n	800fce4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fc04:	e078      	b.n	800fcf8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fc06:	2b20      	cmp	r3, #32
 800fc08:	d06c      	beq.n	800fce4 <HAL_TIM_ConfigClockSource+0x140>
 800fc0a:	2b30      	cmp	r3, #48	; 0x30
 800fc0c:	d06a      	beq.n	800fce4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800fc0e:	e073      	b.n	800fcf8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fc10:	2b70      	cmp	r3, #112	; 0x70
 800fc12:	d00d      	beq.n	800fc30 <HAL_TIM_ConfigClockSource+0x8c>
 800fc14:	2b70      	cmp	r3, #112	; 0x70
 800fc16:	d804      	bhi.n	800fc22 <HAL_TIM_ConfigClockSource+0x7e>
 800fc18:	2b50      	cmp	r3, #80	; 0x50
 800fc1a:	d033      	beq.n	800fc84 <HAL_TIM_ConfigClockSource+0xe0>
 800fc1c:	2b60      	cmp	r3, #96	; 0x60
 800fc1e:	d041      	beq.n	800fca4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800fc20:	e06a      	b.n	800fcf8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fc22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc26:	d066      	beq.n	800fcf6 <HAL_TIM_ConfigClockSource+0x152>
 800fc28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc2c:	d017      	beq.n	800fc5e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800fc2e:	e063      	b.n	800fcf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6818      	ldr	r0, [r3, #0]
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	6899      	ldr	r1, [r3, #8]
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	685a      	ldr	r2, [r3, #4]
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	f000 fb32 	bl	80102a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fc52:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	609a      	str	r2, [r3, #8]
      break;
 800fc5c:	e04c      	b.n	800fcf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6818      	ldr	r0, [r3, #0]
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	6899      	ldr	r1, [r3, #8]
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	685a      	ldr	r2, [r3, #4]
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	f000 fb1b 	bl	80102a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	689a      	ldr	r2, [r3, #8]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fc80:	609a      	str	r2, [r3, #8]
      break;
 800fc82:	e039      	b.n	800fcf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6818      	ldr	r0, [r3, #0]
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	6859      	ldr	r1, [r3, #4]
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	461a      	mov	r2, r3
 800fc92:	f000 fa8f 	bl	80101b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2150      	movs	r1, #80	; 0x50
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f000 fae8 	bl	8010272 <TIM_ITRx_SetConfig>
      break;
 800fca2:	e029      	b.n	800fcf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6818      	ldr	r0, [r3, #0]
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	6859      	ldr	r1, [r3, #4]
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	f000 faae 	bl	8010212 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2160      	movs	r1, #96	; 0x60
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f000 fad8 	bl	8010272 <TIM_ITRx_SetConfig>
      break;
 800fcc2:	e019      	b.n	800fcf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6818      	ldr	r0, [r3, #0]
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	6859      	ldr	r1, [r3, #4]
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	f000 fa6f 	bl	80101b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2140      	movs	r1, #64	; 0x40
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f000 fac8 	bl	8010272 <TIM_ITRx_SetConfig>
      break;
 800fce2:	e009      	b.n	800fcf8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4619      	mov	r1, r3
 800fcee:	4610      	mov	r0, r2
 800fcf0:	f000 fabf 	bl	8010272 <TIM_ITRx_SetConfig>
      break;
 800fcf4:	e000      	b.n	800fcf8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800fcf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
	...

0800fd14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b085      	sub	sp, #20
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	4a40      	ldr	r2, [pc, #256]	; (800fe28 <TIM_Base_SetConfig+0x114>)
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d013      	beq.n	800fd54 <TIM_Base_SetConfig+0x40>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd32:	d00f      	beq.n	800fd54 <TIM_Base_SetConfig+0x40>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	4a3d      	ldr	r2, [pc, #244]	; (800fe2c <TIM_Base_SetConfig+0x118>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d00b      	beq.n	800fd54 <TIM_Base_SetConfig+0x40>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	4a3c      	ldr	r2, [pc, #240]	; (800fe30 <TIM_Base_SetConfig+0x11c>)
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d007      	beq.n	800fd54 <TIM_Base_SetConfig+0x40>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4a3b      	ldr	r2, [pc, #236]	; (800fe34 <TIM_Base_SetConfig+0x120>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d003      	beq.n	800fd54 <TIM_Base_SetConfig+0x40>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4a3a      	ldr	r2, [pc, #232]	; (800fe38 <TIM_Base_SetConfig+0x124>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d108      	bne.n	800fd66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	68fa      	ldr	r2, [r7, #12]
 800fd62:	4313      	orrs	r3, r2
 800fd64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4a2f      	ldr	r2, [pc, #188]	; (800fe28 <TIM_Base_SetConfig+0x114>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d02b      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd74:	d027      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4a2c      	ldr	r2, [pc, #176]	; (800fe2c <TIM_Base_SetConfig+0x118>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d023      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	4a2b      	ldr	r2, [pc, #172]	; (800fe30 <TIM_Base_SetConfig+0x11c>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d01f      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	4a2a      	ldr	r2, [pc, #168]	; (800fe34 <TIM_Base_SetConfig+0x120>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d01b      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	4a29      	ldr	r2, [pc, #164]	; (800fe38 <TIM_Base_SetConfig+0x124>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d017      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4a28      	ldr	r2, [pc, #160]	; (800fe3c <TIM_Base_SetConfig+0x128>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d013      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4a27      	ldr	r2, [pc, #156]	; (800fe40 <TIM_Base_SetConfig+0x12c>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d00f      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4a26      	ldr	r2, [pc, #152]	; (800fe44 <TIM_Base_SetConfig+0x130>)
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d00b      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4a25      	ldr	r2, [pc, #148]	; (800fe48 <TIM_Base_SetConfig+0x134>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d007      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4a24      	ldr	r2, [pc, #144]	; (800fe4c <TIM_Base_SetConfig+0x138>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d003      	beq.n	800fdc6 <TIM_Base_SetConfig+0xb2>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	4a23      	ldr	r2, [pc, #140]	; (800fe50 <TIM_Base_SetConfig+0x13c>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d108      	bne.n	800fdd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fdcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	68fa      	ldr	r2, [r7, #12]
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	695b      	ldr	r3, [r3, #20]
 800fde2:	4313      	orrs	r3, r2
 800fde4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	689a      	ldr	r2, [r3, #8]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4a0a      	ldr	r2, [pc, #40]	; (800fe28 <TIM_Base_SetConfig+0x114>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d003      	beq.n	800fe0c <TIM_Base_SetConfig+0xf8>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	4a0c      	ldr	r2, [pc, #48]	; (800fe38 <TIM_Base_SetConfig+0x124>)
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d103      	bne.n	800fe14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	691a      	ldr	r2, [r3, #16]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2201      	movs	r2, #1
 800fe18:	615a      	str	r2, [r3, #20]
}
 800fe1a:	bf00      	nop
 800fe1c:	3714      	adds	r7, #20
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr
 800fe26:	bf00      	nop
 800fe28:	40010000 	.word	0x40010000
 800fe2c:	40000400 	.word	0x40000400
 800fe30:	40000800 	.word	0x40000800
 800fe34:	40000c00 	.word	0x40000c00
 800fe38:	40010400 	.word	0x40010400
 800fe3c:	40014000 	.word	0x40014000
 800fe40:	40014400 	.word	0x40014400
 800fe44:	40014800 	.word	0x40014800
 800fe48:	40001800 	.word	0x40001800
 800fe4c:	40001c00 	.word	0x40001c00
 800fe50:	40002000 	.word	0x40002000

0800fe54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b087      	sub	sp, #28
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a1b      	ldr	r3, [r3, #32]
 800fe62:	f023 0201 	bic.w	r2, r3, #1
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6a1b      	ldr	r3, [r3, #32]
 800fe6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	699b      	ldr	r3, [r3, #24]
 800fe7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f023 0303 	bic.w	r3, r3, #3
 800fe8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	68fa      	ldr	r2, [r7, #12]
 800fe92:	4313      	orrs	r3, r2
 800fe94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	f023 0302 	bic.w	r3, r3, #2
 800fe9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	697a      	ldr	r2, [r7, #20]
 800fea4:	4313      	orrs	r3, r2
 800fea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	4a20      	ldr	r2, [pc, #128]	; (800ff2c <TIM_OC1_SetConfig+0xd8>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d003      	beq.n	800feb8 <TIM_OC1_SetConfig+0x64>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	4a1f      	ldr	r2, [pc, #124]	; (800ff30 <TIM_OC1_SetConfig+0xdc>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d10c      	bne.n	800fed2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	f023 0308 	bic.w	r3, r3, #8
 800febe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	697a      	ldr	r2, [r7, #20]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	f023 0304 	bic.w	r3, r3, #4
 800fed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4a15      	ldr	r2, [pc, #84]	; (800ff2c <TIM_OC1_SetConfig+0xd8>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d003      	beq.n	800fee2 <TIM_OC1_SetConfig+0x8e>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4a14      	ldr	r2, [pc, #80]	; (800ff30 <TIM_OC1_SetConfig+0xdc>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d111      	bne.n	800ff06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	695b      	ldr	r3, [r3, #20]
 800fef6:	693a      	ldr	r2, [r7, #16]
 800fef8:	4313      	orrs	r3, r2
 800fefa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	699b      	ldr	r3, [r3, #24]
 800ff00:	693a      	ldr	r2, [r7, #16]
 800ff02:	4313      	orrs	r3, r2
 800ff04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	693a      	ldr	r2, [r7, #16]
 800ff0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	685a      	ldr	r2, [r3, #4]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	697a      	ldr	r2, [r7, #20]
 800ff1e:	621a      	str	r2, [r3, #32]
}
 800ff20:	bf00      	nop
 800ff22:	371c      	adds	r7, #28
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	40010000 	.word	0x40010000
 800ff30:	40010400 	.word	0x40010400

0800ff34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b087      	sub	sp, #28
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6a1b      	ldr	r3, [r3, #32]
 800ff42:	f023 0210 	bic.w	r2, r3, #16
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6a1b      	ldr	r3, [r3, #32]
 800ff4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	699b      	ldr	r3, [r3, #24]
 800ff5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	021b      	lsls	r3, r3, #8
 800ff72:	68fa      	ldr	r2, [r7, #12]
 800ff74:	4313      	orrs	r3, r2
 800ff76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	f023 0320 	bic.w	r3, r3, #32
 800ff7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	689b      	ldr	r3, [r3, #8]
 800ff84:	011b      	lsls	r3, r3, #4
 800ff86:	697a      	ldr	r2, [r7, #20]
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	4a22      	ldr	r2, [pc, #136]	; (8010018 <TIM_OC2_SetConfig+0xe4>)
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d003      	beq.n	800ff9c <TIM_OC2_SetConfig+0x68>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	4a21      	ldr	r2, [pc, #132]	; (801001c <TIM_OC2_SetConfig+0xe8>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d10d      	bne.n	800ffb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	011b      	lsls	r3, r3, #4
 800ffaa:	697a      	ldr	r2, [r7, #20]
 800ffac:	4313      	orrs	r3, r2
 800ffae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	4a17      	ldr	r2, [pc, #92]	; (8010018 <TIM_OC2_SetConfig+0xe4>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d003      	beq.n	800ffc8 <TIM_OC2_SetConfig+0x94>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4a16      	ldr	r2, [pc, #88]	; (801001c <TIM_OC2_SetConfig+0xe8>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d113      	bne.n	800fff0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ffce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ffd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	695b      	ldr	r3, [r3, #20]
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	693a      	ldr	r2, [r7, #16]
 800ffe0:	4313      	orrs	r3, r2
 800ffe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	699b      	ldr	r3, [r3, #24]
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	693a      	ldr	r2, [r7, #16]
 800ffec:	4313      	orrs	r3, r2
 800ffee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	685a      	ldr	r2, [r3, #4]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	697a      	ldr	r2, [r7, #20]
 8010008:	621a      	str	r2, [r3, #32]
}
 801000a:	bf00      	nop
 801000c:	371c      	adds	r7, #28
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	40010000 	.word	0x40010000
 801001c:	40010400 	.word	0x40010400

08010020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010020:	b480      	push	{r7}
 8010022:	b087      	sub	sp, #28
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6a1b      	ldr	r3, [r3, #32]
 801002e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a1b      	ldr	r3, [r3, #32]
 801003a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	69db      	ldr	r3, [r3, #28]
 8010046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801004e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	f023 0303 	bic.w	r3, r3, #3
 8010056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	4313      	orrs	r3, r2
 8010060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	689b      	ldr	r3, [r3, #8]
 801006e:	021b      	lsls	r3, r3, #8
 8010070:	697a      	ldr	r2, [r7, #20]
 8010072:	4313      	orrs	r3, r2
 8010074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4a21      	ldr	r2, [pc, #132]	; (8010100 <TIM_OC3_SetConfig+0xe0>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d003      	beq.n	8010086 <TIM_OC3_SetConfig+0x66>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4a20      	ldr	r2, [pc, #128]	; (8010104 <TIM_OC3_SetConfig+0xe4>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d10d      	bne.n	80100a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801008c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	021b      	lsls	r3, r3, #8
 8010094:	697a      	ldr	r2, [r7, #20]
 8010096:	4313      	orrs	r3, r2
 8010098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80100a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4a16      	ldr	r2, [pc, #88]	; (8010100 <TIM_OC3_SetConfig+0xe0>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d003      	beq.n	80100b2 <TIM_OC3_SetConfig+0x92>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4a15      	ldr	r2, [pc, #84]	; (8010104 <TIM_OC3_SetConfig+0xe4>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d113      	bne.n	80100da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80100c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	695b      	ldr	r3, [r3, #20]
 80100c6:	011b      	lsls	r3, r3, #4
 80100c8:	693a      	ldr	r2, [r7, #16]
 80100ca:	4313      	orrs	r3, r2
 80100cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	699b      	ldr	r3, [r3, #24]
 80100d2:	011b      	lsls	r3, r3, #4
 80100d4:	693a      	ldr	r2, [r7, #16]
 80100d6:	4313      	orrs	r3, r2
 80100d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	693a      	ldr	r2, [r7, #16]
 80100de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	685a      	ldr	r2, [r3, #4]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	697a      	ldr	r2, [r7, #20]
 80100f2:	621a      	str	r2, [r3, #32]
}
 80100f4:	bf00      	nop
 80100f6:	371c      	adds	r7, #28
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr
 8010100:	40010000 	.word	0x40010000
 8010104:	40010400 	.word	0x40010400

08010108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010108:	b480      	push	{r7}
 801010a:	b087      	sub	sp, #28
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a1b      	ldr	r3, [r3, #32]
 8010116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6a1b      	ldr	r3, [r3, #32]
 8010122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	69db      	ldr	r3, [r3, #28]
 801012e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801013e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	021b      	lsls	r3, r3, #8
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	4313      	orrs	r3, r2
 801014a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	689b      	ldr	r3, [r3, #8]
 8010158:	031b      	lsls	r3, r3, #12
 801015a:	693a      	ldr	r2, [r7, #16]
 801015c:	4313      	orrs	r3, r2
 801015e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	4a12      	ldr	r2, [pc, #72]	; (80101ac <TIM_OC4_SetConfig+0xa4>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d003      	beq.n	8010170 <TIM_OC4_SetConfig+0x68>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	4a11      	ldr	r2, [pc, #68]	; (80101b0 <TIM_OC4_SetConfig+0xa8>)
 801016c:	4293      	cmp	r3, r2
 801016e:	d109      	bne.n	8010184 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	695b      	ldr	r3, [r3, #20]
 801017c:	019b      	lsls	r3, r3, #6
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	4313      	orrs	r3, r2
 8010182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	697a      	ldr	r2, [r7, #20]
 8010188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	685a      	ldr	r2, [r3, #4]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	693a      	ldr	r2, [r7, #16]
 801019c:	621a      	str	r2, [r3, #32]
}
 801019e:	bf00      	nop
 80101a0:	371c      	adds	r7, #28
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop
 80101ac:	40010000 	.word	0x40010000
 80101b0:	40010400 	.word	0x40010400

080101b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b087      	sub	sp, #28
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	60f8      	str	r0, [r7, #12]
 80101bc:	60b9      	str	r1, [r7, #8]
 80101be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	6a1b      	ldr	r3, [r3, #32]
 80101c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6a1b      	ldr	r3, [r3, #32]
 80101ca:	f023 0201 	bic.w	r2, r3, #1
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	699b      	ldr	r3, [r3, #24]
 80101d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80101de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	011b      	lsls	r3, r3, #4
 80101e4:	693a      	ldr	r2, [r7, #16]
 80101e6:	4313      	orrs	r3, r2
 80101e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	f023 030a 	bic.w	r3, r3, #10
 80101f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80101f2:	697a      	ldr	r2, [r7, #20]
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	4313      	orrs	r3, r2
 80101f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	693a      	ldr	r2, [r7, #16]
 80101fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	697a      	ldr	r2, [r7, #20]
 8010204:	621a      	str	r2, [r3, #32]
}
 8010206:	bf00      	nop
 8010208:	371c      	adds	r7, #28
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr

08010212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010212:	b480      	push	{r7}
 8010214:	b087      	sub	sp, #28
 8010216:	af00      	add	r7, sp, #0
 8010218:	60f8      	str	r0, [r7, #12]
 801021a:	60b9      	str	r1, [r7, #8]
 801021c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	6a1b      	ldr	r3, [r3, #32]
 8010222:	f023 0210 	bic.w	r2, r3, #16
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	699b      	ldr	r3, [r3, #24]
 801022e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6a1b      	ldr	r3, [r3, #32]
 8010234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801023c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	031b      	lsls	r3, r3, #12
 8010242:	697a      	ldr	r2, [r7, #20]
 8010244:	4313      	orrs	r3, r2
 8010246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801024e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	011b      	lsls	r3, r3, #4
 8010254:	693a      	ldr	r2, [r7, #16]
 8010256:	4313      	orrs	r3, r2
 8010258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	697a      	ldr	r2, [r7, #20]
 801025e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	693a      	ldr	r2, [r7, #16]
 8010264:	621a      	str	r2, [r3, #32]
}
 8010266:	bf00      	nop
 8010268:	371c      	adds	r7, #28
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr

08010272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010272:	b480      	push	{r7}
 8010274:	b085      	sub	sp, #20
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	4313      	orrs	r3, r2
 8010290:	f043 0307 	orr.w	r3, r3, #7
 8010294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	609a      	str	r2, [r3, #8]
}
 801029c:	bf00      	nop
 801029e:	3714      	adds	r7, #20
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b087      	sub	sp, #28
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
 80102b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80102c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	021a      	lsls	r2, r3, #8
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	431a      	orrs	r2, r3
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	4313      	orrs	r3, r2
 80102d0:	697a      	ldr	r2, [r7, #20]
 80102d2:	4313      	orrs	r3, r2
 80102d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	697a      	ldr	r2, [r7, #20]
 80102da:	609a      	str	r2, [r3, #8]
}
 80102dc:	bf00      	nop
 80102de:	371c      	adds	r7, #28
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b087      	sub	sp, #28
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	f003 031f 	and.w	r3, r3, #31
 80102fa:	2201      	movs	r2, #1
 80102fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	6a1a      	ldr	r2, [r3, #32]
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	43db      	mvns	r3, r3
 801030a:	401a      	ands	r2, r3
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	6a1a      	ldr	r2, [r3, #32]
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	f003 031f 	and.w	r3, r3, #31
 801031a:	6879      	ldr	r1, [r7, #4]
 801031c:	fa01 f303 	lsl.w	r3, r1, r3
 8010320:	431a      	orrs	r2, r3
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	621a      	str	r2, [r3, #32]
}
 8010326:	bf00      	nop
 8010328:	371c      	adds	r7, #28
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
	...

08010334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010334:	b480      	push	{r7}
 8010336:	b085      	sub	sp, #20
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010344:	2b01      	cmp	r3, #1
 8010346:	d101      	bne.n	801034c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010348:	2302      	movs	r3, #2
 801034a:	e05a      	b.n	8010402 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2201      	movs	r2, #1
 8010350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2202      	movs	r2, #2
 8010358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	689b      	ldr	r3, [r3, #8]
 801036a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	68fa      	ldr	r2, [r7, #12]
 801037a:	4313      	orrs	r3, r2
 801037c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	68fa      	ldr	r2, [r7, #12]
 8010384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	4a21      	ldr	r2, [pc, #132]	; (8010410 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d022      	beq.n	80103d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010398:	d01d      	beq.n	80103d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4a1d      	ldr	r2, [pc, #116]	; (8010414 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d018      	beq.n	80103d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4a1b      	ldr	r2, [pc, #108]	; (8010418 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d013      	beq.n	80103d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4a1a      	ldr	r2, [pc, #104]	; (801041c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d00e      	beq.n	80103d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4a18      	ldr	r2, [pc, #96]	; (8010420 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d009      	beq.n	80103d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4a17      	ldr	r2, [pc, #92]	; (8010424 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80103c8:	4293      	cmp	r3, r2
 80103ca:	d004      	beq.n	80103d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4a15      	ldr	r2, [pc, #84]	; (8010428 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80103d2:	4293      	cmp	r3, r2
 80103d4:	d10c      	bne.n	80103f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	68ba      	ldr	r2, [r7, #8]
 80103e4:	4313      	orrs	r3, r2
 80103e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	68ba      	ldr	r2, [r7, #8]
 80103ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2201      	movs	r2, #1
 80103f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010400:	2300      	movs	r3, #0
}
 8010402:	4618      	mov	r0, r3
 8010404:	3714      	adds	r7, #20
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop
 8010410:	40010000 	.word	0x40010000
 8010414:	40000400 	.word	0x40000400
 8010418:	40000800 	.word	0x40000800
 801041c:	40000c00 	.word	0x40000c00
 8010420:	40010400 	.word	0x40010400
 8010424:	40014000 	.word	0x40014000
 8010428:	40001800 	.word	0x40001800

0801042c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801042c:	b480      	push	{r7}
 801042e:	b085      	sub	sp, #20
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010436:	2300      	movs	r3, #0
 8010438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010440:	2b01      	cmp	r3, #1
 8010442:	d101      	bne.n	8010448 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010444:	2302      	movs	r3, #2
 8010446:	e03d      	b.n	80104c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2201      	movs	r2, #1
 801044c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	68db      	ldr	r3, [r3, #12]
 801045a:	4313      	orrs	r3, r2
 801045c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	689b      	ldr	r3, [r3, #8]
 8010468:	4313      	orrs	r3, r2
 801046a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	4313      	orrs	r3, r2
 8010478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4313      	orrs	r3, r2
 8010486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	4313      	orrs	r3, r2
 8010494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	695b      	ldr	r3, [r3, #20]
 80104a0:	4313      	orrs	r3, r2
 80104a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	69db      	ldr	r3, [r3, #28]
 80104ae:	4313      	orrs	r3, r2
 80104b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2200      	movs	r2, #0
 80104be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80104c2:	2300      	movs	r3, #0
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3714      	adds	r7, #20
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d101      	bne.n	80104e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80104de:	2301      	movs	r3, #1
 80104e0:	e03f      	b.n	8010562 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d106      	bne.n	80104fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2200      	movs	r2, #0
 80104f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f000 f837 	bl	801056a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2224      	movs	r2, #36	; 0x24
 8010500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	68da      	ldr	r2, [r3, #12]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f000 fc37 	bl	8010d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	691a      	ldr	r2, [r3, #16]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	695a      	ldr	r2, [r3, #20]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	68da      	ldr	r2, [r3, #12]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2220      	movs	r2, #32
 8010554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2220      	movs	r2, #32
 801055c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010560:	2300      	movs	r3, #0
}
 8010562:	4618      	mov	r0, r3
 8010564:	3708      	adds	r7, #8
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 801056a:	b480      	push	{r7}
 801056c:	b083      	sub	sp, #12
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8010572:	bf00      	nop
 8010574:	370c      	adds	r7, #12
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr
	...

08010580 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b086      	sub	sp, #24
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	4613      	mov	r3, r2
 801058c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010594:	b2db      	uxtb	r3, r3
 8010596:	2b20      	cmp	r3, #32
 8010598:	d153      	bne.n	8010642 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d002      	beq.n	80105a6 <HAL_UART_Transmit_DMA+0x26>
 80105a0:	88fb      	ldrh	r3, [r7, #6]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d101      	bne.n	80105aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80105a6:	2301      	movs	r3, #1
 80105a8:	e04c      	b.n	8010644 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d101      	bne.n	80105b8 <HAL_UART_Transmit_DMA+0x38>
 80105b4:	2302      	movs	r3, #2
 80105b6:	e045      	b.n	8010644 <HAL_UART_Transmit_DMA+0xc4>
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	2201      	movs	r2, #1
 80105bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80105c0:	68ba      	ldr	r2, [r7, #8]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	88fa      	ldrh	r2, [r7, #6]
 80105ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	88fa      	ldrh	r2, [r7, #6]
 80105d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2200      	movs	r2, #0
 80105d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2221      	movs	r2, #33	; 0x21
 80105dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105e4:	4a19      	ldr	r2, [pc, #100]	; (801064c <HAL_UART_Transmit_DMA+0xcc>)
 80105e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ec:	4a18      	ldr	r2, [pc, #96]	; (8010650 <HAL_UART_Transmit_DMA+0xd0>)
 80105ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f4:	4a17      	ldr	r2, [pc, #92]	; (8010654 <HAL_UART_Transmit_DMA+0xd4>)
 80105f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105fc:	2200      	movs	r2, #0
 80105fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8010600:	f107 0308 	add.w	r3, r7, #8
 8010604:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	6819      	ldr	r1, [r3, #0]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3304      	adds	r3, #4
 8010614:	461a      	mov	r2, r3
 8010616:	88fb      	ldrh	r3, [r7, #6]
 8010618:	f7fc fe6a 	bl	800d2f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010624:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2200      	movs	r2, #0
 801062a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	695a      	ldr	r2, [r3, #20]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801063c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 801063e:	2300      	movs	r3, #0
 8010640:	e000      	b.n	8010644 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8010642:	2302      	movs	r3, #2
  }
}
 8010644:	4618      	mov	r0, r3
 8010646:	3718      	adds	r7, #24
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	08010995 	.word	0x08010995
 8010650:	080109e7 	.word	0x080109e7
 8010654:	08010a87 	.word	0x08010a87

08010658 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b086      	sub	sp, #24
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	4613      	mov	r3, r2
 8010664:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801066c:	b2db      	uxtb	r3, r3
 801066e:	2b20      	cmp	r3, #32
 8010670:	d166      	bne.n	8010740 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d002      	beq.n	801067e <HAL_UART_Receive_DMA+0x26>
 8010678:	88fb      	ldrh	r3, [r7, #6]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d101      	bne.n	8010682 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801067e:	2301      	movs	r3, #1
 8010680:	e05f      	b.n	8010742 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010688:	2b01      	cmp	r3, #1
 801068a:	d101      	bne.n	8010690 <HAL_UART_Receive_DMA+0x38>
 801068c:	2302      	movs	r3, #2
 801068e:	e058      	b.n	8010742 <HAL_UART_Receive_DMA+0xea>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	2201      	movs	r2, #1
 8010694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8010698:	68ba      	ldr	r2, [r7, #8]
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	88fa      	ldrh	r2, [r7, #6]
 80106a2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2200      	movs	r2, #0
 80106a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	2222      	movs	r2, #34	; 0x22
 80106ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106b6:	4a25      	ldr	r2, [pc, #148]	; (801074c <HAL_UART_Receive_DMA+0xf4>)
 80106b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106be:	4a24      	ldr	r2, [pc, #144]	; (8010750 <HAL_UART_Receive_DMA+0xf8>)
 80106c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106c6:	4a23      	ldr	r2, [pc, #140]	; (8010754 <HAL_UART_Receive_DMA+0xfc>)
 80106c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ce:	2200      	movs	r2, #0
 80106d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80106d2:	f107 0308 	add.w	r3, r7, #8
 80106d6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	3304      	adds	r3, #4
 80106e2:	4619      	mov	r1, r3
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	681a      	ldr	r2, [r3, #0]
 80106e8:	88fb      	ldrh	r3, [r7, #6]
 80106ea:	f7fc fe01 	bl	800d2f0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80106ee:	2300      	movs	r3, #0
 80106f0:	613b      	str	r3, [r7, #16]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	613b      	str	r3, [r7, #16]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	613b      	str	r3, [r7, #16]
 8010702:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2200      	movs	r2, #0
 8010708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	68da      	ldr	r2, [r3, #12]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801071a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	695a      	ldr	r2, [r3, #20]
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f042 0201 	orr.w	r2, r2, #1
 801072a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	695a      	ldr	r2, [r3, #20]
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801073a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 801073c:	2300      	movs	r3, #0
 801073e:	e000      	b.n	8010742 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010740:	2302      	movs	r3, #2
  }
}
 8010742:	4618      	mov	r0, r3
 8010744:	3718      	adds	r7, #24
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	08010a03 	.word	0x08010a03
 8010750:	08010a6b 	.word	0x08010a6b
 8010754:	08010a87 	.word	0x08010a87

08010758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b088      	sub	sp, #32
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	68db      	ldr	r3, [r3, #12]
 801076e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	695b      	ldr	r3, [r3, #20]
 8010776:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010778:	2300      	movs	r3, #0
 801077a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 801077c:	2300      	movs	r3, #0
 801077e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010780:	69fb      	ldr	r3, [r7, #28]
 8010782:	f003 030f 	and.w	r3, r3, #15
 8010786:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d10d      	bne.n	80107aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	f003 0320 	and.w	r3, r3, #32
 8010794:	2b00      	cmp	r3, #0
 8010796:	d008      	beq.n	80107aa <HAL_UART_IRQHandler+0x52>
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	f003 0320 	and.w	r3, r3, #32
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d003      	beq.n	80107aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 fa6f 	bl	8010c86 <UART_Receive_IT>
      return;
 80107a8:	e0d1      	b.n	801094e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f000 80b0 	beq.w	8010912 <HAL_UART_IRQHandler+0x1ba>
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	f003 0301 	and.w	r3, r3, #1
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d105      	bne.n	80107c8 <HAL_UART_IRQHandler+0x70>
 80107bc:	69bb      	ldr	r3, [r7, #24]
 80107be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	f000 80a5 	beq.w	8010912 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	f003 0301 	and.w	r3, r3, #1
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d00a      	beq.n	80107e8 <HAL_UART_IRQHandler+0x90>
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d005      	beq.n	80107e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107e0:	f043 0201 	orr.w	r2, r3, #1
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	f003 0304 	and.w	r3, r3, #4
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d00a      	beq.n	8010808 <HAL_UART_IRQHandler+0xb0>
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	f003 0301 	and.w	r3, r3, #1
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d005      	beq.n	8010808 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010800:	f043 0202 	orr.w	r2, r3, #2
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010808:	69fb      	ldr	r3, [r7, #28]
 801080a:	f003 0302 	and.w	r3, r3, #2
 801080e:	2b00      	cmp	r3, #0
 8010810:	d00a      	beq.n	8010828 <HAL_UART_IRQHandler+0xd0>
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	f003 0301 	and.w	r3, r3, #1
 8010818:	2b00      	cmp	r3, #0
 801081a:	d005      	beq.n	8010828 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010820:	f043 0204 	orr.w	r2, r3, #4
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	f003 0308 	and.w	r3, r3, #8
 801082e:	2b00      	cmp	r3, #0
 8010830:	d00f      	beq.n	8010852 <HAL_UART_IRQHandler+0xfa>
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	f003 0320 	and.w	r3, r3, #32
 8010838:	2b00      	cmp	r3, #0
 801083a:	d104      	bne.n	8010846 <HAL_UART_IRQHandler+0xee>
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	f003 0301 	and.w	r3, r3, #1
 8010842:	2b00      	cmp	r3, #0
 8010844:	d005      	beq.n	8010852 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801084a:	f043 0208 	orr.w	r2, r3, #8
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010856:	2b00      	cmp	r3, #0
 8010858:	d078      	beq.n	801094c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801085a:	69fb      	ldr	r3, [r7, #28]
 801085c:	f003 0320 	and.w	r3, r3, #32
 8010860:	2b00      	cmp	r3, #0
 8010862:	d007      	beq.n	8010874 <HAL_UART_IRQHandler+0x11c>
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	f003 0320 	and.w	r3, r3, #32
 801086a:	2b00      	cmp	r3, #0
 801086c:	d002      	beq.n	8010874 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 fa09 	bl	8010c86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	695b      	ldr	r3, [r3, #20]
 801087a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801087e:	2b40      	cmp	r3, #64	; 0x40
 8010880:	bf0c      	ite	eq
 8010882:	2301      	moveq	r3, #1
 8010884:	2300      	movne	r3, #0
 8010886:	b2db      	uxtb	r3, r3
 8010888:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801088e:	f003 0308 	and.w	r3, r3, #8
 8010892:	2b00      	cmp	r3, #0
 8010894:	d102      	bne.n	801089c <HAL_UART_IRQHandler+0x144>
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d031      	beq.n	8010900 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f000 f952 	bl	8010b46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	695b      	ldr	r3, [r3, #20]
 80108a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108ac:	2b40      	cmp	r3, #64	; 0x40
 80108ae:	d123      	bne.n	80108f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	695a      	ldr	r2, [r3, #20]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d013      	beq.n	80108f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108cc:	4a21      	ldr	r2, [pc, #132]	; (8010954 <HAL_UART_IRQHandler+0x1fc>)
 80108ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7fc fd63 	bl	800d3a0 <HAL_DMA_Abort_IT>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d016      	beq.n	801090e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80108ea:	4610      	mov	r0, r2
 80108ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108ee:	e00e      	b.n	801090e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f000 f845 	bl	8010980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108f6:	e00a      	b.n	801090e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f000 f841 	bl	8010980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108fe:	e006      	b.n	801090e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f000 f83d 	bl	8010980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2200      	movs	r2, #0
 801090a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 801090c:	e01e      	b.n	801094c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801090e:	bf00      	nop
    return;
 8010910:	e01c      	b.n	801094c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010918:	2b00      	cmp	r3, #0
 801091a:	d008      	beq.n	801092e <HAL_UART_IRQHandler+0x1d6>
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010922:	2b00      	cmp	r3, #0
 8010924:	d003      	beq.n	801092e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 f93f 	bl	8010baa <UART_Transmit_IT>
    return;
 801092c:	e00f      	b.n	801094e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801092e:	69fb      	ldr	r3, [r7, #28]
 8010930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010934:	2b00      	cmp	r3, #0
 8010936:	d00a      	beq.n	801094e <HAL_UART_IRQHandler+0x1f6>
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801093e:	2b00      	cmp	r3, #0
 8010940:	d005      	beq.n	801094e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f000 f987 	bl	8010c56 <UART_EndTransmit_IT>
    return;
 8010948:	bf00      	nop
 801094a:	e000      	b.n	801094e <HAL_UART_IRQHandler+0x1f6>
    return;
 801094c:	bf00      	nop
  }
}
 801094e:	3720      	adds	r7, #32
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	08010b83 	.word	0x08010b83

08010958 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010960:	bf00      	nop
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801096c:	b480      	push	{r7}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010974:	bf00      	nop
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010988:	bf00      	nop
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109a0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d113      	bne.n	80109d8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2200      	movs	r2, #0
 80109b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	695a      	ldr	r2, [r3, #20]
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109c4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	68da      	ldr	r2, [r3, #12]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80109d4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80109d6:	e002      	b.n	80109de <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f7f1 fd45 	bl	8002468 <HAL_UART_TxCpltCallback>
}
 80109de:	bf00      	nop
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b084      	sub	sp, #16
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80109f4:	68f8      	ldr	r0, [r7, #12]
 80109f6:	f7ff ffaf 	bl	8010958 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109fa:	bf00      	nop
 80109fc:	3710      	adds	r7, #16
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}

08010a02 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010a02:	b580      	push	{r7, lr}
 8010a04:	b084      	sub	sp, #16
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a0e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d11e      	bne.n	8010a5c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2200      	movs	r2, #0
 8010a22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	68da      	ldr	r2, [r3, #12]
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010a32:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	695a      	ldr	r2, [r3, #20]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f022 0201 	bic.w	r2, r2, #1
 8010a42:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	695a      	ldr	r2, [r3, #20]
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a52:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2220      	movs	r2, #32
 8010a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010a5c:	68f8      	ldr	r0, [r7, #12]
 8010a5e:	f7f1 fd1f 	bl	80024a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a62:	bf00      	nop
 8010a64:	3710      	adds	r7, #16
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b084      	sub	sp, #16
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010a78:	68f8      	ldr	r0, [r7, #12]
 8010a7a:	f7ff ff77 	bl	801096c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a7e:	bf00      	nop
 8010a80:	3710      	adds	r7, #16
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b084      	sub	sp, #16
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	695b      	ldr	r3, [r3, #20]
 8010a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010aa2:	2b80      	cmp	r3, #128	; 0x80
 8010aa4:	bf0c      	ite	eq
 8010aa6:	2301      	moveq	r3, #1
 8010aa8:	2300      	movne	r3, #0
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b21      	cmp	r3, #33	; 0x21
 8010ab8:	d108      	bne.n	8010acc <UART_DMAError+0x46>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d005      	beq.n	8010acc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010ac6:	68b8      	ldr	r0, [r7, #8]
 8010ac8:	f000 f827 	bl	8010b1a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	695b      	ldr	r3, [r3, #20]
 8010ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ad6:	2b40      	cmp	r3, #64	; 0x40
 8010ad8:	bf0c      	ite	eq
 8010ada:	2301      	moveq	r3, #1
 8010adc:	2300      	movne	r3, #0
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	2b22      	cmp	r3, #34	; 0x22
 8010aec:	d108      	bne.n	8010b00 <UART_DMAError+0x7a>
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d005      	beq.n	8010b00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	2200      	movs	r2, #0
 8010af8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010afa:	68b8      	ldr	r0, [r7, #8]
 8010afc:	f000 f823 	bl	8010b46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b04:	f043 0210 	orr.w	r2, r3, #16
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b0c:	68b8      	ldr	r0, [r7, #8]
 8010b0e:	f7ff ff37 	bl	8010980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b12:	bf00      	nop
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010b1a:	b480      	push	{r7}
 8010b1c:	b083      	sub	sp, #12
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	68da      	ldr	r2, [r3, #12]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010b30:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2220      	movs	r2, #32
 8010b36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8010b3a:	bf00      	nop
 8010b3c:	370c      	adds	r7, #12
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr

08010b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b46:	b480      	push	{r7}
 8010b48:	b083      	sub	sp, #12
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	68da      	ldr	r2, [r3, #12]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	695a      	ldr	r2, [r3, #20]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f022 0201 	bic.w	r2, r2, #1
 8010b6c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2220      	movs	r2, #32
 8010b72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010b76:	bf00      	nop
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b82:	b580      	push	{r7, lr}
 8010b84:	b084      	sub	sp, #16
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2200      	movs	r2, #0
 8010b94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f7ff feef 	bl	8010980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ba2:	bf00      	nop
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010baa:	b480      	push	{r7}
 8010bac:	b085      	sub	sp, #20
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b21      	cmp	r3, #33	; 0x21
 8010bbc:	d144      	bne.n	8010c48 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	689b      	ldr	r3, [r3, #8]
 8010bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bc6:	d11a      	bne.n	8010bfe <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6a1b      	ldr	r3, [r3, #32]
 8010bcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	881b      	ldrh	r3, [r3, #0]
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010bdc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	691b      	ldr	r3, [r3, #16]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d105      	bne.n	8010bf2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6a1b      	ldr	r3, [r3, #32]
 8010bea:	1c9a      	adds	r2, r3, #2
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	621a      	str	r2, [r3, #32]
 8010bf0:	e00e      	b.n	8010c10 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6a1b      	ldr	r3, [r3, #32]
 8010bf6:	1c5a      	adds	r2, r3, #1
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	621a      	str	r2, [r3, #32]
 8010bfc:	e008      	b.n	8010c10 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6a1b      	ldr	r3, [r3, #32]
 8010c02:	1c59      	adds	r1, r3, #1
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	6211      	str	r1, [r2, #32]
 8010c08:	781a      	ldrb	r2, [r3, #0]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	3b01      	subs	r3, #1
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d10f      	bne.n	8010c44 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	68da      	ldr	r2, [r3, #12]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010c32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68da      	ldr	r2, [r3, #12]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010c44:	2300      	movs	r3, #0
 8010c46:	e000      	b.n	8010c4a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010c48:	2302      	movs	r3, #2
  }
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3714      	adds	r7, #20
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr

08010c56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b082      	sub	sp, #8
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68da      	ldr	r2, [r3, #12]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2220      	movs	r2, #32
 8010c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7f1 fbf6 	bl	8002468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010c7c:	2300      	movs	r3, #0
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3708      	adds	r7, #8
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b084      	sub	sp, #16
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010c94:	b2db      	uxtb	r3, r3
 8010c96:	2b22      	cmp	r3, #34	; 0x22
 8010c98:	d171      	bne.n	8010d7e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	689b      	ldr	r3, [r3, #8]
 8010c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ca2:	d123      	bne.n	8010cec <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ca8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	691b      	ldr	r3, [r3, #16]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d10e      	bne.n	8010cd0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	b29b      	uxth	r3, r3
 8010cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cbe:	b29a      	uxth	r2, r3
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cc8:	1c9a      	adds	r2, r3, #2
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	629a      	str	r2, [r3, #40]	; 0x28
 8010cce:	e029      	b.n	8010d24 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ce4:	1c5a      	adds	r2, r3, #1
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	629a      	str	r2, [r3, #40]	; 0x28
 8010cea:	e01b      	b.n	8010d24 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	691b      	ldr	r3, [r3, #16]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d10a      	bne.n	8010d0a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	6858      	ldr	r0, [r3, #4]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cfe:	1c59      	adds	r1, r3, #1
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	6291      	str	r1, [r2, #40]	; 0x28
 8010d04:	b2c2      	uxtb	r2, r0
 8010d06:	701a      	strb	r2, [r3, #0]
 8010d08:	e00c      	b.n	8010d24 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d16:	1c58      	adds	r0, r3, #1
 8010d18:	6879      	ldr	r1, [r7, #4]
 8010d1a:	6288      	str	r0, [r1, #40]	; 0x28
 8010d1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010d20:	b2d2      	uxtb	r2, r2
 8010d22:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	687a      	ldr	r2, [r7, #4]
 8010d30:	4619      	mov	r1, r3
 8010d32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d120      	bne.n	8010d7a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	68da      	ldr	r2, [r3, #12]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	f022 0220 	bic.w	r2, r2, #32
 8010d46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	68da      	ldr	r2, [r3, #12]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010d56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	695a      	ldr	r2, [r3, #20]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f022 0201 	bic.w	r2, r2, #1
 8010d66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2220      	movs	r2, #32
 8010d6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7f1 fb95 	bl	80024a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010d76:	2300      	movs	r3, #0
 8010d78:	e002      	b.n	8010d80 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	e000      	b.n	8010d80 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8010d7e:	2302      	movs	r3, #2
  }
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3710      	adds	r7, #16
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8c:	b085      	sub	sp, #20
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	691b      	ldr	r3, [r3, #16]
 8010d98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	68da      	ldr	r2, [r3, #12]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	430a      	orrs	r2, r1
 8010da6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	689a      	ldr	r2, [r3, #8]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	691b      	ldr	r3, [r3, #16]
 8010db0:	431a      	orrs	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	695b      	ldr	r3, [r3, #20]
 8010db6:	431a      	orrs	r2, r3
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	69db      	ldr	r3, [r3, #28]
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8010dca:	f023 030c 	bic.w	r3, r3, #12
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	6812      	ldr	r2, [r2, #0]
 8010dd2:	68f9      	ldr	r1, [r7, #12]
 8010dd4:	430b      	orrs	r3, r1
 8010dd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	695b      	ldr	r3, [r3, #20]
 8010dde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	699a      	ldr	r2, [r3, #24]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	430a      	orrs	r2, r1
 8010dec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	69db      	ldr	r3, [r3, #28]
 8010df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010df6:	f040 818b 	bne.w	8011110 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	4ac1      	ldr	r2, [pc, #772]	; (8011104 <UART_SetConfig+0x37c>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d005      	beq.n	8010e10 <UART_SetConfig+0x88>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	4abf      	ldr	r2, [pc, #764]	; (8011108 <UART_SetConfig+0x380>)
 8010e0a:	4293      	cmp	r3, r2
 8010e0c:	f040 80bd 	bne.w	8010f8a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010e10:	f7fe fc2e 	bl	800f670 <HAL_RCC_GetPCLK2Freq>
 8010e14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	461d      	mov	r5, r3
 8010e1a:	f04f 0600 	mov.w	r6, #0
 8010e1e:	46a8      	mov	r8, r5
 8010e20:	46b1      	mov	r9, r6
 8010e22:	eb18 0308 	adds.w	r3, r8, r8
 8010e26:	eb49 0409 	adc.w	r4, r9, r9
 8010e2a:	4698      	mov	r8, r3
 8010e2c:	46a1      	mov	r9, r4
 8010e2e:	eb18 0805 	adds.w	r8, r8, r5
 8010e32:	eb49 0906 	adc.w	r9, r9, r6
 8010e36:	f04f 0100 	mov.w	r1, #0
 8010e3a:	f04f 0200 	mov.w	r2, #0
 8010e3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010e42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010e46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010e4a:	4688      	mov	r8, r1
 8010e4c:	4691      	mov	r9, r2
 8010e4e:	eb18 0005 	adds.w	r0, r8, r5
 8010e52:	eb49 0106 	adc.w	r1, r9, r6
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	461d      	mov	r5, r3
 8010e5c:	f04f 0600 	mov.w	r6, #0
 8010e60:	196b      	adds	r3, r5, r5
 8010e62:	eb46 0406 	adc.w	r4, r6, r6
 8010e66:	461a      	mov	r2, r3
 8010e68:	4623      	mov	r3, r4
 8010e6a:	f7ef feed 	bl	8000c48 <__aeabi_uldivmod>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	460c      	mov	r4, r1
 8010e72:	461a      	mov	r2, r3
 8010e74:	4ba5      	ldr	r3, [pc, #660]	; (801110c <UART_SetConfig+0x384>)
 8010e76:	fba3 2302 	umull	r2, r3, r3, r2
 8010e7a:	095b      	lsrs	r3, r3, #5
 8010e7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	461d      	mov	r5, r3
 8010e84:	f04f 0600 	mov.w	r6, #0
 8010e88:	46a9      	mov	r9, r5
 8010e8a:	46b2      	mov	sl, r6
 8010e8c:	eb19 0309 	adds.w	r3, r9, r9
 8010e90:	eb4a 040a 	adc.w	r4, sl, sl
 8010e94:	4699      	mov	r9, r3
 8010e96:	46a2      	mov	sl, r4
 8010e98:	eb19 0905 	adds.w	r9, r9, r5
 8010e9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8010ea0:	f04f 0100 	mov.w	r1, #0
 8010ea4:	f04f 0200 	mov.w	r2, #0
 8010ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010eac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010eb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010eb4:	4689      	mov	r9, r1
 8010eb6:	4692      	mov	sl, r2
 8010eb8:	eb19 0005 	adds.w	r0, r9, r5
 8010ebc:	eb4a 0106 	adc.w	r1, sl, r6
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	685b      	ldr	r3, [r3, #4]
 8010ec4:	461d      	mov	r5, r3
 8010ec6:	f04f 0600 	mov.w	r6, #0
 8010eca:	196b      	adds	r3, r5, r5
 8010ecc:	eb46 0406 	adc.w	r4, r6, r6
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	4623      	mov	r3, r4
 8010ed4:	f7ef feb8 	bl	8000c48 <__aeabi_uldivmod>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	460c      	mov	r4, r1
 8010edc:	461a      	mov	r2, r3
 8010ede:	4b8b      	ldr	r3, [pc, #556]	; (801110c <UART_SetConfig+0x384>)
 8010ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8010ee4:	095b      	lsrs	r3, r3, #5
 8010ee6:	2164      	movs	r1, #100	; 0x64
 8010ee8:	fb01 f303 	mul.w	r3, r1, r3
 8010eec:	1ad3      	subs	r3, r2, r3
 8010eee:	00db      	lsls	r3, r3, #3
 8010ef0:	3332      	adds	r3, #50	; 0x32
 8010ef2:	4a86      	ldr	r2, [pc, #536]	; (801110c <UART_SetConfig+0x384>)
 8010ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8010ef8:	095b      	lsrs	r3, r3, #5
 8010efa:	005b      	lsls	r3, r3, #1
 8010efc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010f00:	4498      	add	r8, r3
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	461d      	mov	r5, r3
 8010f06:	f04f 0600 	mov.w	r6, #0
 8010f0a:	46a9      	mov	r9, r5
 8010f0c:	46b2      	mov	sl, r6
 8010f0e:	eb19 0309 	adds.w	r3, r9, r9
 8010f12:	eb4a 040a 	adc.w	r4, sl, sl
 8010f16:	4699      	mov	r9, r3
 8010f18:	46a2      	mov	sl, r4
 8010f1a:	eb19 0905 	adds.w	r9, r9, r5
 8010f1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010f22:	f04f 0100 	mov.w	r1, #0
 8010f26:	f04f 0200 	mov.w	r2, #0
 8010f2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010f2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010f32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010f36:	4689      	mov	r9, r1
 8010f38:	4692      	mov	sl, r2
 8010f3a:	eb19 0005 	adds.w	r0, r9, r5
 8010f3e:	eb4a 0106 	adc.w	r1, sl, r6
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	461d      	mov	r5, r3
 8010f48:	f04f 0600 	mov.w	r6, #0
 8010f4c:	196b      	adds	r3, r5, r5
 8010f4e:	eb46 0406 	adc.w	r4, r6, r6
 8010f52:	461a      	mov	r2, r3
 8010f54:	4623      	mov	r3, r4
 8010f56:	f7ef fe77 	bl	8000c48 <__aeabi_uldivmod>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	460c      	mov	r4, r1
 8010f5e:	461a      	mov	r2, r3
 8010f60:	4b6a      	ldr	r3, [pc, #424]	; (801110c <UART_SetConfig+0x384>)
 8010f62:	fba3 1302 	umull	r1, r3, r3, r2
 8010f66:	095b      	lsrs	r3, r3, #5
 8010f68:	2164      	movs	r1, #100	; 0x64
 8010f6a:	fb01 f303 	mul.w	r3, r1, r3
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	00db      	lsls	r3, r3, #3
 8010f72:	3332      	adds	r3, #50	; 0x32
 8010f74:	4a65      	ldr	r2, [pc, #404]	; (801110c <UART_SetConfig+0x384>)
 8010f76:	fba2 2303 	umull	r2, r3, r2, r3
 8010f7a:	095b      	lsrs	r3, r3, #5
 8010f7c:	f003 0207 	and.w	r2, r3, #7
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	4442      	add	r2, r8
 8010f86:	609a      	str	r2, [r3, #8]
 8010f88:	e26f      	b.n	801146a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010f8a:	f7fe fb5d 	bl	800f648 <HAL_RCC_GetPCLK1Freq>
 8010f8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	461d      	mov	r5, r3
 8010f94:	f04f 0600 	mov.w	r6, #0
 8010f98:	46a8      	mov	r8, r5
 8010f9a:	46b1      	mov	r9, r6
 8010f9c:	eb18 0308 	adds.w	r3, r8, r8
 8010fa0:	eb49 0409 	adc.w	r4, r9, r9
 8010fa4:	4698      	mov	r8, r3
 8010fa6:	46a1      	mov	r9, r4
 8010fa8:	eb18 0805 	adds.w	r8, r8, r5
 8010fac:	eb49 0906 	adc.w	r9, r9, r6
 8010fb0:	f04f 0100 	mov.w	r1, #0
 8010fb4:	f04f 0200 	mov.w	r2, #0
 8010fb8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010fbc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010fc0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010fc4:	4688      	mov	r8, r1
 8010fc6:	4691      	mov	r9, r2
 8010fc8:	eb18 0005 	adds.w	r0, r8, r5
 8010fcc:	eb49 0106 	adc.w	r1, r9, r6
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	461d      	mov	r5, r3
 8010fd6:	f04f 0600 	mov.w	r6, #0
 8010fda:	196b      	adds	r3, r5, r5
 8010fdc:	eb46 0406 	adc.w	r4, r6, r6
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	4623      	mov	r3, r4
 8010fe4:	f7ef fe30 	bl	8000c48 <__aeabi_uldivmod>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	460c      	mov	r4, r1
 8010fec:	461a      	mov	r2, r3
 8010fee:	4b47      	ldr	r3, [pc, #284]	; (801110c <UART_SetConfig+0x384>)
 8010ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8010ff4:	095b      	lsrs	r3, r3, #5
 8010ff6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	461d      	mov	r5, r3
 8010ffe:	f04f 0600 	mov.w	r6, #0
 8011002:	46a9      	mov	r9, r5
 8011004:	46b2      	mov	sl, r6
 8011006:	eb19 0309 	adds.w	r3, r9, r9
 801100a:	eb4a 040a 	adc.w	r4, sl, sl
 801100e:	4699      	mov	r9, r3
 8011010:	46a2      	mov	sl, r4
 8011012:	eb19 0905 	adds.w	r9, r9, r5
 8011016:	eb4a 0a06 	adc.w	sl, sl, r6
 801101a:	f04f 0100 	mov.w	r1, #0
 801101e:	f04f 0200 	mov.w	r2, #0
 8011022:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011026:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801102a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801102e:	4689      	mov	r9, r1
 8011030:	4692      	mov	sl, r2
 8011032:	eb19 0005 	adds.w	r0, r9, r5
 8011036:	eb4a 0106 	adc.w	r1, sl, r6
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	461d      	mov	r5, r3
 8011040:	f04f 0600 	mov.w	r6, #0
 8011044:	196b      	adds	r3, r5, r5
 8011046:	eb46 0406 	adc.w	r4, r6, r6
 801104a:	461a      	mov	r2, r3
 801104c:	4623      	mov	r3, r4
 801104e:	f7ef fdfb 	bl	8000c48 <__aeabi_uldivmod>
 8011052:	4603      	mov	r3, r0
 8011054:	460c      	mov	r4, r1
 8011056:	461a      	mov	r2, r3
 8011058:	4b2c      	ldr	r3, [pc, #176]	; (801110c <UART_SetConfig+0x384>)
 801105a:	fba3 1302 	umull	r1, r3, r3, r2
 801105e:	095b      	lsrs	r3, r3, #5
 8011060:	2164      	movs	r1, #100	; 0x64
 8011062:	fb01 f303 	mul.w	r3, r1, r3
 8011066:	1ad3      	subs	r3, r2, r3
 8011068:	00db      	lsls	r3, r3, #3
 801106a:	3332      	adds	r3, #50	; 0x32
 801106c:	4a27      	ldr	r2, [pc, #156]	; (801110c <UART_SetConfig+0x384>)
 801106e:	fba2 2303 	umull	r2, r3, r2, r3
 8011072:	095b      	lsrs	r3, r3, #5
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801107a:	4498      	add	r8, r3
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	461d      	mov	r5, r3
 8011080:	f04f 0600 	mov.w	r6, #0
 8011084:	46a9      	mov	r9, r5
 8011086:	46b2      	mov	sl, r6
 8011088:	eb19 0309 	adds.w	r3, r9, r9
 801108c:	eb4a 040a 	adc.w	r4, sl, sl
 8011090:	4699      	mov	r9, r3
 8011092:	46a2      	mov	sl, r4
 8011094:	eb19 0905 	adds.w	r9, r9, r5
 8011098:	eb4a 0a06 	adc.w	sl, sl, r6
 801109c:	f04f 0100 	mov.w	r1, #0
 80110a0:	f04f 0200 	mov.w	r2, #0
 80110a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80110a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80110ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80110b0:	4689      	mov	r9, r1
 80110b2:	4692      	mov	sl, r2
 80110b4:	eb19 0005 	adds.w	r0, r9, r5
 80110b8:	eb4a 0106 	adc.w	r1, sl, r6
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	461d      	mov	r5, r3
 80110c2:	f04f 0600 	mov.w	r6, #0
 80110c6:	196b      	adds	r3, r5, r5
 80110c8:	eb46 0406 	adc.w	r4, r6, r6
 80110cc:	461a      	mov	r2, r3
 80110ce:	4623      	mov	r3, r4
 80110d0:	f7ef fdba 	bl	8000c48 <__aeabi_uldivmod>
 80110d4:	4603      	mov	r3, r0
 80110d6:	460c      	mov	r4, r1
 80110d8:	461a      	mov	r2, r3
 80110da:	4b0c      	ldr	r3, [pc, #48]	; (801110c <UART_SetConfig+0x384>)
 80110dc:	fba3 1302 	umull	r1, r3, r3, r2
 80110e0:	095b      	lsrs	r3, r3, #5
 80110e2:	2164      	movs	r1, #100	; 0x64
 80110e4:	fb01 f303 	mul.w	r3, r1, r3
 80110e8:	1ad3      	subs	r3, r2, r3
 80110ea:	00db      	lsls	r3, r3, #3
 80110ec:	3332      	adds	r3, #50	; 0x32
 80110ee:	4a07      	ldr	r2, [pc, #28]	; (801110c <UART_SetConfig+0x384>)
 80110f0:	fba2 2303 	umull	r2, r3, r2, r3
 80110f4:	095b      	lsrs	r3, r3, #5
 80110f6:	f003 0207 	and.w	r2, r3, #7
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	4442      	add	r2, r8
 8011100:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8011102:	e1b2      	b.n	801146a <UART_SetConfig+0x6e2>
 8011104:	40011000 	.word	0x40011000
 8011108:	40011400 	.word	0x40011400
 801110c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	4ad7      	ldr	r2, [pc, #860]	; (8011474 <UART_SetConfig+0x6ec>)
 8011116:	4293      	cmp	r3, r2
 8011118:	d005      	beq.n	8011126 <UART_SetConfig+0x39e>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	4ad6      	ldr	r2, [pc, #856]	; (8011478 <UART_SetConfig+0x6f0>)
 8011120:	4293      	cmp	r3, r2
 8011122:	f040 80d1 	bne.w	80112c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011126:	f7fe faa3 	bl	800f670 <HAL_RCC_GetPCLK2Freq>
 801112a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	469a      	mov	sl, r3
 8011130:	f04f 0b00 	mov.w	fp, #0
 8011134:	46d0      	mov	r8, sl
 8011136:	46d9      	mov	r9, fp
 8011138:	eb18 0308 	adds.w	r3, r8, r8
 801113c:	eb49 0409 	adc.w	r4, r9, r9
 8011140:	4698      	mov	r8, r3
 8011142:	46a1      	mov	r9, r4
 8011144:	eb18 080a 	adds.w	r8, r8, sl
 8011148:	eb49 090b 	adc.w	r9, r9, fp
 801114c:	f04f 0100 	mov.w	r1, #0
 8011150:	f04f 0200 	mov.w	r2, #0
 8011154:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011158:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801115c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011160:	4688      	mov	r8, r1
 8011162:	4691      	mov	r9, r2
 8011164:	eb1a 0508 	adds.w	r5, sl, r8
 8011168:	eb4b 0609 	adc.w	r6, fp, r9
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	4619      	mov	r1, r3
 8011172:	f04f 0200 	mov.w	r2, #0
 8011176:	f04f 0300 	mov.w	r3, #0
 801117a:	f04f 0400 	mov.w	r4, #0
 801117e:	0094      	lsls	r4, r2, #2
 8011180:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011184:	008b      	lsls	r3, r1, #2
 8011186:	461a      	mov	r2, r3
 8011188:	4623      	mov	r3, r4
 801118a:	4628      	mov	r0, r5
 801118c:	4631      	mov	r1, r6
 801118e:	f7ef fd5b 	bl	8000c48 <__aeabi_uldivmod>
 8011192:	4603      	mov	r3, r0
 8011194:	460c      	mov	r4, r1
 8011196:	461a      	mov	r2, r3
 8011198:	4bb8      	ldr	r3, [pc, #736]	; (801147c <UART_SetConfig+0x6f4>)
 801119a:	fba3 2302 	umull	r2, r3, r3, r2
 801119e:	095b      	lsrs	r3, r3, #5
 80111a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	469b      	mov	fp, r3
 80111a8:	f04f 0c00 	mov.w	ip, #0
 80111ac:	46d9      	mov	r9, fp
 80111ae:	46e2      	mov	sl, ip
 80111b0:	eb19 0309 	adds.w	r3, r9, r9
 80111b4:	eb4a 040a 	adc.w	r4, sl, sl
 80111b8:	4699      	mov	r9, r3
 80111ba:	46a2      	mov	sl, r4
 80111bc:	eb19 090b 	adds.w	r9, r9, fp
 80111c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80111c4:	f04f 0100 	mov.w	r1, #0
 80111c8:	f04f 0200 	mov.w	r2, #0
 80111cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80111d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80111d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80111d8:	4689      	mov	r9, r1
 80111da:	4692      	mov	sl, r2
 80111dc:	eb1b 0509 	adds.w	r5, fp, r9
 80111e0:	eb4c 060a 	adc.w	r6, ip, sl
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	4619      	mov	r1, r3
 80111ea:	f04f 0200 	mov.w	r2, #0
 80111ee:	f04f 0300 	mov.w	r3, #0
 80111f2:	f04f 0400 	mov.w	r4, #0
 80111f6:	0094      	lsls	r4, r2, #2
 80111f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80111fc:	008b      	lsls	r3, r1, #2
 80111fe:	461a      	mov	r2, r3
 8011200:	4623      	mov	r3, r4
 8011202:	4628      	mov	r0, r5
 8011204:	4631      	mov	r1, r6
 8011206:	f7ef fd1f 	bl	8000c48 <__aeabi_uldivmod>
 801120a:	4603      	mov	r3, r0
 801120c:	460c      	mov	r4, r1
 801120e:	461a      	mov	r2, r3
 8011210:	4b9a      	ldr	r3, [pc, #616]	; (801147c <UART_SetConfig+0x6f4>)
 8011212:	fba3 1302 	umull	r1, r3, r3, r2
 8011216:	095b      	lsrs	r3, r3, #5
 8011218:	2164      	movs	r1, #100	; 0x64
 801121a:	fb01 f303 	mul.w	r3, r1, r3
 801121e:	1ad3      	subs	r3, r2, r3
 8011220:	011b      	lsls	r3, r3, #4
 8011222:	3332      	adds	r3, #50	; 0x32
 8011224:	4a95      	ldr	r2, [pc, #596]	; (801147c <UART_SetConfig+0x6f4>)
 8011226:	fba2 2303 	umull	r2, r3, r2, r3
 801122a:	095b      	lsrs	r3, r3, #5
 801122c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011230:	4498      	add	r8, r3
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	469b      	mov	fp, r3
 8011236:	f04f 0c00 	mov.w	ip, #0
 801123a:	46d9      	mov	r9, fp
 801123c:	46e2      	mov	sl, ip
 801123e:	eb19 0309 	adds.w	r3, r9, r9
 8011242:	eb4a 040a 	adc.w	r4, sl, sl
 8011246:	4699      	mov	r9, r3
 8011248:	46a2      	mov	sl, r4
 801124a:	eb19 090b 	adds.w	r9, r9, fp
 801124e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011252:	f04f 0100 	mov.w	r1, #0
 8011256:	f04f 0200 	mov.w	r2, #0
 801125a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801125e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011262:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011266:	4689      	mov	r9, r1
 8011268:	4692      	mov	sl, r2
 801126a:	eb1b 0509 	adds.w	r5, fp, r9
 801126e:	eb4c 060a 	adc.w	r6, ip, sl
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	4619      	mov	r1, r3
 8011278:	f04f 0200 	mov.w	r2, #0
 801127c:	f04f 0300 	mov.w	r3, #0
 8011280:	f04f 0400 	mov.w	r4, #0
 8011284:	0094      	lsls	r4, r2, #2
 8011286:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801128a:	008b      	lsls	r3, r1, #2
 801128c:	461a      	mov	r2, r3
 801128e:	4623      	mov	r3, r4
 8011290:	4628      	mov	r0, r5
 8011292:	4631      	mov	r1, r6
 8011294:	f7ef fcd8 	bl	8000c48 <__aeabi_uldivmod>
 8011298:	4603      	mov	r3, r0
 801129a:	460c      	mov	r4, r1
 801129c:	461a      	mov	r2, r3
 801129e:	4b77      	ldr	r3, [pc, #476]	; (801147c <UART_SetConfig+0x6f4>)
 80112a0:	fba3 1302 	umull	r1, r3, r3, r2
 80112a4:	095b      	lsrs	r3, r3, #5
 80112a6:	2164      	movs	r1, #100	; 0x64
 80112a8:	fb01 f303 	mul.w	r3, r1, r3
 80112ac:	1ad3      	subs	r3, r2, r3
 80112ae:	011b      	lsls	r3, r3, #4
 80112b0:	3332      	adds	r3, #50	; 0x32
 80112b2:	4a72      	ldr	r2, [pc, #456]	; (801147c <UART_SetConfig+0x6f4>)
 80112b4:	fba2 2303 	umull	r2, r3, r2, r3
 80112b8:	095b      	lsrs	r3, r3, #5
 80112ba:	f003 020f 	and.w	r2, r3, #15
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	4442      	add	r2, r8
 80112c4:	609a      	str	r2, [r3, #8]
 80112c6:	e0d0      	b.n	801146a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80112c8:	f7fe f9be 	bl	800f648 <HAL_RCC_GetPCLK1Freq>
 80112cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80112ce:	68bb      	ldr	r3, [r7, #8]
 80112d0:	469a      	mov	sl, r3
 80112d2:	f04f 0b00 	mov.w	fp, #0
 80112d6:	46d0      	mov	r8, sl
 80112d8:	46d9      	mov	r9, fp
 80112da:	eb18 0308 	adds.w	r3, r8, r8
 80112de:	eb49 0409 	adc.w	r4, r9, r9
 80112e2:	4698      	mov	r8, r3
 80112e4:	46a1      	mov	r9, r4
 80112e6:	eb18 080a 	adds.w	r8, r8, sl
 80112ea:	eb49 090b 	adc.w	r9, r9, fp
 80112ee:	f04f 0100 	mov.w	r1, #0
 80112f2:	f04f 0200 	mov.w	r2, #0
 80112f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80112fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80112fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011302:	4688      	mov	r8, r1
 8011304:	4691      	mov	r9, r2
 8011306:	eb1a 0508 	adds.w	r5, sl, r8
 801130a:	eb4b 0609 	adc.w	r6, fp, r9
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	4619      	mov	r1, r3
 8011314:	f04f 0200 	mov.w	r2, #0
 8011318:	f04f 0300 	mov.w	r3, #0
 801131c:	f04f 0400 	mov.w	r4, #0
 8011320:	0094      	lsls	r4, r2, #2
 8011322:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011326:	008b      	lsls	r3, r1, #2
 8011328:	461a      	mov	r2, r3
 801132a:	4623      	mov	r3, r4
 801132c:	4628      	mov	r0, r5
 801132e:	4631      	mov	r1, r6
 8011330:	f7ef fc8a 	bl	8000c48 <__aeabi_uldivmod>
 8011334:	4603      	mov	r3, r0
 8011336:	460c      	mov	r4, r1
 8011338:	461a      	mov	r2, r3
 801133a:	4b50      	ldr	r3, [pc, #320]	; (801147c <UART_SetConfig+0x6f4>)
 801133c:	fba3 2302 	umull	r2, r3, r3, r2
 8011340:	095b      	lsrs	r3, r3, #5
 8011342:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	469b      	mov	fp, r3
 801134a:	f04f 0c00 	mov.w	ip, #0
 801134e:	46d9      	mov	r9, fp
 8011350:	46e2      	mov	sl, ip
 8011352:	eb19 0309 	adds.w	r3, r9, r9
 8011356:	eb4a 040a 	adc.w	r4, sl, sl
 801135a:	4699      	mov	r9, r3
 801135c:	46a2      	mov	sl, r4
 801135e:	eb19 090b 	adds.w	r9, r9, fp
 8011362:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011366:	f04f 0100 	mov.w	r1, #0
 801136a:	f04f 0200 	mov.w	r2, #0
 801136e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011372:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011376:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801137a:	4689      	mov	r9, r1
 801137c:	4692      	mov	sl, r2
 801137e:	eb1b 0509 	adds.w	r5, fp, r9
 8011382:	eb4c 060a 	adc.w	r6, ip, sl
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	4619      	mov	r1, r3
 801138c:	f04f 0200 	mov.w	r2, #0
 8011390:	f04f 0300 	mov.w	r3, #0
 8011394:	f04f 0400 	mov.w	r4, #0
 8011398:	0094      	lsls	r4, r2, #2
 801139a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801139e:	008b      	lsls	r3, r1, #2
 80113a0:	461a      	mov	r2, r3
 80113a2:	4623      	mov	r3, r4
 80113a4:	4628      	mov	r0, r5
 80113a6:	4631      	mov	r1, r6
 80113a8:	f7ef fc4e 	bl	8000c48 <__aeabi_uldivmod>
 80113ac:	4603      	mov	r3, r0
 80113ae:	460c      	mov	r4, r1
 80113b0:	461a      	mov	r2, r3
 80113b2:	4b32      	ldr	r3, [pc, #200]	; (801147c <UART_SetConfig+0x6f4>)
 80113b4:	fba3 1302 	umull	r1, r3, r3, r2
 80113b8:	095b      	lsrs	r3, r3, #5
 80113ba:	2164      	movs	r1, #100	; 0x64
 80113bc:	fb01 f303 	mul.w	r3, r1, r3
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	011b      	lsls	r3, r3, #4
 80113c4:	3332      	adds	r3, #50	; 0x32
 80113c6:	4a2d      	ldr	r2, [pc, #180]	; (801147c <UART_SetConfig+0x6f4>)
 80113c8:	fba2 2303 	umull	r2, r3, r2, r3
 80113cc:	095b      	lsrs	r3, r3, #5
 80113ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113d2:	4498      	add	r8, r3
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	469b      	mov	fp, r3
 80113d8:	f04f 0c00 	mov.w	ip, #0
 80113dc:	46d9      	mov	r9, fp
 80113de:	46e2      	mov	sl, ip
 80113e0:	eb19 0309 	adds.w	r3, r9, r9
 80113e4:	eb4a 040a 	adc.w	r4, sl, sl
 80113e8:	4699      	mov	r9, r3
 80113ea:	46a2      	mov	sl, r4
 80113ec:	eb19 090b 	adds.w	r9, r9, fp
 80113f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80113f4:	f04f 0100 	mov.w	r1, #0
 80113f8:	f04f 0200 	mov.w	r2, #0
 80113fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011400:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011404:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011408:	4689      	mov	r9, r1
 801140a:	4692      	mov	sl, r2
 801140c:	eb1b 0509 	adds.w	r5, fp, r9
 8011410:	eb4c 060a 	adc.w	r6, ip, sl
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	4619      	mov	r1, r3
 801141a:	f04f 0200 	mov.w	r2, #0
 801141e:	f04f 0300 	mov.w	r3, #0
 8011422:	f04f 0400 	mov.w	r4, #0
 8011426:	0094      	lsls	r4, r2, #2
 8011428:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801142c:	008b      	lsls	r3, r1, #2
 801142e:	461a      	mov	r2, r3
 8011430:	4623      	mov	r3, r4
 8011432:	4628      	mov	r0, r5
 8011434:	4631      	mov	r1, r6
 8011436:	f7ef fc07 	bl	8000c48 <__aeabi_uldivmod>
 801143a:	4603      	mov	r3, r0
 801143c:	460c      	mov	r4, r1
 801143e:	461a      	mov	r2, r3
 8011440:	4b0e      	ldr	r3, [pc, #56]	; (801147c <UART_SetConfig+0x6f4>)
 8011442:	fba3 1302 	umull	r1, r3, r3, r2
 8011446:	095b      	lsrs	r3, r3, #5
 8011448:	2164      	movs	r1, #100	; 0x64
 801144a:	fb01 f303 	mul.w	r3, r1, r3
 801144e:	1ad3      	subs	r3, r2, r3
 8011450:	011b      	lsls	r3, r3, #4
 8011452:	3332      	adds	r3, #50	; 0x32
 8011454:	4a09      	ldr	r2, [pc, #36]	; (801147c <UART_SetConfig+0x6f4>)
 8011456:	fba2 2303 	umull	r2, r3, r2, r3
 801145a:	095b      	lsrs	r3, r3, #5
 801145c:	f003 020f 	and.w	r2, r3, #15
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4442      	add	r2, r8
 8011466:	609a      	str	r2, [r3, #8]
}
 8011468:	e7ff      	b.n	801146a <UART_SetConfig+0x6e2>
 801146a:	bf00      	nop
 801146c:	3714      	adds	r7, #20
 801146e:	46bd      	mov	sp, r7
 8011470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011474:	40011000 	.word	0x40011000
 8011478:	40011400 	.word	0x40011400
 801147c:	51eb851f 	.word	0x51eb851f

08011480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011480:	b480      	push	{r7}
 8011482:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011484:	bf00      	nop
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr

0801148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801148e:	b480      	push	{r7}
 8011490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011492:	e7fe      	b.n	8011492 <HardFault_Handler+0x4>

08011494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011494:	b480      	push	{r7}
 8011496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011498:	e7fe      	b.n	8011498 <MemManage_Handler+0x4>

0801149a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801149a:	b480      	push	{r7}
 801149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801149e:	e7fe      	b.n	801149e <BusFault_Handler+0x4>

080114a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80114a0:	b480      	push	{r7}
 80114a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80114a4:	e7fe      	b.n	80114a4 <UsageFault_Handler+0x4>

080114a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80114a6:	b480      	push	{r7}
 80114a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80114aa:	bf00      	nop
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr

080114b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80114b8:	f7fb fd18 	bl	800ceec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80114bc:	f001 f966 	bl	801278c <xTaskGetSchedulerState>
 80114c0:	4603      	mov	r3, r0
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d001      	beq.n	80114ca <SysTick_Handler+0x16>
    {
 /* INCLUDE_xTaskGetSchedulerState */
        xPortSysTickHandler();
 80114c6:	f000 fc87 	bl	8011dd8 <xPortSysTickHandler>
    }
  /* USER CODE END SysTick_IRQn 1 */
}
 80114ca:	bf00      	nop
 80114cc:	bd80      	pop	{r7, pc}
	...

080114d0 <system_clock_init>:
#include "main.h"
#include "tim.h"
#include "gpio.h"

static void system_clock_init(void) 
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b094      	sub	sp, #80	; 0x50
 80114d4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80114d6:	2300      	movs	r3, #0
 80114d8:	60bb      	str	r3, [r7, #8]
 80114da:	4b32      	ldr	r3, [pc, #200]	; (80115a4 <system_clock_init+0xd4>)
 80114dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114de:	4a31      	ldr	r2, [pc, #196]	; (80115a4 <system_clock_init+0xd4>)
 80114e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114e4:	6313      	str	r3, [r2, #48]	; 0x30
 80114e6:	4b2f      	ldr	r3, [pc, #188]	; (80115a4 <system_clock_init+0xd4>)
 80114e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114ee:	60bb      	str	r3, [r7, #8]
 80114f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_PWR_CLK_ENABLE();
 80114f2:	2300      	movs	r3, #0
 80114f4:	607b      	str	r3, [r7, #4]
 80114f6:	4b2b      	ldr	r3, [pc, #172]	; (80115a4 <system_clock_init+0xd4>)
 80114f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114fa:	4a2a      	ldr	r2, [pc, #168]	; (80115a4 <system_clock_init+0xd4>)
 80114fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011500:	6413      	str	r3, [r2, #64]	; 0x40
 8011502:	4b28      	ldr	r3, [pc, #160]	; (80115a4 <system_clock_init+0xd4>)
 8011504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801150a:	607b      	str	r3, [r7, #4]
 801150c:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801150e:	2300      	movs	r3, #0
 8011510:	603b      	str	r3, [r7, #0]
 8011512:	4b25      	ldr	r3, [pc, #148]	; (80115a8 <system_clock_init+0xd8>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	4a24      	ldr	r2, [pc, #144]	; (80115a8 <system_clock_init+0xd8>)
 8011518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801151c:	6013      	str	r3, [r2, #0]
 801151e:	4b22      	ldr	r3, [pc, #136]	; (80115a8 <system_clock_init+0xd8>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011526:	603b      	str	r3, [r7, #0]
 8011528:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801152a:	f107 0320 	add.w	r3, r7, #32
 801152e:	2230      	movs	r2, #48	; 0x30
 8011530:	2100      	movs	r1, #0
 8011532:	4618      	mov	r0, r3
 8011534:	f002 ff31 	bl	801439a <memset>
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8011538:	2302      	movs	r3, #2
 801153a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801153c:	2301      	movs	r3, #1
 801153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8011540:	2310      	movs	r3, #16
 8011542:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011544:	2302      	movs	r3, #2
 8011546:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8011548:	2300      	movs	r3, #0
 801154a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 801154c:	2308      	movs	r3, #8
 801154e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8011550:	23a8      	movs	r3, #168	; 0xa8
 8011552:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011554:	2302      	movs	r3, #2
 8011556:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8011558:	2304      	movs	r3, #4
 801155a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 801155c:	f107 0320 	add.w	r3, r7, #32
 8011560:	4618      	mov	r0, r3
 8011562:	f7fd fc37 	bl	800edd4 <HAL_RCC_OscConfig>

    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011566:	f107 030c 	add.w	r3, r7, #12
 801156a:	2200      	movs	r2, #0
 801156c:	601a      	str	r2, [r3, #0]
 801156e:	605a      	str	r2, [r3, #4]
 8011570:	609a      	str	r2, [r3, #8]
 8011572:	60da      	str	r2, [r3, #12]
 8011574:	611a      	str	r2, [r3, #16]
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011576:	230f      	movs	r3, #15
 8011578:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801157a:	2302      	movs	r3, #2
 801157c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801157e:	2300      	movs	r3, #0
 8011580:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8011582:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8011586:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8011588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801158c:	61fb      	str	r3, [r7, #28]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 801158e:	f107 030c 	add.w	r3, r7, #12
 8011592:	2105      	movs	r1, #5
 8011594:	4618      	mov	r0, r3
 8011596:	f7fd fe8d 	bl	800f2b4 <HAL_RCC_ClockConfig>
}
 801159a:	bf00      	nop
 801159c:	3750      	adds	r7, #80	; 0x50
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	40023800 	.word	0x40023800
 80115a8:	40007000 	.word	0x40007000

080115ac <system_init>:

void system_init(void) 
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	af00      	add	r7, sp, #0
    /* Intialize hardware abstraction layer */
    HAL_Init();
 80115b0:	f7fb fc50 	bl	800ce54 <HAL_Init>

    /* Initialize system clock */
    system_clock_init();
 80115b4:	f7ff ff8c 	bl	80114d0 <system_clock_init>

    /* Initialize timer + GPIO */
    MX_GPIO_Init();
 80115b8:	f7ef fd90 	bl	80010dc <MX_GPIO_Init>
    MX_TIM1_Init();
 80115bc:	f7f7 ffe2 	bl	8009584 <MX_TIM1_Init>
    MX_TIM2_Init();
 80115c0:	f7f7 ff96 	bl	80094f0 <MX_TIM2_Init>

    MX_TIM5_Init();
 80115c4:	f7f8 f868 	bl	8009698 <MX_TIM5_Init>
//    HAL_TIM_Encoder_MspDeInit(&htim5);
//    HAL_TIM_Encoder_MspInit(&htim5);

    /* Initialize log */
    //stm_log_init();
}
 80115c8:	bf00      	nop
 80115ca:	bd80      	pop	{r7, pc}

080115cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b08a      	sub	sp, #40	; 0x28
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80115d4:	2300      	movs	r3, #0
 80115d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80115d8:	f000 fe30 	bl	801223c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80115dc:	4b57      	ldr	r3, [pc, #348]	; (801173c <pvPortMalloc+0x170>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d101      	bne.n	80115e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80115e4:	f000 f90c 	bl	8011800 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80115e8:	4b55      	ldr	r3, [pc, #340]	; (8011740 <pvPortMalloc+0x174>)
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4013      	ands	r3, r2
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f040 808c 	bne.w	801170e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d01c      	beq.n	8011636 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80115fc:	2208      	movs	r2, #8
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4413      	add	r3, r2
 8011602:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f003 0307 	and.w	r3, r3, #7
 801160a:	2b00      	cmp	r3, #0
 801160c:	d013      	beq.n	8011636 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f023 0307 	bic.w	r3, r3, #7
 8011614:	3308      	adds	r3, #8
 8011616:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f003 0307 	and.w	r3, r3, #7
 801161e:	2b00      	cmp	r3, #0
 8011620:	d009      	beq.n	8011636 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011626:	f383 8811 	msr	BASEPRI, r3
 801162a:	f3bf 8f6f 	isb	sy
 801162e:	f3bf 8f4f 	dsb	sy
 8011632:	617b      	str	r3, [r7, #20]
 8011634:	e7fe      	b.n	8011634 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d068      	beq.n	801170e <pvPortMalloc+0x142>
 801163c:	4b41      	ldr	r3, [pc, #260]	; (8011744 <pvPortMalloc+0x178>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	429a      	cmp	r2, r3
 8011644:	d863      	bhi.n	801170e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011646:	4b40      	ldr	r3, [pc, #256]	; (8011748 <pvPortMalloc+0x17c>)
 8011648:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801164a:	4b3f      	ldr	r3, [pc, #252]	; (8011748 <pvPortMalloc+0x17c>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011650:	e004      	b.n	801165c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011654:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	429a      	cmp	r2, r3
 8011664:	d903      	bls.n	801166e <pvPortMalloc+0xa2>
 8011666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d1f1      	bne.n	8011652 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801166e:	4b33      	ldr	r3, [pc, #204]	; (801173c <pvPortMalloc+0x170>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011674:	429a      	cmp	r2, r3
 8011676:	d04a      	beq.n	801170e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011678:	6a3b      	ldr	r3, [r7, #32]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2208      	movs	r2, #8
 801167e:	4413      	add	r3, r2
 8011680:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011684:	681a      	ldr	r2, [r3, #0]
 8011686:	6a3b      	ldr	r3, [r7, #32]
 8011688:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168c:	685a      	ldr	r2, [r3, #4]
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	1ad2      	subs	r2, r2, r3
 8011692:	2308      	movs	r3, #8
 8011694:	005b      	lsls	r3, r3, #1
 8011696:	429a      	cmp	r2, r3
 8011698:	d91e      	bls.n	80116d8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801169a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	4413      	add	r3, r2
 80116a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	f003 0307 	and.w	r3, r3, #7
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d009      	beq.n	80116c0 <pvPortMalloc+0xf4>
 80116ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b0:	f383 8811 	msr	BASEPRI, r3
 80116b4:	f3bf 8f6f 	isb	sy
 80116b8:	f3bf 8f4f 	dsb	sy
 80116bc:	613b      	str	r3, [r7, #16]
 80116be:	e7fe      	b.n	80116be <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80116c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c2:	685a      	ldr	r2, [r3, #4]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	1ad2      	subs	r2, r2, r3
 80116c8:	69bb      	ldr	r3, [r7, #24]
 80116ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80116cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80116d2:	69b8      	ldr	r0, [r7, #24]
 80116d4:	f000 f8f6 	bl	80118c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116d8:	4b1a      	ldr	r3, [pc, #104]	; (8011744 <pvPortMalloc+0x178>)
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	1ad3      	subs	r3, r2, r3
 80116e2:	4a18      	ldr	r2, [pc, #96]	; (8011744 <pvPortMalloc+0x178>)
 80116e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116e6:	4b17      	ldr	r3, [pc, #92]	; (8011744 <pvPortMalloc+0x178>)
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	4b18      	ldr	r3, [pc, #96]	; (801174c <pvPortMalloc+0x180>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d203      	bcs.n	80116fa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80116f2:	4b14      	ldr	r3, [pc, #80]	; (8011744 <pvPortMalloc+0x178>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	4a15      	ldr	r2, [pc, #84]	; (801174c <pvPortMalloc+0x180>)
 80116f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80116fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fc:	685a      	ldr	r2, [r3, #4]
 80116fe:	4b10      	ldr	r3, [pc, #64]	; (8011740 <pvPortMalloc+0x174>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	431a      	orrs	r2, r3
 8011704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170a:	2200      	movs	r2, #0
 801170c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801170e:	f000 fda3 	bl	8012258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	f003 0307 	and.w	r3, r3, #7
 8011718:	2b00      	cmp	r3, #0
 801171a:	d009      	beq.n	8011730 <pvPortMalloc+0x164>
 801171c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011720:	f383 8811 	msr	BASEPRI, r3
 8011724:	f3bf 8f6f 	isb	sy
 8011728:	f3bf 8f4f 	dsb	sy
 801172c:	60fb      	str	r3, [r7, #12]
 801172e:	e7fe      	b.n	801172e <pvPortMalloc+0x162>
	return pvReturn;
 8011730:	69fb      	ldr	r3, [r7, #28]
}
 8011732:	4618      	mov	r0, r3
 8011734:	3728      	adds	r7, #40	; 0x28
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	20008880 	.word	0x20008880
 8011740:	2000888c 	.word	0x2000888c
 8011744:	20008884 	.word	0x20008884
 8011748:	20008878 	.word	0x20008878
 801174c:	20008888 	.word	0x20008888

08011750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b086      	sub	sp, #24
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d046      	beq.n	80117f0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011762:	2308      	movs	r3, #8
 8011764:	425b      	negs	r3, r3
 8011766:	697a      	ldr	r2, [r7, #20]
 8011768:	4413      	add	r3, r2
 801176a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	685a      	ldr	r2, [r3, #4]
 8011774:	4b20      	ldr	r3, [pc, #128]	; (80117f8 <vPortFree+0xa8>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	4013      	ands	r3, r2
 801177a:	2b00      	cmp	r3, #0
 801177c:	d109      	bne.n	8011792 <vPortFree+0x42>
 801177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011782:	f383 8811 	msr	BASEPRI, r3
 8011786:	f3bf 8f6f 	isb	sy
 801178a:	f3bf 8f4f 	dsb	sy
 801178e:	60fb      	str	r3, [r7, #12]
 8011790:	e7fe      	b.n	8011790 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d009      	beq.n	80117ae <vPortFree+0x5e>
 801179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179e:	f383 8811 	msr	BASEPRI, r3
 80117a2:	f3bf 8f6f 	isb	sy
 80117a6:	f3bf 8f4f 	dsb	sy
 80117aa:	60bb      	str	r3, [r7, #8]
 80117ac:	e7fe      	b.n	80117ac <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	685a      	ldr	r2, [r3, #4]
 80117b2:	4b11      	ldr	r3, [pc, #68]	; (80117f8 <vPortFree+0xa8>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	4013      	ands	r3, r2
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d019      	beq.n	80117f0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d115      	bne.n	80117f0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	685a      	ldr	r2, [r3, #4]
 80117c8:	4b0b      	ldr	r3, [pc, #44]	; (80117f8 <vPortFree+0xa8>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	43db      	mvns	r3, r3
 80117ce:	401a      	ands	r2, r3
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80117d4:	f000 fd32 	bl	801223c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	685a      	ldr	r2, [r3, #4]
 80117dc:	4b07      	ldr	r3, [pc, #28]	; (80117fc <vPortFree+0xac>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	4413      	add	r3, r2
 80117e2:	4a06      	ldr	r2, [pc, #24]	; (80117fc <vPortFree+0xac>)
 80117e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80117e6:	6938      	ldr	r0, [r7, #16]
 80117e8:	f000 f86c 	bl	80118c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80117ec:	f000 fd34 	bl	8012258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80117f0:	bf00      	nop
 80117f2:	3718      	adds	r7, #24
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}
 80117f8:	2000888c 	.word	0x2000888c
 80117fc:	20008884 	.word	0x20008884

08011800 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011800:	b480      	push	{r7}
 8011802:	b085      	sub	sp, #20
 8011804:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011806:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801180a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801180c:	4b27      	ldr	r3, [pc, #156]	; (80118ac <prvHeapInit+0xac>)
 801180e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	f003 0307 	and.w	r3, r3, #7
 8011816:	2b00      	cmp	r3, #0
 8011818:	d00c      	beq.n	8011834 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	3307      	adds	r3, #7
 801181e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f023 0307 	bic.w	r3, r3, #7
 8011826:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011828:	68ba      	ldr	r2, [r7, #8]
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	4a1f      	ldr	r2, [pc, #124]	; (80118ac <prvHeapInit+0xac>)
 8011830:	4413      	add	r3, r2
 8011832:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011838:	4a1d      	ldr	r2, [pc, #116]	; (80118b0 <prvHeapInit+0xb0>)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801183e:	4b1c      	ldr	r3, [pc, #112]	; (80118b0 <prvHeapInit+0xb0>)
 8011840:	2200      	movs	r2, #0
 8011842:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	68ba      	ldr	r2, [r7, #8]
 8011848:	4413      	add	r3, r2
 801184a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801184c:	2208      	movs	r2, #8
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	1a9b      	subs	r3, r3, r2
 8011852:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f023 0307 	bic.w	r3, r3, #7
 801185a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	4a15      	ldr	r2, [pc, #84]	; (80118b4 <prvHeapInit+0xb4>)
 8011860:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011862:	4b14      	ldr	r3, [pc, #80]	; (80118b4 <prvHeapInit+0xb4>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2200      	movs	r2, #0
 8011868:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801186a:	4b12      	ldr	r3, [pc, #72]	; (80118b4 <prvHeapInit+0xb4>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	2200      	movs	r2, #0
 8011870:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	1ad2      	subs	r2, r2, r3
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011880:	4b0c      	ldr	r3, [pc, #48]	; (80118b4 <prvHeapInit+0xb4>)
 8011882:	681a      	ldr	r2, [r3, #0]
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	4a0a      	ldr	r2, [pc, #40]	; (80118b8 <prvHeapInit+0xb8>)
 801188e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	4a09      	ldr	r2, [pc, #36]	; (80118bc <prvHeapInit+0xbc>)
 8011896:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011898:	4b09      	ldr	r3, [pc, #36]	; (80118c0 <prvHeapInit+0xc0>)
 801189a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801189e:	601a      	str	r2, [r3, #0]
}
 80118a0:	bf00      	nop
 80118a2:	3714      	adds	r7, #20
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr
 80118ac:	20004c78 	.word	0x20004c78
 80118b0:	20008878 	.word	0x20008878
 80118b4:	20008880 	.word	0x20008880
 80118b8:	20008888 	.word	0x20008888
 80118bc:	20008884 	.word	0x20008884
 80118c0:	2000888c 	.word	0x2000888c

080118c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80118c4:	b480      	push	{r7}
 80118c6:	b085      	sub	sp, #20
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80118cc:	4b28      	ldr	r3, [pc, #160]	; (8011970 <prvInsertBlockIntoFreeList+0xac>)
 80118ce:	60fb      	str	r3, [r7, #12]
 80118d0:	e002      	b.n	80118d8 <prvInsertBlockIntoFreeList+0x14>
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	60fb      	str	r3, [r7, #12]
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d8f7      	bhi.n	80118d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	68ba      	ldr	r2, [r7, #8]
 80118ec:	4413      	add	r3, r2
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d108      	bne.n	8011906 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	685a      	ldr	r2, [r3, #4]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	441a      	add	r2, r3
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	68ba      	ldr	r2, [r7, #8]
 8011910:	441a      	add	r2, r3
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	429a      	cmp	r2, r3
 8011918:	d118      	bne.n	801194c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	681a      	ldr	r2, [r3, #0]
 801191e:	4b15      	ldr	r3, [pc, #84]	; (8011974 <prvInsertBlockIntoFreeList+0xb0>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	429a      	cmp	r2, r3
 8011924:	d00d      	beq.n	8011942 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	685a      	ldr	r2, [r3, #4]
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	441a      	add	r2, r3
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	601a      	str	r2, [r3, #0]
 8011940:	e008      	b.n	8011954 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011942:	4b0c      	ldr	r3, [pc, #48]	; (8011974 <prvInsertBlockIntoFreeList+0xb0>)
 8011944:	681a      	ldr	r2, [r3, #0]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	601a      	str	r2, [r3, #0]
 801194a:	e003      	b.n	8011954 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011954:	68fa      	ldr	r2, [r7, #12]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	429a      	cmp	r2, r3
 801195a:	d002      	beq.n	8011962 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	687a      	ldr	r2, [r7, #4]
 8011960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011962:	bf00      	nop
 8011964:	3714      	adds	r7, #20
 8011966:	46bd      	mov	sp, r7
 8011968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196c:	4770      	bx	lr
 801196e:	bf00      	nop
 8011970:	20008878 	.word	0x20008878
 8011974:	20008880 	.word	0x20008880

08011978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011978:	b480      	push	{r7}
 801197a:	b083      	sub	sp, #12
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f103 0208 	add.w	r2, r3, #8
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011990:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f103 0208 	add.w	r2, r3, #8
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f103 0208 	add.w	r2, r3, #8
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80119ac:	bf00      	nop
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr

080119b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2200      	movs	r2, #0
 80119c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80119c6:	bf00      	nop
 80119c8:	370c      	adds	r7, #12
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr

080119d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80119d2:	b480      	push	{r7}
 80119d4:	b085      	sub	sp, #20
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]
 80119da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	68fa      	ldr	r2, [r7, #12]
 80119e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	689a      	ldr	r2, [r3, #8]
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	683a      	ldr	r2, [r7, #0]
 80119f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	683a      	ldr	r2, [r7, #0]
 80119fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	1c5a      	adds	r2, r3, #1
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	601a      	str	r2, [r3, #0]
}
 8011a0e:	bf00      	nop
 8011a10:	3714      	adds	r7, #20
 8011a12:	46bd      	mov	sp, r7
 8011a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a18:	4770      	bx	lr

08011a1a <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011a1a:	b480      	push	{r7}
 8011a1c:	b085      	sub	sp, #20
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	691b      	ldr	r3, [r3, #16]
 8011a26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	6892      	ldr	r2, [r2, #8]
 8011a30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	689b      	ldr	r3, [r3, #8]
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	6852      	ldr	r2, [r2, #4]
 8011a3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d103      	bne.n	8011a4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	689a      	ldr	r2, [r3, #8]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2200      	movs	r2, #0
 8011a52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	1e5a      	subs	r2, r3, #1
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	681b      	ldr	r3, [r3, #0]
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3714      	adds	r7, #20
 8011a66:	46bd      	mov	sp, r7
 8011a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6c:	4770      	bx	lr
	...

08011a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011a70:	b480      	push	{r7}
 8011a72:	b085      	sub	sp, #20
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	60b9      	str	r1, [r7, #8]
 8011a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	3b04      	subs	r3, #4
 8011a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	3b04      	subs	r3, #4
 8011a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	f023 0201 	bic.w	r2, r3, #1
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	3b04      	subs	r3, #4
 8011a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011aa0:	4a0c      	ldr	r2, [pc, #48]	; (8011ad4 <pxPortInitialiseStack+0x64>)
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	3b14      	subs	r3, #20
 8011aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	3b04      	subs	r3, #4
 8011ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f06f 0202 	mvn.w	r2, #2
 8011abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	3b20      	subs	r3, #32
 8011ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3714      	adds	r7, #20
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr
 8011ad4:	08011ad9 	.word	0x08011ad9

08011ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b085      	sub	sp, #20
 8011adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011ae2:	4b11      	ldr	r3, [pc, #68]	; (8011b28 <prvTaskExitError+0x50>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011aea:	d009      	beq.n	8011b00 <prvTaskExitError+0x28>
 8011aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af0:	f383 8811 	msr	BASEPRI, r3
 8011af4:	f3bf 8f6f 	isb	sy
 8011af8:	f3bf 8f4f 	dsb	sy
 8011afc:	60fb      	str	r3, [r7, #12]
 8011afe:	e7fe      	b.n	8011afe <prvTaskExitError+0x26>
 8011b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b04:	f383 8811 	msr	BASEPRI, r3
 8011b08:	f3bf 8f6f 	isb	sy
 8011b0c:	f3bf 8f4f 	dsb	sy
 8011b10:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011b12:	bf00      	nop
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d0fc      	beq.n	8011b14 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011b1a:	bf00      	nop
 8011b1c:	3714      	adds	r7, #20
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop
 8011b28:	200000c4 	.word	0x200000c4
 8011b2c:	00000000 	.word	0x00000000

08011b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011b30:	4b07      	ldr	r3, [pc, #28]	; (8011b50 <pxCurrentTCBConst2>)
 8011b32:	6819      	ldr	r1, [r3, #0]
 8011b34:	6808      	ldr	r0, [r1, #0]
 8011b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b3a:	f380 8809 	msr	PSP, r0
 8011b3e:	f3bf 8f6f 	isb	sy
 8011b42:	f04f 0000 	mov.w	r0, #0
 8011b46:	f380 8811 	msr	BASEPRI, r0
 8011b4a:	4770      	bx	lr
 8011b4c:	f3af 8000 	nop.w

08011b50 <pxCurrentTCBConst2>:
 8011b50:	20008898 	.word	0x20008898
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011b54:	bf00      	nop
 8011b56:	bf00      	nop

08011b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011b58:	4808      	ldr	r0, [pc, #32]	; (8011b7c <prvPortStartFirstTask+0x24>)
 8011b5a:	6800      	ldr	r0, [r0, #0]
 8011b5c:	6800      	ldr	r0, [r0, #0]
 8011b5e:	f380 8808 	msr	MSP, r0
 8011b62:	f04f 0000 	mov.w	r0, #0
 8011b66:	f380 8814 	msr	CONTROL, r0
 8011b6a:	b662      	cpsie	i
 8011b6c:	b661      	cpsie	f
 8011b6e:	f3bf 8f4f 	dsb	sy
 8011b72:	f3bf 8f6f 	isb	sy
 8011b76:	df00      	svc	0
 8011b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011b7a:	bf00      	nop
 8011b7c:	e000ed08 	.word	0xe000ed08

08011b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b086      	sub	sp, #24
 8011b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011b86:	4b44      	ldr	r3, [pc, #272]	; (8011c98 <xPortStartScheduler+0x118>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	4a44      	ldr	r2, [pc, #272]	; (8011c9c <xPortStartScheduler+0x11c>)
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	d109      	bne.n	8011ba4 <xPortStartScheduler+0x24>
 8011b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b94:	f383 8811 	msr	BASEPRI, r3
 8011b98:	f3bf 8f6f 	isb	sy
 8011b9c:	f3bf 8f4f 	dsb	sy
 8011ba0:	613b      	str	r3, [r7, #16]
 8011ba2:	e7fe      	b.n	8011ba2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011ba4:	4b3c      	ldr	r3, [pc, #240]	; (8011c98 <xPortStartScheduler+0x118>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	4a3d      	ldr	r2, [pc, #244]	; (8011ca0 <xPortStartScheduler+0x120>)
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d109      	bne.n	8011bc2 <xPortStartScheduler+0x42>
 8011bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb2:	f383 8811 	msr	BASEPRI, r3
 8011bb6:	f3bf 8f6f 	isb	sy
 8011bba:	f3bf 8f4f 	dsb	sy
 8011bbe:	60fb      	str	r3, [r7, #12]
 8011bc0:	e7fe      	b.n	8011bc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011bc2:	4b38      	ldr	r3, [pc, #224]	; (8011ca4 <xPortStartScheduler+0x124>)
 8011bc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	b2db      	uxtb	r3, r3
 8011bcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	22ff      	movs	r2, #255	; 0xff
 8011bd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011bdc:	78fb      	ldrb	r3, [r7, #3]
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	4b30      	ldr	r3, [pc, #192]	; (8011ca8 <xPortStartScheduler+0x128>)
 8011be8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011bea:	4b30      	ldr	r3, [pc, #192]	; (8011cac <xPortStartScheduler+0x12c>)
 8011bec:	2207      	movs	r2, #7
 8011bee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011bf0:	e009      	b.n	8011c06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011bf2:	4b2e      	ldr	r3, [pc, #184]	; (8011cac <xPortStartScheduler+0x12c>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	3b01      	subs	r3, #1
 8011bf8:	4a2c      	ldr	r2, [pc, #176]	; (8011cac <xPortStartScheduler+0x12c>)
 8011bfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011bfc:	78fb      	ldrb	r3, [r7, #3]
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	005b      	lsls	r3, r3, #1
 8011c02:	b2db      	uxtb	r3, r3
 8011c04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011c06:	78fb      	ldrb	r3, [r7, #3]
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c0e:	2b80      	cmp	r3, #128	; 0x80
 8011c10:	d0ef      	beq.n	8011bf2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011c12:	4b26      	ldr	r3, [pc, #152]	; (8011cac <xPortStartScheduler+0x12c>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	f1c3 0307 	rsb	r3, r3, #7
 8011c1a:	2b04      	cmp	r3, #4
 8011c1c:	d009      	beq.n	8011c32 <xPortStartScheduler+0xb2>
 8011c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c22:	f383 8811 	msr	BASEPRI, r3
 8011c26:	f3bf 8f6f 	isb	sy
 8011c2a:	f3bf 8f4f 	dsb	sy
 8011c2e:	60bb      	str	r3, [r7, #8]
 8011c30:	e7fe      	b.n	8011c30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011c32:	4b1e      	ldr	r3, [pc, #120]	; (8011cac <xPortStartScheduler+0x12c>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	021b      	lsls	r3, r3, #8
 8011c38:	4a1c      	ldr	r2, [pc, #112]	; (8011cac <xPortStartScheduler+0x12c>)
 8011c3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011c3c:	4b1b      	ldr	r3, [pc, #108]	; (8011cac <xPortStartScheduler+0x12c>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011c44:	4a19      	ldr	r2, [pc, #100]	; (8011cac <xPortStartScheduler+0x12c>)
 8011c46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	b2da      	uxtb	r2, r3
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011c50:	4b17      	ldr	r3, [pc, #92]	; (8011cb0 <xPortStartScheduler+0x130>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4a16      	ldr	r2, [pc, #88]	; (8011cb0 <xPortStartScheduler+0x130>)
 8011c56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011c5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011c5c:	4b14      	ldr	r3, [pc, #80]	; (8011cb0 <xPortStartScheduler+0x130>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4a13      	ldr	r2, [pc, #76]	; (8011cb0 <xPortStartScheduler+0x130>)
 8011c62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011c66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011c68:	f000 f8d6 	bl	8011e18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011c6c:	4b11      	ldr	r3, [pc, #68]	; (8011cb4 <xPortStartScheduler+0x134>)
 8011c6e:	2200      	movs	r2, #0
 8011c70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011c72:	f000 f8f5 	bl	8011e60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011c76:	4b10      	ldr	r3, [pc, #64]	; (8011cb8 <xPortStartScheduler+0x138>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4a0f      	ldr	r2, [pc, #60]	; (8011cb8 <xPortStartScheduler+0x138>)
 8011c7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011c80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011c82:	f7ff ff69 	bl	8011b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011c86:	f000 fc4f 	bl	8012528 <vTaskSwitchContext>
	prvTaskExitError();
 8011c8a:	f7ff ff25 	bl	8011ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011c8e:	2300      	movs	r3, #0
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3718      	adds	r7, #24
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	e000ed00 	.word	0xe000ed00
 8011c9c:	410fc271 	.word	0x410fc271
 8011ca0:	410fc270 	.word	0x410fc270
 8011ca4:	e000e400 	.word	0xe000e400
 8011ca8:	20008890 	.word	0x20008890
 8011cac:	20008894 	.word	0x20008894
 8011cb0:	e000ed20 	.word	0xe000ed20
 8011cb4:	200000c4 	.word	0x200000c4
 8011cb8:	e000ef34 	.word	0xe000ef34

08011cbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b083      	sub	sp, #12
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc6:	f383 8811 	msr	BASEPRI, r3
 8011cca:	f3bf 8f6f 	isb	sy
 8011cce:	f3bf 8f4f 	dsb	sy
 8011cd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011cd4:	4b0e      	ldr	r3, [pc, #56]	; (8011d10 <vPortEnterCritical+0x54>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	3301      	adds	r3, #1
 8011cda:	4a0d      	ldr	r2, [pc, #52]	; (8011d10 <vPortEnterCritical+0x54>)
 8011cdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011cde:	4b0c      	ldr	r3, [pc, #48]	; (8011d10 <vPortEnterCritical+0x54>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d10e      	bne.n	8011d04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011ce6:	4b0b      	ldr	r3, [pc, #44]	; (8011d14 <vPortEnterCritical+0x58>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d009      	beq.n	8011d04 <vPortEnterCritical+0x48>
 8011cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf4:	f383 8811 	msr	BASEPRI, r3
 8011cf8:	f3bf 8f6f 	isb	sy
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	603b      	str	r3, [r7, #0]
 8011d02:	e7fe      	b.n	8011d02 <vPortEnterCritical+0x46>
	}
}
 8011d04:	bf00      	nop
 8011d06:	370c      	adds	r7, #12
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr
 8011d10:	200000c4 	.word	0x200000c4
 8011d14:	e000ed04 	.word	0xe000ed04

08011d18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011d1e:	4b11      	ldr	r3, [pc, #68]	; (8011d64 <vPortExitCritical+0x4c>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d109      	bne.n	8011d3a <vPortExitCritical+0x22>
 8011d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2a:	f383 8811 	msr	BASEPRI, r3
 8011d2e:	f3bf 8f6f 	isb	sy
 8011d32:	f3bf 8f4f 	dsb	sy
 8011d36:	607b      	str	r3, [r7, #4]
 8011d38:	e7fe      	b.n	8011d38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8011d3a:	4b0a      	ldr	r3, [pc, #40]	; (8011d64 <vPortExitCritical+0x4c>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	3b01      	subs	r3, #1
 8011d40:	4a08      	ldr	r2, [pc, #32]	; (8011d64 <vPortExitCritical+0x4c>)
 8011d42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011d44:	4b07      	ldr	r3, [pc, #28]	; (8011d64 <vPortExitCritical+0x4c>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d104      	bne.n	8011d56 <vPortExitCritical+0x3e>
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011d56:	bf00      	nop
 8011d58:	370c      	adds	r7, #12
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d60:	4770      	bx	lr
 8011d62:	bf00      	nop
 8011d64:	200000c4 	.word	0x200000c4
	...

08011d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011d70:	f3ef 8009 	mrs	r0, PSP
 8011d74:	f3bf 8f6f 	isb	sy
 8011d78:	4b15      	ldr	r3, [pc, #84]	; (8011dd0 <pxCurrentTCBConst>)
 8011d7a:	681a      	ldr	r2, [r3, #0]
 8011d7c:	f01e 0f10 	tst.w	lr, #16
 8011d80:	bf08      	it	eq
 8011d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d8a:	6010      	str	r0, [r2, #0]
 8011d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011d94:	f380 8811 	msr	BASEPRI, r0
 8011d98:	f3bf 8f4f 	dsb	sy
 8011d9c:	f3bf 8f6f 	isb	sy
 8011da0:	f000 fbc2 	bl	8012528 <vTaskSwitchContext>
 8011da4:	f04f 0000 	mov.w	r0, #0
 8011da8:	f380 8811 	msr	BASEPRI, r0
 8011dac:	bc09      	pop	{r0, r3}
 8011dae:	6819      	ldr	r1, [r3, #0]
 8011db0:	6808      	ldr	r0, [r1, #0]
 8011db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db6:	f01e 0f10 	tst.w	lr, #16
 8011dba:	bf08      	it	eq
 8011dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011dc0:	f380 8809 	msr	PSP, r0
 8011dc4:	f3bf 8f6f 	isb	sy
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	f3af 8000 	nop.w

08011dd0 <pxCurrentTCBConst>:
 8011dd0:	20008898 	.word	0x20008898
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011dd4:	bf00      	nop
 8011dd6:	bf00      	nop

08011dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8011dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de2:	f383 8811 	msr	BASEPRI, r3
 8011de6:	f3bf 8f6f 	isb	sy
 8011dea:	f3bf 8f4f 	dsb	sy
 8011dee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011df0:	f000 fade 	bl	80123b0 <xTaskIncrementTick>
 8011df4:	4603      	mov	r3, r0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d003      	beq.n	8011e02 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011dfa:	4b06      	ldr	r3, [pc, #24]	; (8011e14 <xPortSysTickHandler+0x3c>)
 8011dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e00:	601a      	str	r2, [r3, #0]
 8011e02:	2300      	movs	r3, #0
 8011e04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011e0c:	bf00      	nop
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	e000ed04 	.word	0xe000ed04

08011e18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011e18:	b480      	push	{r7}
 8011e1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011e1c:	4b0b      	ldr	r3, [pc, #44]	; (8011e4c <vPortSetupTimerInterrupt+0x34>)
 8011e1e:	2200      	movs	r2, #0
 8011e20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011e22:	4b0b      	ldr	r3, [pc, #44]	; (8011e50 <vPortSetupTimerInterrupt+0x38>)
 8011e24:	2200      	movs	r2, #0
 8011e26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011e28:	4b0a      	ldr	r3, [pc, #40]	; (8011e54 <vPortSetupTimerInterrupt+0x3c>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	4a0a      	ldr	r2, [pc, #40]	; (8011e58 <vPortSetupTimerInterrupt+0x40>)
 8011e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8011e32:	099b      	lsrs	r3, r3, #6
 8011e34:	4a09      	ldr	r2, [pc, #36]	; (8011e5c <vPortSetupTimerInterrupt+0x44>)
 8011e36:	3b01      	subs	r3, #1
 8011e38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011e3a:	4b04      	ldr	r3, [pc, #16]	; (8011e4c <vPortSetupTimerInterrupt+0x34>)
 8011e3c:	2207      	movs	r2, #7
 8011e3e:	601a      	str	r2, [r3, #0]
}
 8011e40:	bf00      	nop
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr
 8011e4a:	bf00      	nop
 8011e4c:	e000e010 	.word	0xe000e010
 8011e50:	e000e018 	.word	0xe000e018
 8011e54:	20000010 	.word	0x20000010
 8011e58:	10624dd3 	.word	0x10624dd3
 8011e5c:	e000e014 	.word	0xe000e014

08011e60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011e60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011e70 <vPortEnableVFP+0x10>
 8011e64:	6801      	ldr	r1, [r0, #0]
 8011e66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011e6a:	6001      	str	r1, [r0, #0]
 8011e6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011e6e:	bf00      	nop
 8011e70:	e000ed88 	.word	0xe000ed88

08011e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b08e      	sub	sp, #56	; 0x38
 8011e78:	af04      	add	r7, sp, #16
 8011e7a:	60f8      	str	r0, [r7, #12]
 8011e7c:	60b9      	str	r1, [r7, #8]
 8011e7e:	607a      	str	r2, [r7, #4]
 8011e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d109      	bne.n	8011e9c <xTaskCreateStatic+0x28>
	__asm volatile
 8011e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8c:	f383 8811 	msr	BASEPRI, r3
 8011e90:	f3bf 8f6f 	isb	sy
 8011e94:	f3bf 8f4f 	dsb	sy
 8011e98:	623b      	str	r3, [r7, #32]
 8011e9a:	e7fe      	b.n	8011e9a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d109      	bne.n	8011eb6 <xTaskCreateStatic+0x42>
 8011ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea6:	f383 8811 	msr	BASEPRI, r3
 8011eaa:	f3bf 8f6f 	isb	sy
 8011eae:	f3bf 8f4f 	dsb	sy
 8011eb2:	61fb      	str	r3, [r7, #28]
 8011eb4:	e7fe      	b.n	8011eb4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011eb6:	2354      	movs	r3, #84	; 0x54
 8011eb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	2b54      	cmp	r3, #84	; 0x54
 8011ebe:	d009      	beq.n	8011ed4 <xTaskCreateStatic+0x60>
 8011ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec4:	f383 8811 	msr	BASEPRI, r3
 8011ec8:	f3bf 8f6f 	isb	sy
 8011ecc:	f3bf 8f4f 	dsb	sy
 8011ed0:	61bb      	str	r3, [r7, #24]
 8011ed2:	e7fe      	b.n	8011ed2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d01e      	beq.n	8011f18 <xTaskCreateStatic+0xa4>
 8011eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d01b      	beq.n	8011f18 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ee8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eec:	2202      	movs	r2, #2
 8011eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	9303      	str	r3, [sp, #12]
 8011ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef8:	9302      	str	r3, [sp, #8]
 8011efa:	f107 0314 	add.w	r3, r7, #20
 8011efe:	9301      	str	r3, [sp, #4]
 8011f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	68b9      	ldr	r1, [r7, #8]
 8011f0a:	68f8      	ldr	r0, [r7, #12]
 8011f0c:	f000 f850 	bl	8011fb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f12:	f000 f8cb 	bl	80120ac <prvAddNewTaskToReadyList>
 8011f16:	e001      	b.n	8011f1c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011f1c:	697b      	ldr	r3, [r7, #20]
	}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3728      	adds	r7, #40	; 0x28
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}

08011f26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011f26:	b580      	push	{r7, lr}
 8011f28:	b08c      	sub	sp, #48	; 0x30
 8011f2a:	af04      	add	r7, sp, #16
 8011f2c:	60f8      	str	r0, [r7, #12]
 8011f2e:	60b9      	str	r1, [r7, #8]
 8011f30:	603b      	str	r3, [r7, #0]
 8011f32:	4613      	mov	r3, r2
 8011f34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f36:	88fb      	ldrh	r3, [r7, #6]
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7ff fb46 	bl	80115cc <pvPortMalloc>
 8011f40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011f42:	697b      	ldr	r3, [r7, #20]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d00e      	beq.n	8011f66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8011f48:	2054      	movs	r0, #84	; 0x54
 8011f4a:	f7ff fb3f 	bl	80115cc <pvPortMalloc>
 8011f4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d003      	beq.n	8011f5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	697a      	ldr	r2, [r7, #20]
 8011f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8011f5c:	e005      	b.n	8011f6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011f5e:	6978      	ldr	r0, [r7, #20]
 8011f60:	f7ff fbf6 	bl	8011750 <vPortFree>
 8011f64:	e001      	b.n	8011f6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011f66:	2300      	movs	r3, #0
 8011f68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d017      	beq.n	8011fa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011f70:	69fb      	ldr	r3, [r7, #28]
 8011f72:	2200      	movs	r2, #0
 8011f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011f78:	88fa      	ldrh	r2, [r7, #6]
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	9303      	str	r3, [sp, #12]
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	9302      	str	r3, [sp, #8]
 8011f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f84:	9301      	str	r3, [sp, #4]
 8011f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f88:	9300      	str	r3, [sp, #0]
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	68b9      	ldr	r1, [r7, #8]
 8011f8e:	68f8      	ldr	r0, [r7, #12]
 8011f90:	f000 f80e 	bl	8011fb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f94:	69f8      	ldr	r0, [r7, #28]
 8011f96:	f000 f889 	bl	80120ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	61bb      	str	r3, [r7, #24]
 8011f9e:	e002      	b.n	8011fa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011fa6:	69bb      	ldr	r3, [r7, #24]
	}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3720      	adds	r7, #32
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b088      	sub	sp, #32
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	60f8      	str	r0, [r7, #12]
 8011fb8:	60b9      	str	r1, [r7, #8]
 8011fba:	607a      	str	r2, [r7, #4]
 8011fbc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011fc8:	3b01      	subs	r3, #1
 8011fca:	009b      	lsls	r3, r3, #2
 8011fcc:	4413      	add	r3, r2
 8011fce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011fd0:	69bb      	ldr	r3, [r7, #24]
 8011fd2:	f023 0307 	bic.w	r3, r3, #7
 8011fd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011fd8:	69bb      	ldr	r3, [r7, #24]
 8011fda:	f003 0307 	and.w	r3, r3, #7
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d009      	beq.n	8011ff6 <prvInitialiseNewTask+0x46>
 8011fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe6:	f383 8811 	msr	BASEPRI, r3
 8011fea:	f3bf 8f6f 	isb	sy
 8011fee:	f3bf 8f4f 	dsb	sy
 8011ff2:	617b      	str	r3, [r7, #20]
 8011ff4:	e7fe      	b.n	8011ff4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	61fb      	str	r3, [r7, #28]
 8011ffa:	e012      	b.n	8012022 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011ffc:	68ba      	ldr	r2, [r7, #8]
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	4413      	add	r3, r2
 8012002:	7819      	ldrb	r1, [r3, #0]
 8012004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	4413      	add	r3, r2
 801200a:	3334      	adds	r3, #52	; 0x34
 801200c:	460a      	mov	r2, r1
 801200e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8012010:	68ba      	ldr	r2, [r7, #8]
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	4413      	add	r3, r2
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d006      	beq.n	801202a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801201c:	69fb      	ldr	r3, [r7, #28]
 801201e:	3301      	adds	r3, #1
 8012020:	61fb      	str	r3, [r7, #28]
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	2b0f      	cmp	r3, #15
 8012026:	d9e9      	bls.n	8011ffc <prvInitialiseNewTask+0x4c>
 8012028:	e000      	b.n	801202c <prvInitialiseNewTask+0x7c>
		{
			break;
 801202a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202e:	2200      	movs	r2, #0
 8012030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012036:	2b06      	cmp	r3, #6
 8012038:	d901      	bls.n	801203e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801203a:	2306      	movs	r3, #6
 801203c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012042:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012048:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801204c:	2200      	movs	r2, #0
 801204e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012052:	3304      	adds	r3, #4
 8012054:	4618      	mov	r0, r3
 8012056:	f7ff fcaf 	bl	80119b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205c:	3318      	adds	r3, #24
 801205e:	4618      	mov	r0, r3
 8012060:	f7ff fcaa 	bl	80119b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012068:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206c:	f1c3 0207 	rsb	r2, r3, #7
 8012070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012072:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012078:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801207c:	2200      	movs	r2, #0
 801207e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012082:	2200      	movs	r2, #0
 8012084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012088:	683a      	ldr	r2, [r7, #0]
 801208a:	68f9      	ldr	r1, [r7, #12]
 801208c:	69b8      	ldr	r0, [r7, #24]
 801208e:	f7ff fcef 	bl	8011a70 <pxPortInitialiseStack>
 8012092:	4602      	mov	r2, r0
 8012094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012096:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209a:	2b00      	cmp	r3, #0
 801209c:	d002      	beq.n	80120a4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120a4:	bf00      	nop
 80120a6:	3720      	adds	r7, #32
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80120b4:	f7ff fe02 	bl	8011cbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80120b8:	4b2a      	ldr	r3, [pc, #168]	; (8012164 <prvAddNewTaskToReadyList+0xb8>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	3301      	adds	r3, #1
 80120be:	4a29      	ldr	r2, [pc, #164]	; (8012164 <prvAddNewTaskToReadyList+0xb8>)
 80120c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80120c2:	4b29      	ldr	r3, [pc, #164]	; (8012168 <prvAddNewTaskToReadyList+0xbc>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d109      	bne.n	80120de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80120ca:	4a27      	ldr	r2, [pc, #156]	; (8012168 <prvAddNewTaskToReadyList+0xbc>)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80120d0:	4b24      	ldr	r3, [pc, #144]	; (8012164 <prvAddNewTaskToReadyList+0xb8>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d110      	bne.n	80120fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80120d8:	f000 fa98 	bl	801260c <prvInitialiseTaskLists>
 80120dc:	e00d      	b.n	80120fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80120de:	4b23      	ldr	r3, [pc, #140]	; (801216c <prvAddNewTaskToReadyList+0xc0>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d109      	bne.n	80120fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80120e6:	4b20      	ldr	r3, [pc, #128]	; (8012168 <prvAddNewTaskToReadyList+0xbc>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d802      	bhi.n	80120fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80120f4:	4a1c      	ldr	r2, [pc, #112]	; (8012168 <prvAddNewTaskToReadyList+0xbc>)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80120fa:	4b1d      	ldr	r3, [pc, #116]	; (8012170 <prvAddNewTaskToReadyList+0xc4>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	3301      	adds	r3, #1
 8012100:	4a1b      	ldr	r2, [pc, #108]	; (8012170 <prvAddNewTaskToReadyList+0xc4>)
 8012102:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012108:	2201      	movs	r2, #1
 801210a:	409a      	lsls	r2, r3
 801210c:	4b19      	ldr	r3, [pc, #100]	; (8012174 <prvAddNewTaskToReadyList+0xc8>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4313      	orrs	r3, r2
 8012112:	4a18      	ldr	r2, [pc, #96]	; (8012174 <prvAddNewTaskToReadyList+0xc8>)
 8012114:	6013      	str	r3, [r2, #0]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801211a:	4613      	mov	r3, r2
 801211c:	009b      	lsls	r3, r3, #2
 801211e:	4413      	add	r3, r2
 8012120:	009b      	lsls	r3, r3, #2
 8012122:	4a15      	ldr	r2, [pc, #84]	; (8012178 <prvAddNewTaskToReadyList+0xcc>)
 8012124:	441a      	add	r2, r3
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	3304      	adds	r3, #4
 801212a:	4619      	mov	r1, r3
 801212c:	4610      	mov	r0, r2
 801212e:	f7ff fc50 	bl	80119d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012132:	f7ff fdf1 	bl	8011d18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012136:	4b0d      	ldr	r3, [pc, #52]	; (801216c <prvAddNewTaskToReadyList+0xc0>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d00e      	beq.n	801215c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801213e:	4b0a      	ldr	r3, [pc, #40]	; (8012168 <prvAddNewTaskToReadyList+0xbc>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012148:	429a      	cmp	r2, r3
 801214a:	d207      	bcs.n	801215c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801214c:	4b0b      	ldr	r3, [pc, #44]	; (801217c <prvAddNewTaskToReadyList+0xd0>)
 801214e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012152:	601a      	str	r2, [r3, #0]
 8012154:	f3bf 8f4f 	dsb	sy
 8012158:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801215c:	bf00      	nop
 801215e:	3708      	adds	r7, #8
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	20008998 	.word	0x20008998
 8012168:	20008898 	.word	0x20008898
 801216c:	200089a4 	.word	0x200089a4
 8012170:	200089b4 	.word	0x200089b4
 8012174:	200089a0 	.word	0x200089a0
 8012178:	2000889c 	.word	0x2000889c
 801217c:	e000ed04 	.word	0xe000ed04

08012180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b08a      	sub	sp, #40	; 0x28
 8012184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012186:	2300      	movs	r3, #0
 8012188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801218a:	2300      	movs	r3, #0
 801218c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801218e:	463a      	mov	r2, r7
 8012190:	1d39      	adds	r1, r7, #4
 8012192:	f107 0308 	add.w	r3, r7, #8
 8012196:	4618      	mov	r0, r3
 8012198:	f000 fb16 	bl	80127c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801219c:	6839      	ldr	r1, [r7, #0]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	9202      	str	r2, [sp, #8]
 80121a4:	9301      	str	r3, [sp, #4]
 80121a6:	2300      	movs	r3, #0
 80121a8:	9300      	str	r3, [sp, #0]
 80121aa:	2300      	movs	r3, #0
 80121ac:	460a      	mov	r2, r1
 80121ae:	491d      	ldr	r1, [pc, #116]	; (8012224 <vTaskStartScheduler+0xa4>)
 80121b0:	481d      	ldr	r0, [pc, #116]	; (8012228 <vTaskStartScheduler+0xa8>)
 80121b2:	f7ff fe5f 	bl	8011e74 <xTaskCreateStatic>
 80121b6:	4602      	mov	r2, r0
 80121b8:	4b1c      	ldr	r3, [pc, #112]	; (801222c <vTaskStartScheduler+0xac>)
 80121ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80121bc:	4b1b      	ldr	r3, [pc, #108]	; (801222c <vTaskStartScheduler+0xac>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d002      	beq.n	80121ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80121c4:	2301      	movs	r3, #1
 80121c6:	617b      	str	r3, [r7, #20]
 80121c8:	e001      	b.n	80121ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80121ca:	2300      	movs	r3, #0
 80121cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d115      	bne.n	8012200 <vTaskStartScheduler+0x80>
 80121d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d8:	f383 8811 	msr	BASEPRI, r3
 80121dc:	f3bf 8f6f 	isb	sy
 80121e0:	f3bf 8f4f 	dsb	sy
 80121e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80121e6:	4b12      	ldr	r3, [pc, #72]	; (8012230 <vTaskStartScheduler+0xb0>)
 80121e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80121ee:	4b11      	ldr	r3, [pc, #68]	; (8012234 <vTaskStartScheduler+0xb4>)
 80121f0:	2201      	movs	r2, #1
 80121f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80121f4:	4b10      	ldr	r3, [pc, #64]	; (8012238 <vTaskStartScheduler+0xb8>)
 80121f6:	2200      	movs	r2, #0
 80121f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80121fa:	f7ff fcc1 	bl	8011b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80121fe:	e00d      	b.n	801221c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012206:	d109      	bne.n	801221c <vTaskStartScheduler+0x9c>
 8012208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220c:	f383 8811 	msr	BASEPRI, r3
 8012210:	f3bf 8f6f 	isb	sy
 8012214:	f3bf 8f4f 	dsb	sy
 8012218:	60fb      	str	r3, [r7, #12]
 801221a:	e7fe      	b.n	801221a <vTaskStartScheduler+0x9a>
}
 801221c:	bf00      	nop
 801221e:	3718      	adds	r7, #24
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	08015300 	.word	0x08015300
 8012228:	080125dd 	.word	0x080125dd
 801222c:	200089bc 	.word	0x200089bc
 8012230:	200089b8 	.word	0x200089b8
 8012234:	200089a4 	.word	0x200089a4
 8012238:	2000899c 	.word	0x2000899c

0801223c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801223c:	b480      	push	{r7}
 801223e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012240:	4b04      	ldr	r3, [pc, #16]	; (8012254 <vTaskSuspendAll+0x18>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	3301      	adds	r3, #1
 8012246:	4a03      	ldr	r2, [pc, #12]	; (8012254 <vTaskSuspendAll+0x18>)
 8012248:	6013      	str	r3, [r2, #0]
}
 801224a:	bf00      	nop
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr
 8012254:	200089c0 	.word	0x200089c0

08012258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b084      	sub	sp, #16
 801225c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801225e:	2300      	movs	r3, #0
 8012260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012262:	2300      	movs	r3, #0
 8012264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012266:	4b41      	ldr	r3, [pc, #260]	; (801236c <xTaskResumeAll+0x114>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d109      	bne.n	8012282 <xTaskResumeAll+0x2a>
 801226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012272:	f383 8811 	msr	BASEPRI, r3
 8012276:	f3bf 8f6f 	isb	sy
 801227a:	f3bf 8f4f 	dsb	sy
 801227e:	603b      	str	r3, [r7, #0]
 8012280:	e7fe      	b.n	8012280 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012282:	f7ff fd1b 	bl	8011cbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012286:	4b39      	ldr	r3, [pc, #228]	; (801236c <xTaskResumeAll+0x114>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	3b01      	subs	r3, #1
 801228c:	4a37      	ldr	r2, [pc, #220]	; (801236c <xTaskResumeAll+0x114>)
 801228e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012290:	4b36      	ldr	r3, [pc, #216]	; (801236c <xTaskResumeAll+0x114>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d161      	bne.n	801235c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012298:	4b35      	ldr	r3, [pc, #212]	; (8012370 <xTaskResumeAll+0x118>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d05d      	beq.n	801235c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80122a0:	e02e      	b.n	8012300 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80122a2:	4b34      	ldr	r3, [pc, #208]	; (8012374 <xTaskResumeAll+0x11c>)
 80122a4:	68db      	ldr	r3, [r3, #12]
 80122a6:	68db      	ldr	r3, [r3, #12]
 80122a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	3318      	adds	r3, #24
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7ff fbb3 	bl	8011a1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	3304      	adds	r3, #4
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7ff fbae 	bl	8011a1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122c2:	2201      	movs	r2, #1
 80122c4:	409a      	lsls	r2, r3
 80122c6:	4b2c      	ldr	r3, [pc, #176]	; (8012378 <xTaskResumeAll+0x120>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	4313      	orrs	r3, r2
 80122cc:	4a2a      	ldr	r2, [pc, #168]	; (8012378 <xTaskResumeAll+0x120>)
 80122ce:	6013      	str	r3, [r2, #0]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122d4:	4613      	mov	r3, r2
 80122d6:	009b      	lsls	r3, r3, #2
 80122d8:	4413      	add	r3, r2
 80122da:	009b      	lsls	r3, r3, #2
 80122dc:	4a27      	ldr	r2, [pc, #156]	; (801237c <xTaskResumeAll+0x124>)
 80122de:	441a      	add	r2, r3
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	3304      	adds	r3, #4
 80122e4:	4619      	mov	r1, r3
 80122e6:	4610      	mov	r0, r2
 80122e8:	f7ff fb73 	bl	80119d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122f0:	4b23      	ldr	r3, [pc, #140]	; (8012380 <xTaskResumeAll+0x128>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d302      	bcc.n	8012300 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80122fa:	4b22      	ldr	r3, [pc, #136]	; (8012384 <xTaskResumeAll+0x12c>)
 80122fc:	2201      	movs	r2, #1
 80122fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012300:	4b1c      	ldr	r3, [pc, #112]	; (8012374 <xTaskResumeAll+0x11c>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d1cc      	bne.n	80122a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d001      	beq.n	8012312 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801230e:	f000 fa17 	bl	8012740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012312:	4b1d      	ldr	r3, [pc, #116]	; (8012388 <xTaskResumeAll+0x130>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d010      	beq.n	8012340 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801231e:	f000 f847 	bl	80123b0 <xTaskIncrementTick>
 8012322:	4603      	mov	r3, r0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d002      	beq.n	801232e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8012328:	4b16      	ldr	r3, [pc, #88]	; (8012384 <xTaskResumeAll+0x12c>)
 801232a:	2201      	movs	r2, #1
 801232c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	3b01      	subs	r3, #1
 8012332:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d1f1      	bne.n	801231e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 801233a:	4b13      	ldr	r3, [pc, #76]	; (8012388 <xTaskResumeAll+0x130>)
 801233c:	2200      	movs	r2, #0
 801233e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012340:	4b10      	ldr	r3, [pc, #64]	; (8012384 <xTaskResumeAll+0x12c>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d009      	beq.n	801235c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012348:	2301      	movs	r3, #1
 801234a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801234c:	4b0f      	ldr	r3, [pc, #60]	; (801238c <xTaskResumeAll+0x134>)
 801234e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012352:	601a      	str	r2, [r3, #0]
 8012354:	f3bf 8f4f 	dsb	sy
 8012358:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801235c:	f7ff fcdc 	bl	8011d18 <vPortExitCritical>

	return xAlreadyYielded;
 8012360:	68bb      	ldr	r3, [r7, #8]
}
 8012362:	4618      	mov	r0, r3
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	200089c0 	.word	0x200089c0
 8012370:	20008998 	.word	0x20008998
 8012374:	20008958 	.word	0x20008958
 8012378:	200089a0 	.word	0x200089a0
 801237c:	2000889c 	.word	0x2000889c
 8012380:	20008898 	.word	0x20008898
 8012384:	200089ac 	.word	0x200089ac
 8012388:	200089a8 	.word	0x200089a8
 801238c:	e000ed04 	.word	0xe000ed04

08012390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012390:	b480      	push	{r7}
 8012392:	b083      	sub	sp, #12
 8012394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012396:	4b05      	ldr	r3, [pc, #20]	; (80123ac <xTaskGetTickCount+0x1c>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801239c:	687b      	ldr	r3, [r7, #4]
}
 801239e:	4618      	mov	r0, r3
 80123a0:	370c      	adds	r7, #12
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop
 80123ac:	2000899c 	.word	0x2000899c

080123b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b086      	sub	sp, #24
 80123b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80123b6:	2300      	movs	r3, #0
 80123b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123ba:	4b50      	ldr	r3, [pc, #320]	; (80124fc <xTaskIncrementTick+0x14c>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	f040 808c 	bne.w	80124dc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80123c4:	4b4e      	ldr	r3, [pc, #312]	; (8012500 <xTaskIncrementTick+0x150>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	3301      	adds	r3, #1
 80123ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80123cc:	4a4c      	ldr	r2, [pc, #304]	; (8012500 <xTaskIncrementTick+0x150>)
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d11f      	bne.n	8012418 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80123d8:	4b4a      	ldr	r3, [pc, #296]	; (8012504 <xTaskIncrementTick+0x154>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d009      	beq.n	80123f6 <xTaskIncrementTick+0x46>
 80123e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e6:	f383 8811 	msr	BASEPRI, r3
 80123ea:	f3bf 8f6f 	isb	sy
 80123ee:	f3bf 8f4f 	dsb	sy
 80123f2:	603b      	str	r3, [r7, #0]
 80123f4:	e7fe      	b.n	80123f4 <xTaskIncrementTick+0x44>
 80123f6:	4b43      	ldr	r3, [pc, #268]	; (8012504 <xTaskIncrementTick+0x154>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	60fb      	str	r3, [r7, #12]
 80123fc:	4b42      	ldr	r3, [pc, #264]	; (8012508 <xTaskIncrementTick+0x158>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4a40      	ldr	r2, [pc, #256]	; (8012504 <xTaskIncrementTick+0x154>)
 8012402:	6013      	str	r3, [r2, #0]
 8012404:	4a40      	ldr	r2, [pc, #256]	; (8012508 <xTaskIncrementTick+0x158>)
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	6013      	str	r3, [r2, #0]
 801240a:	4b40      	ldr	r3, [pc, #256]	; (801250c <xTaskIncrementTick+0x15c>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	3301      	adds	r3, #1
 8012410:	4a3e      	ldr	r2, [pc, #248]	; (801250c <xTaskIncrementTick+0x15c>)
 8012412:	6013      	str	r3, [r2, #0]
 8012414:	f000 f994 	bl	8012740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012418:	4b3d      	ldr	r3, [pc, #244]	; (8012510 <xTaskIncrementTick+0x160>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	693a      	ldr	r2, [r7, #16]
 801241e:	429a      	cmp	r2, r3
 8012420:	d34d      	bcc.n	80124be <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012422:	4b38      	ldr	r3, [pc, #224]	; (8012504 <xTaskIncrementTick+0x154>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d101      	bne.n	8012430 <xTaskIncrementTick+0x80>
 801242c:	2301      	movs	r3, #1
 801242e:	e000      	b.n	8012432 <xTaskIncrementTick+0x82>
 8012430:	2300      	movs	r3, #0
 8012432:	2b00      	cmp	r3, #0
 8012434:	d004      	beq.n	8012440 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012436:	4b36      	ldr	r3, [pc, #216]	; (8012510 <xTaskIncrementTick+0x160>)
 8012438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801243c:	601a      	str	r2, [r3, #0]
					break;
 801243e:	e03e      	b.n	80124be <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012440:	4b30      	ldr	r3, [pc, #192]	; (8012504 <xTaskIncrementTick+0x154>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	68db      	ldr	r3, [r3, #12]
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012450:	693a      	ldr	r2, [r7, #16]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	429a      	cmp	r2, r3
 8012456:	d203      	bcs.n	8012460 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012458:	4a2d      	ldr	r2, [pc, #180]	; (8012510 <xTaskIncrementTick+0x160>)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6013      	str	r3, [r2, #0]
						break;
 801245e:	e02e      	b.n	80124be <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	3304      	adds	r3, #4
 8012464:	4618      	mov	r0, r3
 8012466:	f7ff fad8 	bl	8011a1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801246e:	2b00      	cmp	r3, #0
 8012470:	d004      	beq.n	801247c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	3318      	adds	r3, #24
 8012476:	4618      	mov	r0, r3
 8012478:	f7ff facf 	bl	8011a1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012480:	2201      	movs	r2, #1
 8012482:	409a      	lsls	r2, r3
 8012484:	4b23      	ldr	r3, [pc, #140]	; (8012514 <xTaskIncrementTick+0x164>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4313      	orrs	r3, r2
 801248a:	4a22      	ldr	r2, [pc, #136]	; (8012514 <xTaskIncrementTick+0x164>)
 801248c:	6013      	str	r3, [r2, #0]
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012492:	4613      	mov	r3, r2
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	4413      	add	r3, r2
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	4a1f      	ldr	r2, [pc, #124]	; (8012518 <xTaskIncrementTick+0x168>)
 801249c:	441a      	add	r2, r3
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	3304      	adds	r3, #4
 80124a2:	4619      	mov	r1, r3
 80124a4:	4610      	mov	r0, r2
 80124a6:	f7ff fa94 	bl	80119d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ae:	4b1b      	ldr	r3, [pc, #108]	; (801251c <xTaskIncrementTick+0x16c>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d3b4      	bcc.n	8012422 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80124b8:	2301      	movs	r3, #1
 80124ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80124bc:	e7b1      	b.n	8012422 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80124be:	4b17      	ldr	r3, [pc, #92]	; (801251c <xTaskIncrementTick+0x16c>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124c4:	4914      	ldr	r1, [pc, #80]	; (8012518 <xTaskIncrementTick+0x168>)
 80124c6:	4613      	mov	r3, r2
 80124c8:	009b      	lsls	r3, r3, #2
 80124ca:	4413      	add	r3, r2
 80124cc:	009b      	lsls	r3, r3, #2
 80124ce:	440b      	add	r3, r1
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	2b01      	cmp	r3, #1
 80124d4:	d907      	bls.n	80124e6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80124d6:	2301      	movs	r3, #1
 80124d8:	617b      	str	r3, [r7, #20]
 80124da:	e004      	b.n	80124e6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80124dc:	4b10      	ldr	r3, [pc, #64]	; (8012520 <xTaskIncrementTick+0x170>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	3301      	adds	r3, #1
 80124e2:	4a0f      	ldr	r2, [pc, #60]	; (8012520 <xTaskIncrementTick+0x170>)
 80124e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80124e6:	4b0f      	ldr	r3, [pc, #60]	; (8012524 <xTaskIncrementTick+0x174>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d001      	beq.n	80124f2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80124ee:	2301      	movs	r3, #1
 80124f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80124f2:	697b      	ldr	r3, [r7, #20]
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	3718      	adds	r7, #24
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	200089c0 	.word	0x200089c0
 8012500:	2000899c 	.word	0x2000899c
 8012504:	20008950 	.word	0x20008950
 8012508:	20008954 	.word	0x20008954
 801250c:	200089b0 	.word	0x200089b0
 8012510:	200089b8 	.word	0x200089b8
 8012514:	200089a0 	.word	0x200089a0
 8012518:	2000889c 	.word	0x2000889c
 801251c:	20008898 	.word	0x20008898
 8012520:	200089a8 	.word	0x200089a8
 8012524:	200089ac 	.word	0x200089ac

08012528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012528:	b480      	push	{r7}
 801252a:	b087      	sub	sp, #28
 801252c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801252e:	4b26      	ldr	r3, [pc, #152]	; (80125c8 <vTaskSwitchContext+0xa0>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d003      	beq.n	801253e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012536:	4b25      	ldr	r3, [pc, #148]	; (80125cc <vTaskSwitchContext+0xa4>)
 8012538:	2201      	movs	r2, #1
 801253a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801253c:	e03e      	b.n	80125bc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 801253e:	4b23      	ldr	r3, [pc, #140]	; (80125cc <vTaskSwitchContext+0xa4>)
 8012540:	2200      	movs	r2, #0
 8012542:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012544:	4b22      	ldr	r3, [pc, #136]	; (80125d0 <vTaskSwitchContext+0xa8>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	fab3 f383 	clz	r3, r3
 8012550:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012552:	7afb      	ldrb	r3, [r7, #11]
 8012554:	f1c3 031f 	rsb	r3, r3, #31
 8012558:	617b      	str	r3, [r7, #20]
 801255a:	491e      	ldr	r1, [pc, #120]	; (80125d4 <vTaskSwitchContext+0xac>)
 801255c:	697a      	ldr	r2, [r7, #20]
 801255e:	4613      	mov	r3, r2
 8012560:	009b      	lsls	r3, r3, #2
 8012562:	4413      	add	r3, r2
 8012564:	009b      	lsls	r3, r3, #2
 8012566:	440b      	add	r3, r1
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d109      	bne.n	8012582 <vTaskSwitchContext+0x5a>
	__asm volatile
 801256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012572:	f383 8811 	msr	BASEPRI, r3
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	f3bf 8f4f 	dsb	sy
 801257e:	607b      	str	r3, [r7, #4]
 8012580:	e7fe      	b.n	8012580 <vTaskSwitchContext+0x58>
 8012582:	697a      	ldr	r2, [r7, #20]
 8012584:	4613      	mov	r3, r2
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	4413      	add	r3, r2
 801258a:	009b      	lsls	r3, r3, #2
 801258c:	4a11      	ldr	r2, [pc, #68]	; (80125d4 <vTaskSwitchContext+0xac>)
 801258e:	4413      	add	r3, r2
 8012590:	613b      	str	r3, [r7, #16]
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	685a      	ldr	r2, [r3, #4]
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	605a      	str	r2, [r3, #4]
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	685a      	ldr	r2, [r3, #4]
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	3308      	adds	r3, #8
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d104      	bne.n	80125b2 <vTaskSwitchContext+0x8a>
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	685a      	ldr	r2, [r3, #4]
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	605a      	str	r2, [r3, #4]
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	4a07      	ldr	r2, [pc, #28]	; (80125d8 <vTaskSwitchContext+0xb0>)
 80125ba:	6013      	str	r3, [r2, #0]
}
 80125bc:	bf00      	nop
 80125be:	371c      	adds	r7, #28
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr
 80125c8:	200089c0 	.word	0x200089c0
 80125cc:	200089ac 	.word	0x200089ac
 80125d0:	200089a0 	.word	0x200089a0
 80125d4:	2000889c 	.word	0x2000889c
 80125d8:	20008898 	.word	0x20008898

080125dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80125e4:	f000 f852 	bl	801268c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80125e8:	4b06      	ldr	r3, [pc, #24]	; (8012604 <prvIdleTask+0x28>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d9f9      	bls.n	80125e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80125f0:	4b05      	ldr	r3, [pc, #20]	; (8012608 <prvIdleTask+0x2c>)
 80125f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125f6:	601a      	str	r2, [r3, #0]
 80125f8:	f3bf 8f4f 	dsb	sy
 80125fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012600:	e7f0      	b.n	80125e4 <prvIdleTask+0x8>
 8012602:	bf00      	nop
 8012604:	2000889c 	.word	0x2000889c
 8012608:	e000ed04 	.word	0xe000ed04

0801260c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012612:	2300      	movs	r3, #0
 8012614:	607b      	str	r3, [r7, #4]
 8012616:	e00c      	b.n	8012632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	4613      	mov	r3, r2
 801261c:	009b      	lsls	r3, r3, #2
 801261e:	4413      	add	r3, r2
 8012620:	009b      	lsls	r3, r3, #2
 8012622:	4a12      	ldr	r2, [pc, #72]	; (801266c <prvInitialiseTaskLists+0x60>)
 8012624:	4413      	add	r3, r2
 8012626:	4618      	mov	r0, r3
 8012628:	f7ff f9a6 	bl	8011978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	3301      	adds	r3, #1
 8012630:	607b      	str	r3, [r7, #4]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2b06      	cmp	r3, #6
 8012636:	d9ef      	bls.n	8012618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012638:	480d      	ldr	r0, [pc, #52]	; (8012670 <prvInitialiseTaskLists+0x64>)
 801263a:	f7ff f99d 	bl	8011978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801263e:	480d      	ldr	r0, [pc, #52]	; (8012674 <prvInitialiseTaskLists+0x68>)
 8012640:	f7ff f99a 	bl	8011978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012644:	480c      	ldr	r0, [pc, #48]	; (8012678 <prvInitialiseTaskLists+0x6c>)
 8012646:	f7ff f997 	bl	8011978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801264a:	480c      	ldr	r0, [pc, #48]	; (801267c <prvInitialiseTaskLists+0x70>)
 801264c:	f7ff f994 	bl	8011978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012650:	480b      	ldr	r0, [pc, #44]	; (8012680 <prvInitialiseTaskLists+0x74>)
 8012652:	f7ff f991 	bl	8011978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012656:	4b0b      	ldr	r3, [pc, #44]	; (8012684 <prvInitialiseTaskLists+0x78>)
 8012658:	4a05      	ldr	r2, [pc, #20]	; (8012670 <prvInitialiseTaskLists+0x64>)
 801265a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801265c:	4b0a      	ldr	r3, [pc, #40]	; (8012688 <prvInitialiseTaskLists+0x7c>)
 801265e:	4a05      	ldr	r2, [pc, #20]	; (8012674 <prvInitialiseTaskLists+0x68>)
 8012660:	601a      	str	r2, [r3, #0]
}
 8012662:	bf00      	nop
 8012664:	3708      	adds	r7, #8
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	2000889c 	.word	0x2000889c
 8012670:	20008928 	.word	0x20008928
 8012674:	2000893c 	.word	0x2000893c
 8012678:	20008958 	.word	0x20008958
 801267c:	2000896c 	.word	0x2000896c
 8012680:	20008984 	.word	0x20008984
 8012684:	20008950 	.word	0x20008950
 8012688:	20008954 	.word	0x20008954

0801268c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012692:	e019      	b.n	80126c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012694:	f7ff fb12 	bl	8011cbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012698:	4b0f      	ldr	r3, [pc, #60]	; (80126d8 <prvCheckTasksWaitingTermination+0x4c>)
 801269a:	68db      	ldr	r3, [r3, #12]
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	3304      	adds	r3, #4
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7ff f9b8 	bl	8011a1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80126aa:	4b0c      	ldr	r3, [pc, #48]	; (80126dc <prvCheckTasksWaitingTermination+0x50>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	3b01      	subs	r3, #1
 80126b0:	4a0a      	ldr	r2, [pc, #40]	; (80126dc <prvCheckTasksWaitingTermination+0x50>)
 80126b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80126b4:	4b0a      	ldr	r3, [pc, #40]	; (80126e0 <prvCheckTasksWaitingTermination+0x54>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	3b01      	subs	r3, #1
 80126ba:	4a09      	ldr	r2, [pc, #36]	; (80126e0 <prvCheckTasksWaitingTermination+0x54>)
 80126bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80126be:	f7ff fb2b 	bl	8011d18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f000 f80e 	bl	80126e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80126c8:	4b05      	ldr	r3, [pc, #20]	; (80126e0 <prvCheckTasksWaitingTermination+0x54>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d1e1      	bne.n	8012694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80126d0:	bf00      	nop
 80126d2:	3708      	adds	r7, #8
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}
 80126d8:	2000896c 	.word	0x2000896c
 80126dc:	20008998 	.word	0x20008998
 80126e0:	20008980 	.word	0x20008980

080126e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d108      	bne.n	8012708 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7ff f828 	bl	8011750 <vPortFree>
				vPortFree( pxTCB );
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f7ff f825 	bl	8011750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012706:	e017      	b.n	8012738 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801270e:	2b01      	cmp	r3, #1
 8012710:	d103      	bne.n	801271a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7ff f81c 	bl	8011750 <vPortFree>
	}
 8012718:	e00e      	b.n	8012738 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012720:	2b02      	cmp	r3, #2
 8012722:	d009      	beq.n	8012738 <prvDeleteTCB+0x54>
 8012724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012728:	f383 8811 	msr	BASEPRI, r3
 801272c:	f3bf 8f6f 	isb	sy
 8012730:	f3bf 8f4f 	dsb	sy
 8012734:	60fb      	str	r3, [r7, #12]
 8012736:	e7fe      	b.n	8012736 <prvDeleteTCB+0x52>
	}
 8012738:	bf00      	nop
 801273a:	3710      	adds	r7, #16
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}

08012740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012740:	b480      	push	{r7}
 8012742:	b083      	sub	sp, #12
 8012744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012746:	4b0f      	ldr	r3, [pc, #60]	; (8012784 <prvResetNextTaskUnblockTime+0x44>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d101      	bne.n	8012754 <prvResetNextTaskUnblockTime+0x14>
 8012750:	2301      	movs	r3, #1
 8012752:	e000      	b.n	8012756 <prvResetNextTaskUnblockTime+0x16>
 8012754:	2300      	movs	r3, #0
 8012756:	2b00      	cmp	r3, #0
 8012758:	d004      	beq.n	8012764 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801275a:	4b0b      	ldr	r3, [pc, #44]	; (8012788 <prvResetNextTaskUnblockTime+0x48>)
 801275c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012760:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012762:	e008      	b.n	8012776 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012764:	4b07      	ldr	r3, [pc, #28]	; (8012784 <prvResetNextTaskUnblockTime+0x44>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	68db      	ldr	r3, [r3, #12]
 801276a:	68db      	ldr	r3, [r3, #12]
 801276c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	4a05      	ldr	r2, [pc, #20]	; (8012788 <prvResetNextTaskUnblockTime+0x48>)
 8012774:	6013      	str	r3, [r2, #0]
}
 8012776:	bf00      	nop
 8012778:	370c      	adds	r7, #12
 801277a:	46bd      	mov	sp, r7
 801277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012780:	4770      	bx	lr
 8012782:	bf00      	nop
 8012784:	20008950 	.word	0x20008950
 8012788:	200089b8 	.word	0x200089b8

0801278c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801278c:	b480      	push	{r7}
 801278e:	b083      	sub	sp, #12
 8012790:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012792:	4b0b      	ldr	r3, [pc, #44]	; (80127c0 <xTaskGetSchedulerState+0x34>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d102      	bne.n	80127a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801279a:	2301      	movs	r3, #1
 801279c:	607b      	str	r3, [r7, #4]
 801279e:	e008      	b.n	80127b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127a0:	4b08      	ldr	r3, [pc, #32]	; (80127c4 <xTaskGetSchedulerState+0x38>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d102      	bne.n	80127ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80127a8:	2302      	movs	r3, #2
 80127aa:	607b      	str	r3, [r7, #4]
 80127ac:	e001      	b.n	80127b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80127ae:	2300      	movs	r3, #0
 80127b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80127b2:	687b      	ldr	r3, [r7, #4]
	}
 80127b4:	4618      	mov	r0, r3
 80127b6:	370c      	adds	r7, #12
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr
 80127c0:	200089a4 	.word	0x200089a4
 80127c4:	200089c0 	.word	0x200089c0

080127c8 <vApplicationGetIdleTaskMemory>:
}

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 80127c8:	b480      	push	{r7}
 80127ca:	b085      	sub	sp, #20
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	607a      	str	r2, [r7, #4]
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	4a07      	ldr	r2, [pc, #28]	; (80127f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80127d8:	601a      	str	r2, [r3, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 80127da:	68bb      	ldr	r3, [r7, #8]
 80127dc:	4a06      	ldr	r2, [pc, #24]	; (80127f8 <vApplicationGetIdleTaskMemory+0x30>)
 80127de:	601a      	str	r2, [r3, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2280      	movs	r2, #128	; 0x80
 80127e4:	601a      	str	r2, [r3, #0]
}
 80127e6:	bf00      	nop
 80127e8:	3714      	adds	r7, #20
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	200089c4 	.word	0x200089c4
 80127f8:	20008a18 	.word	0x20008a18

080127fc <__cxa_pure_virtual>:
 80127fc:	b508      	push	{r3, lr}
 80127fe:	f000 f80d 	bl	801281c <_ZSt9terminatev>

08012802 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012802:	b508      	push	{r3, lr}
 8012804:	4780      	blx	r0
 8012806:	f001 fd83 	bl	8014310 <abort>
	...

0801280c <_ZSt13get_terminatev>:
 801280c:	4b02      	ldr	r3, [pc, #8]	; (8012818 <_ZSt13get_terminatev+0xc>)
 801280e:	6818      	ldr	r0, [r3, #0]
 8012810:	f3bf 8f5b 	dmb	ish
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	200000c8 	.word	0x200000c8

0801281c <_ZSt9terminatev>:
 801281c:	b508      	push	{r3, lr}
 801281e:	f7ff fff5 	bl	801280c <_ZSt13get_terminatev>
 8012822:	f7ff ffee 	bl	8012802 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08012828 <atan>:
 8012828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801282c:	ec55 4b10 	vmov	r4, r5, d0
 8012830:	4bc3      	ldr	r3, [pc, #780]	; (8012b40 <atan+0x318>)
 8012832:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012836:	429e      	cmp	r6, r3
 8012838:	46ab      	mov	fp, r5
 801283a:	dd18      	ble.n	801286e <atan+0x46>
 801283c:	4bc1      	ldr	r3, [pc, #772]	; (8012b44 <atan+0x31c>)
 801283e:	429e      	cmp	r6, r3
 8012840:	dc01      	bgt.n	8012846 <atan+0x1e>
 8012842:	d109      	bne.n	8012858 <atan+0x30>
 8012844:	b144      	cbz	r4, 8012858 <atan+0x30>
 8012846:	4622      	mov	r2, r4
 8012848:	462b      	mov	r3, r5
 801284a:	4620      	mov	r0, r4
 801284c:	4629      	mov	r1, r5
 801284e:	f7ed fd1d 	bl	800028c <__adddf3>
 8012852:	4604      	mov	r4, r0
 8012854:	460d      	mov	r5, r1
 8012856:	e006      	b.n	8012866 <atan+0x3e>
 8012858:	f1bb 0f00 	cmp.w	fp, #0
 801285c:	f340 8131 	ble.w	8012ac2 <atan+0x29a>
 8012860:	a59b      	add	r5, pc, #620	; (adr r5, 8012ad0 <atan+0x2a8>)
 8012862:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012866:	ec45 4b10 	vmov	d0, r4, r5
 801286a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801286e:	4bb6      	ldr	r3, [pc, #728]	; (8012b48 <atan+0x320>)
 8012870:	429e      	cmp	r6, r3
 8012872:	dc14      	bgt.n	801289e <atan+0x76>
 8012874:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012878:	429e      	cmp	r6, r3
 801287a:	dc0d      	bgt.n	8012898 <atan+0x70>
 801287c:	a396      	add	r3, pc, #600	; (adr r3, 8012ad8 <atan+0x2b0>)
 801287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012882:	ee10 0a10 	vmov	r0, s0
 8012886:	4629      	mov	r1, r5
 8012888:	f7ed fd00 	bl	800028c <__adddf3>
 801288c:	2200      	movs	r2, #0
 801288e:	4baf      	ldr	r3, [pc, #700]	; (8012b4c <atan+0x324>)
 8012890:	f7ee f942 	bl	8000b18 <__aeabi_dcmpgt>
 8012894:	2800      	cmp	r0, #0
 8012896:	d1e6      	bne.n	8012866 <atan+0x3e>
 8012898:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801289c:	e02b      	b.n	80128f6 <atan+0xce>
 801289e:	f000 f9a7 	bl	8012bf0 <fabs>
 80128a2:	4bab      	ldr	r3, [pc, #684]	; (8012b50 <atan+0x328>)
 80128a4:	429e      	cmp	r6, r3
 80128a6:	ec55 4b10 	vmov	r4, r5, d0
 80128aa:	f300 80bf 	bgt.w	8012a2c <atan+0x204>
 80128ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80128b2:	429e      	cmp	r6, r3
 80128b4:	f300 80a0 	bgt.w	80129f8 <atan+0x1d0>
 80128b8:	ee10 2a10 	vmov	r2, s0
 80128bc:	ee10 0a10 	vmov	r0, s0
 80128c0:	462b      	mov	r3, r5
 80128c2:	4629      	mov	r1, r5
 80128c4:	f7ed fce2 	bl	800028c <__adddf3>
 80128c8:	2200      	movs	r2, #0
 80128ca:	4ba0      	ldr	r3, [pc, #640]	; (8012b4c <atan+0x324>)
 80128cc:	f7ed fcdc 	bl	8000288 <__aeabi_dsub>
 80128d0:	2200      	movs	r2, #0
 80128d2:	4606      	mov	r6, r0
 80128d4:	460f      	mov	r7, r1
 80128d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80128da:	4620      	mov	r0, r4
 80128dc:	4629      	mov	r1, r5
 80128de:	f7ed fcd5 	bl	800028c <__adddf3>
 80128e2:	4602      	mov	r2, r0
 80128e4:	460b      	mov	r3, r1
 80128e6:	4630      	mov	r0, r6
 80128e8:	4639      	mov	r1, r7
 80128ea:	f7ed ffaf 	bl	800084c <__aeabi_ddiv>
 80128ee:	f04f 0a00 	mov.w	sl, #0
 80128f2:	4604      	mov	r4, r0
 80128f4:	460d      	mov	r5, r1
 80128f6:	4622      	mov	r2, r4
 80128f8:	462b      	mov	r3, r5
 80128fa:	4620      	mov	r0, r4
 80128fc:	4629      	mov	r1, r5
 80128fe:	f7ed fe7b 	bl	80005f8 <__aeabi_dmul>
 8012902:	4602      	mov	r2, r0
 8012904:	460b      	mov	r3, r1
 8012906:	4680      	mov	r8, r0
 8012908:	4689      	mov	r9, r1
 801290a:	f7ed fe75 	bl	80005f8 <__aeabi_dmul>
 801290e:	a374      	add	r3, pc, #464	; (adr r3, 8012ae0 <atan+0x2b8>)
 8012910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012914:	4606      	mov	r6, r0
 8012916:	460f      	mov	r7, r1
 8012918:	f7ed fe6e 	bl	80005f8 <__aeabi_dmul>
 801291c:	a372      	add	r3, pc, #456	; (adr r3, 8012ae8 <atan+0x2c0>)
 801291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012922:	f7ed fcb3 	bl	800028c <__adddf3>
 8012926:	4632      	mov	r2, r6
 8012928:	463b      	mov	r3, r7
 801292a:	f7ed fe65 	bl	80005f8 <__aeabi_dmul>
 801292e:	a370      	add	r3, pc, #448	; (adr r3, 8012af0 <atan+0x2c8>)
 8012930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012934:	f7ed fcaa 	bl	800028c <__adddf3>
 8012938:	4632      	mov	r2, r6
 801293a:	463b      	mov	r3, r7
 801293c:	f7ed fe5c 	bl	80005f8 <__aeabi_dmul>
 8012940:	a36d      	add	r3, pc, #436	; (adr r3, 8012af8 <atan+0x2d0>)
 8012942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012946:	f7ed fca1 	bl	800028c <__adddf3>
 801294a:	4632      	mov	r2, r6
 801294c:	463b      	mov	r3, r7
 801294e:	f7ed fe53 	bl	80005f8 <__aeabi_dmul>
 8012952:	a36b      	add	r3, pc, #428	; (adr r3, 8012b00 <atan+0x2d8>)
 8012954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012958:	f7ed fc98 	bl	800028c <__adddf3>
 801295c:	4632      	mov	r2, r6
 801295e:	463b      	mov	r3, r7
 8012960:	f7ed fe4a 	bl	80005f8 <__aeabi_dmul>
 8012964:	a368      	add	r3, pc, #416	; (adr r3, 8012b08 <atan+0x2e0>)
 8012966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296a:	f7ed fc8f 	bl	800028c <__adddf3>
 801296e:	4642      	mov	r2, r8
 8012970:	464b      	mov	r3, r9
 8012972:	f7ed fe41 	bl	80005f8 <__aeabi_dmul>
 8012976:	a366      	add	r3, pc, #408	; (adr r3, 8012b10 <atan+0x2e8>)
 8012978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297c:	4680      	mov	r8, r0
 801297e:	4689      	mov	r9, r1
 8012980:	4630      	mov	r0, r6
 8012982:	4639      	mov	r1, r7
 8012984:	f7ed fe38 	bl	80005f8 <__aeabi_dmul>
 8012988:	a363      	add	r3, pc, #396	; (adr r3, 8012b18 <atan+0x2f0>)
 801298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298e:	f7ed fc7b 	bl	8000288 <__aeabi_dsub>
 8012992:	4632      	mov	r2, r6
 8012994:	463b      	mov	r3, r7
 8012996:	f7ed fe2f 	bl	80005f8 <__aeabi_dmul>
 801299a:	a361      	add	r3, pc, #388	; (adr r3, 8012b20 <atan+0x2f8>)
 801299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a0:	f7ed fc72 	bl	8000288 <__aeabi_dsub>
 80129a4:	4632      	mov	r2, r6
 80129a6:	463b      	mov	r3, r7
 80129a8:	f7ed fe26 	bl	80005f8 <__aeabi_dmul>
 80129ac:	a35e      	add	r3, pc, #376	; (adr r3, 8012b28 <atan+0x300>)
 80129ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b2:	f7ed fc69 	bl	8000288 <__aeabi_dsub>
 80129b6:	4632      	mov	r2, r6
 80129b8:	463b      	mov	r3, r7
 80129ba:	f7ed fe1d 	bl	80005f8 <__aeabi_dmul>
 80129be:	a35c      	add	r3, pc, #368	; (adr r3, 8012b30 <atan+0x308>)
 80129c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c4:	f7ed fc60 	bl	8000288 <__aeabi_dsub>
 80129c8:	4632      	mov	r2, r6
 80129ca:	463b      	mov	r3, r7
 80129cc:	f7ed fe14 	bl	80005f8 <__aeabi_dmul>
 80129d0:	4602      	mov	r2, r0
 80129d2:	460b      	mov	r3, r1
 80129d4:	4640      	mov	r0, r8
 80129d6:	4649      	mov	r1, r9
 80129d8:	f7ed fc58 	bl	800028c <__adddf3>
 80129dc:	4622      	mov	r2, r4
 80129de:	462b      	mov	r3, r5
 80129e0:	f7ed fe0a 	bl	80005f8 <__aeabi_dmul>
 80129e4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80129e8:	4602      	mov	r2, r0
 80129ea:	460b      	mov	r3, r1
 80129ec:	d14b      	bne.n	8012a86 <atan+0x25e>
 80129ee:	4620      	mov	r0, r4
 80129f0:	4629      	mov	r1, r5
 80129f2:	f7ed fc49 	bl	8000288 <__aeabi_dsub>
 80129f6:	e72c      	b.n	8012852 <atan+0x2a>
 80129f8:	ee10 0a10 	vmov	r0, s0
 80129fc:	2200      	movs	r2, #0
 80129fe:	4b53      	ldr	r3, [pc, #332]	; (8012b4c <atan+0x324>)
 8012a00:	4629      	mov	r1, r5
 8012a02:	f7ed fc41 	bl	8000288 <__aeabi_dsub>
 8012a06:	2200      	movs	r2, #0
 8012a08:	4606      	mov	r6, r0
 8012a0a:	460f      	mov	r7, r1
 8012a0c:	4b4f      	ldr	r3, [pc, #316]	; (8012b4c <atan+0x324>)
 8012a0e:	4620      	mov	r0, r4
 8012a10:	4629      	mov	r1, r5
 8012a12:	f7ed fc3b 	bl	800028c <__adddf3>
 8012a16:	4602      	mov	r2, r0
 8012a18:	460b      	mov	r3, r1
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	4639      	mov	r1, r7
 8012a1e:	f7ed ff15 	bl	800084c <__aeabi_ddiv>
 8012a22:	f04f 0a01 	mov.w	sl, #1
 8012a26:	4604      	mov	r4, r0
 8012a28:	460d      	mov	r5, r1
 8012a2a:	e764      	b.n	80128f6 <atan+0xce>
 8012a2c:	4b49      	ldr	r3, [pc, #292]	; (8012b54 <atan+0x32c>)
 8012a2e:	429e      	cmp	r6, r3
 8012a30:	dc1d      	bgt.n	8012a6e <atan+0x246>
 8012a32:	ee10 0a10 	vmov	r0, s0
 8012a36:	2200      	movs	r2, #0
 8012a38:	4b47      	ldr	r3, [pc, #284]	; (8012b58 <atan+0x330>)
 8012a3a:	4629      	mov	r1, r5
 8012a3c:	f7ed fc24 	bl	8000288 <__aeabi_dsub>
 8012a40:	2200      	movs	r2, #0
 8012a42:	4606      	mov	r6, r0
 8012a44:	460f      	mov	r7, r1
 8012a46:	4b44      	ldr	r3, [pc, #272]	; (8012b58 <atan+0x330>)
 8012a48:	4620      	mov	r0, r4
 8012a4a:	4629      	mov	r1, r5
 8012a4c:	f7ed fdd4 	bl	80005f8 <__aeabi_dmul>
 8012a50:	2200      	movs	r2, #0
 8012a52:	4b3e      	ldr	r3, [pc, #248]	; (8012b4c <atan+0x324>)
 8012a54:	f7ed fc1a 	bl	800028c <__adddf3>
 8012a58:	4602      	mov	r2, r0
 8012a5a:	460b      	mov	r3, r1
 8012a5c:	4630      	mov	r0, r6
 8012a5e:	4639      	mov	r1, r7
 8012a60:	f7ed fef4 	bl	800084c <__aeabi_ddiv>
 8012a64:	f04f 0a02 	mov.w	sl, #2
 8012a68:	4604      	mov	r4, r0
 8012a6a:	460d      	mov	r5, r1
 8012a6c:	e743      	b.n	80128f6 <atan+0xce>
 8012a6e:	462b      	mov	r3, r5
 8012a70:	ee10 2a10 	vmov	r2, s0
 8012a74:	2000      	movs	r0, #0
 8012a76:	4939      	ldr	r1, [pc, #228]	; (8012b5c <atan+0x334>)
 8012a78:	f7ed fee8 	bl	800084c <__aeabi_ddiv>
 8012a7c:	f04f 0a03 	mov.w	sl, #3
 8012a80:	4604      	mov	r4, r0
 8012a82:	460d      	mov	r5, r1
 8012a84:	e737      	b.n	80128f6 <atan+0xce>
 8012a86:	4b36      	ldr	r3, [pc, #216]	; (8012b60 <atan+0x338>)
 8012a88:	4e36      	ldr	r6, [pc, #216]	; (8012b64 <atan+0x33c>)
 8012a8a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8012a8e:	4456      	add	r6, sl
 8012a90:	449a      	add	sl, r3
 8012a92:	e9da 2300 	ldrd	r2, r3, [sl]
 8012a96:	f7ed fbf7 	bl	8000288 <__aeabi_dsub>
 8012a9a:	4622      	mov	r2, r4
 8012a9c:	462b      	mov	r3, r5
 8012a9e:	f7ed fbf3 	bl	8000288 <__aeabi_dsub>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	460b      	mov	r3, r1
 8012aa6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012aaa:	f7ed fbed 	bl	8000288 <__aeabi_dsub>
 8012aae:	f1bb 0f00 	cmp.w	fp, #0
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	460d      	mov	r5, r1
 8012ab6:	f6bf aed6 	bge.w	8012866 <atan+0x3e>
 8012aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012abe:	461d      	mov	r5, r3
 8012ac0:	e6d1      	b.n	8012866 <atan+0x3e>
 8012ac2:	a51d      	add	r5, pc, #116	; (adr r5, 8012b38 <atan+0x310>)
 8012ac4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012ac8:	e6cd      	b.n	8012866 <atan+0x3e>
 8012aca:	bf00      	nop
 8012acc:	f3af 8000 	nop.w
 8012ad0:	54442d18 	.word	0x54442d18
 8012ad4:	3ff921fb 	.word	0x3ff921fb
 8012ad8:	8800759c 	.word	0x8800759c
 8012adc:	7e37e43c 	.word	0x7e37e43c
 8012ae0:	e322da11 	.word	0xe322da11
 8012ae4:	3f90ad3a 	.word	0x3f90ad3a
 8012ae8:	24760deb 	.word	0x24760deb
 8012aec:	3fa97b4b 	.word	0x3fa97b4b
 8012af0:	a0d03d51 	.word	0xa0d03d51
 8012af4:	3fb10d66 	.word	0x3fb10d66
 8012af8:	c54c206e 	.word	0xc54c206e
 8012afc:	3fb745cd 	.word	0x3fb745cd
 8012b00:	920083ff 	.word	0x920083ff
 8012b04:	3fc24924 	.word	0x3fc24924
 8012b08:	5555550d 	.word	0x5555550d
 8012b0c:	3fd55555 	.word	0x3fd55555
 8012b10:	2c6a6c2f 	.word	0x2c6a6c2f
 8012b14:	bfa2b444 	.word	0xbfa2b444
 8012b18:	52defd9a 	.word	0x52defd9a
 8012b1c:	3fadde2d 	.word	0x3fadde2d
 8012b20:	af749a6d 	.word	0xaf749a6d
 8012b24:	3fb3b0f2 	.word	0x3fb3b0f2
 8012b28:	fe231671 	.word	0xfe231671
 8012b2c:	3fbc71c6 	.word	0x3fbc71c6
 8012b30:	9998ebc4 	.word	0x9998ebc4
 8012b34:	3fc99999 	.word	0x3fc99999
 8012b38:	54442d18 	.word	0x54442d18
 8012b3c:	bff921fb 	.word	0xbff921fb
 8012b40:	440fffff 	.word	0x440fffff
 8012b44:	7ff00000 	.word	0x7ff00000
 8012b48:	3fdbffff 	.word	0x3fdbffff
 8012b4c:	3ff00000 	.word	0x3ff00000
 8012b50:	3ff2ffff 	.word	0x3ff2ffff
 8012b54:	40037fff 	.word	0x40037fff
 8012b58:	3ff80000 	.word	0x3ff80000
 8012b5c:	bff00000 	.word	0xbff00000
 8012b60:	080155d0 	.word	0x080155d0
 8012b64:	080155b0 	.word	0x080155b0

08012b68 <cos>:
 8012b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b6a:	ec51 0b10 	vmov	r0, r1, d0
 8012b6e:	4a1e      	ldr	r2, [pc, #120]	; (8012be8 <cos+0x80>)
 8012b70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012b74:	4293      	cmp	r3, r2
 8012b76:	dc06      	bgt.n	8012b86 <cos+0x1e>
 8012b78:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8012be0 <cos+0x78>
 8012b7c:	f000 fd1c 	bl	80135b8 <__kernel_cos>
 8012b80:	ec51 0b10 	vmov	r0, r1, d0
 8012b84:	e007      	b.n	8012b96 <cos+0x2e>
 8012b86:	4a19      	ldr	r2, [pc, #100]	; (8012bec <cos+0x84>)
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	dd09      	ble.n	8012ba0 <cos+0x38>
 8012b8c:	ee10 2a10 	vmov	r2, s0
 8012b90:	460b      	mov	r3, r1
 8012b92:	f7ed fb79 	bl	8000288 <__aeabi_dsub>
 8012b96:	ec41 0b10 	vmov	d0, r0, r1
 8012b9a:	b005      	add	sp, #20
 8012b9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ba0:	4668      	mov	r0, sp
 8012ba2:	f000 f9b9 	bl	8012f18 <__ieee754_rem_pio2>
 8012ba6:	f000 0003 	and.w	r0, r0, #3
 8012baa:	2801      	cmp	r0, #1
 8012bac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012bb0:	ed9d 0b00 	vldr	d0, [sp]
 8012bb4:	d007      	beq.n	8012bc6 <cos+0x5e>
 8012bb6:	2802      	cmp	r0, #2
 8012bb8:	d00e      	beq.n	8012bd8 <cos+0x70>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d0de      	beq.n	8012b7c <cos+0x14>
 8012bbe:	2001      	movs	r0, #1
 8012bc0:	f001 f902 	bl	8013dc8 <__kernel_sin>
 8012bc4:	e7dc      	b.n	8012b80 <cos+0x18>
 8012bc6:	f001 f8ff 	bl	8013dc8 <__kernel_sin>
 8012bca:	ec53 2b10 	vmov	r2, r3, d0
 8012bce:	ee10 0a10 	vmov	r0, s0
 8012bd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012bd6:	e7de      	b.n	8012b96 <cos+0x2e>
 8012bd8:	f000 fcee 	bl	80135b8 <__kernel_cos>
 8012bdc:	e7f5      	b.n	8012bca <cos+0x62>
 8012bde:	bf00      	nop
	...
 8012be8:	3fe921fb 	.word	0x3fe921fb
 8012bec:	7fefffff 	.word	0x7fefffff

08012bf0 <fabs>:
 8012bf0:	ec51 0b10 	vmov	r0, r1, d0
 8012bf4:	ee10 2a10 	vmov	r2, s0
 8012bf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012bfc:	ec43 2b10 	vmov	d0, r2, r3
 8012c00:	4770      	bx	lr
 8012c02:	0000      	movs	r0, r0
 8012c04:	0000      	movs	r0, r0
	...

08012c08 <sin>:
 8012c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c0a:	ec51 0b10 	vmov	r0, r1, d0
 8012c0e:	4a20      	ldr	r2, [pc, #128]	; (8012c90 <sin+0x88>)
 8012c10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012c14:	4293      	cmp	r3, r2
 8012c16:	dc07      	bgt.n	8012c28 <sin+0x20>
 8012c18:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012c88 <sin+0x80>
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	f001 f8d3 	bl	8013dc8 <__kernel_sin>
 8012c22:	ec51 0b10 	vmov	r0, r1, d0
 8012c26:	e007      	b.n	8012c38 <sin+0x30>
 8012c28:	4a1a      	ldr	r2, [pc, #104]	; (8012c94 <sin+0x8c>)
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	dd09      	ble.n	8012c42 <sin+0x3a>
 8012c2e:	ee10 2a10 	vmov	r2, s0
 8012c32:	460b      	mov	r3, r1
 8012c34:	f7ed fb28 	bl	8000288 <__aeabi_dsub>
 8012c38:	ec41 0b10 	vmov	d0, r0, r1
 8012c3c:	b005      	add	sp, #20
 8012c3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c42:	4668      	mov	r0, sp
 8012c44:	f000 f968 	bl	8012f18 <__ieee754_rem_pio2>
 8012c48:	f000 0003 	and.w	r0, r0, #3
 8012c4c:	2801      	cmp	r0, #1
 8012c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012c52:	ed9d 0b00 	vldr	d0, [sp]
 8012c56:	d004      	beq.n	8012c62 <sin+0x5a>
 8012c58:	2802      	cmp	r0, #2
 8012c5a:	d005      	beq.n	8012c68 <sin+0x60>
 8012c5c:	b970      	cbnz	r0, 8012c7c <sin+0x74>
 8012c5e:	2001      	movs	r0, #1
 8012c60:	e7dd      	b.n	8012c1e <sin+0x16>
 8012c62:	f000 fca9 	bl	80135b8 <__kernel_cos>
 8012c66:	e7dc      	b.n	8012c22 <sin+0x1a>
 8012c68:	2001      	movs	r0, #1
 8012c6a:	f001 f8ad 	bl	8013dc8 <__kernel_sin>
 8012c6e:	ec53 2b10 	vmov	r2, r3, d0
 8012c72:	ee10 0a10 	vmov	r0, s0
 8012c76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012c7a:	e7dd      	b.n	8012c38 <sin+0x30>
 8012c7c:	f000 fc9c 	bl	80135b8 <__kernel_cos>
 8012c80:	e7f5      	b.n	8012c6e <sin+0x66>
 8012c82:	bf00      	nop
 8012c84:	f3af 8000 	nop.w
	...
 8012c90:	3fe921fb 	.word	0x3fe921fb
 8012c94:	7fefffff 	.word	0x7fefffff

08012c98 <atan2>:
 8012c98:	f000 b85e 	b.w	8012d58 <__ieee754_atan2>

08012c9c <sqrt>:
 8012c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ca0:	ed2d 8b02 	vpush	{d8}
 8012ca4:	b08b      	sub	sp, #44	; 0x2c
 8012ca6:	ec55 4b10 	vmov	r4, r5, d0
 8012caa:	f000 fb27 	bl	80132fc <__ieee754_sqrt>
 8012cae:	4b26      	ldr	r3, [pc, #152]	; (8012d48 <sqrt+0xac>)
 8012cb0:	eeb0 8a40 	vmov.f32	s16, s0
 8012cb4:	eef0 8a60 	vmov.f32	s17, s1
 8012cb8:	f993 6000 	ldrsb.w	r6, [r3]
 8012cbc:	1c73      	adds	r3, r6, #1
 8012cbe:	d02a      	beq.n	8012d16 <sqrt+0x7a>
 8012cc0:	4622      	mov	r2, r4
 8012cc2:	462b      	mov	r3, r5
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	4629      	mov	r1, r5
 8012cc8:	f7ed ff30 	bl	8000b2c <__aeabi_dcmpun>
 8012ccc:	4607      	mov	r7, r0
 8012cce:	bb10      	cbnz	r0, 8012d16 <sqrt+0x7a>
 8012cd0:	f04f 0800 	mov.w	r8, #0
 8012cd4:	f04f 0900 	mov.w	r9, #0
 8012cd8:	4642      	mov	r2, r8
 8012cda:	464b      	mov	r3, r9
 8012cdc:	4620      	mov	r0, r4
 8012cde:	4629      	mov	r1, r5
 8012ce0:	f7ed fefc 	bl	8000adc <__aeabi_dcmplt>
 8012ce4:	b1b8      	cbz	r0, 8012d16 <sqrt+0x7a>
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	9300      	str	r3, [sp, #0]
 8012cea:	4b18      	ldr	r3, [pc, #96]	; (8012d4c <sqrt+0xb0>)
 8012cec:	9301      	str	r3, [sp, #4]
 8012cee:	9708      	str	r7, [sp, #32]
 8012cf0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8012cf4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012cf8:	b9b6      	cbnz	r6, 8012d28 <sqrt+0x8c>
 8012cfa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8012cfe:	4668      	mov	r0, sp
 8012d00:	f001 f9a2 	bl	8014048 <matherr>
 8012d04:	b1d0      	cbz	r0, 8012d3c <sqrt+0xa0>
 8012d06:	9b08      	ldr	r3, [sp, #32]
 8012d08:	b11b      	cbz	r3, 8012d12 <sqrt+0x76>
 8012d0a:	f001 fb11 	bl	8014330 <__errno>
 8012d0e:	9b08      	ldr	r3, [sp, #32]
 8012d10:	6003      	str	r3, [r0, #0]
 8012d12:	ed9d 8b06 	vldr	d8, [sp, #24]
 8012d16:	eeb0 0a48 	vmov.f32	s0, s16
 8012d1a:	eef0 0a68 	vmov.f32	s1, s17
 8012d1e:	b00b      	add	sp, #44	; 0x2c
 8012d20:	ecbd 8b02 	vpop	{d8}
 8012d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d28:	4642      	mov	r2, r8
 8012d2a:	464b      	mov	r3, r9
 8012d2c:	4640      	mov	r0, r8
 8012d2e:	4649      	mov	r1, r9
 8012d30:	f7ed fd8c 	bl	800084c <__aeabi_ddiv>
 8012d34:	2e02      	cmp	r6, #2
 8012d36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012d3a:	d1e0      	bne.n	8012cfe <sqrt+0x62>
 8012d3c:	f001 faf8 	bl	8014330 <__errno>
 8012d40:	2321      	movs	r3, #33	; 0x21
 8012d42:	6003      	str	r3, [r0, #0]
 8012d44:	e7df      	b.n	8012d06 <sqrt+0x6a>
 8012d46:	bf00      	nop
 8012d48:	200000cc 	.word	0x200000cc
 8012d4c:	080155f0 	.word	0x080155f0

08012d50 <atan2f>:
 8012d50:	f000 bb84 	b.w	801345c <__ieee754_atan2f>
 8012d54:	0000      	movs	r0, r0
	...

08012d58 <__ieee754_atan2>:
 8012d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d5c:	ec57 6b11 	vmov	r6, r7, d1
 8012d60:	4273      	negs	r3, r6
 8012d62:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8012d66:	4333      	orrs	r3, r6
 8012d68:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8012f10 <__ieee754_atan2+0x1b8>
 8012d6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012d70:	4573      	cmp	r3, lr
 8012d72:	ec51 0b10 	vmov	r0, r1, d0
 8012d76:	ee11 8a10 	vmov	r8, s2
 8012d7a:	d80a      	bhi.n	8012d92 <__ieee754_atan2+0x3a>
 8012d7c:	4244      	negs	r4, r0
 8012d7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012d82:	4304      	orrs	r4, r0
 8012d84:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012d88:	4574      	cmp	r4, lr
 8012d8a:	468c      	mov	ip, r1
 8012d8c:	ee10 9a10 	vmov	r9, s0
 8012d90:	d907      	bls.n	8012da2 <__ieee754_atan2+0x4a>
 8012d92:	4632      	mov	r2, r6
 8012d94:	463b      	mov	r3, r7
 8012d96:	f7ed fa79 	bl	800028c <__adddf3>
 8012d9a:	ec41 0b10 	vmov	d0, r0, r1
 8012d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012da2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8012da6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012daa:	4334      	orrs	r4, r6
 8012dac:	d103      	bne.n	8012db6 <__ieee754_atan2+0x5e>
 8012dae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012db2:	f7ff bd39 	b.w	8012828 <atan>
 8012db6:	17bc      	asrs	r4, r7, #30
 8012db8:	f004 0402 	and.w	r4, r4, #2
 8012dbc:	ea53 0909 	orrs.w	r9, r3, r9
 8012dc0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012dc4:	d107      	bne.n	8012dd6 <__ieee754_atan2+0x7e>
 8012dc6:	2c02      	cmp	r4, #2
 8012dc8:	d073      	beq.n	8012eb2 <__ieee754_atan2+0x15a>
 8012dca:	2c03      	cmp	r4, #3
 8012dcc:	d1e5      	bne.n	8012d9a <__ieee754_atan2+0x42>
 8012dce:	a13e      	add	r1, pc, #248	; (adr r1, 8012ec8 <__ieee754_atan2+0x170>)
 8012dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012dd4:	e7e1      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012dd6:	ea52 0808 	orrs.w	r8, r2, r8
 8012dda:	d106      	bne.n	8012dea <__ieee754_atan2+0x92>
 8012ddc:	f1bc 0f00 	cmp.w	ip, #0
 8012de0:	da6b      	bge.n	8012eba <__ieee754_atan2+0x162>
 8012de2:	a13b      	add	r1, pc, #236	; (adr r1, 8012ed0 <__ieee754_atan2+0x178>)
 8012de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012de8:	e7d7      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012dea:	4572      	cmp	r2, lr
 8012dec:	d120      	bne.n	8012e30 <__ieee754_atan2+0xd8>
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d111      	bne.n	8012e16 <__ieee754_atan2+0xbe>
 8012df2:	2c02      	cmp	r4, #2
 8012df4:	d007      	beq.n	8012e06 <__ieee754_atan2+0xae>
 8012df6:	2c03      	cmp	r4, #3
 8012df8:	d009      	beq.n	8012e0e <__ieee754_atan2+0xb6>
 8012dfa:	2c01      	cmp	r4, #1
 8012dfc:	d155      	bne.n	8012eaa <__ieee754_atan2+0x152>
 8012dfe:	a136      	add	r1, pc, #216	; (adr r1, 8012ed8 <__ieee754_atan2+0x180>)
 8012e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e04:	e7c9      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012e06:	a136      	add	r1, pc, #216	; (adr r1, 8012ee0 <__ieee754_atan2+0x188>)
 8012e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e0c:	e7c5      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012e0e:	a136      	add	r1, pc, #216	; (adr r1, 8012ee8 <__ieee754_atan2+0x190>)
 8012e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e14:	e7c1      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012e16:	2c02      	cmp	r4, #2
 8012e18:	d04b      	beq.n	8012eb2 <__ieee754_atan2+0x15a>
 8012e1a:	2c03      	cmp	r4, #3
 8012e1c:	d0d7      	beq.n	8012dce <__ieee754_atan2+0x76>
 8012e1e:	2c01      	cmp	r4, #1
 8012e20:	f04f 0000 	mov.w	r0, #0
 8012e24:	d102      	bne.n	8012e2c <__ieee754_atan2+0xd4>
 8012e26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012e2a:	e7b6      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012e2c:	2100      	movs	r1, #0
 8012e2e:	e7b4      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012e30:	4573      	cmp	r3, lr
 8012e32:	d0d3      	beq.n	8012ddc <__ieee754_atan2+0x84>
 8012e34:	1a9b      	subs	r3, r3, r2
 8012e36:	151b      	asrs	r3, r3, #20
 8012e38:	2b3c      	cmp	r3, #60	; 0x3c
 8012e3a:	dc1e      	bgt.n	8012e7a <__ieee754_atan2+0x122>
 8012e3c:	2f00      	cmp	r7, #0
 8012e3e:	da01      	bge.n	8012e44 <__ieee754_atan2+0xec>
 8012e40:	333c      	adds	r3, #60	; 0x3c
 8012e42:	db1e      	blt.n	8012e82 <__ieee754_atan2+0x12a>
 8012e44:	4632      	mov	r2, r6
 8012e46:	463b      	mov	r3, r7
 8012e48:	f7ed fd00 	bl	800084c <__aeabi_ddiv>
 8012e4c:	ec41 0b10 	vmov	d0, r0, r1
 8012e50:	f7ff fece 	bl	8012bf0 <fabs>
 8012e54:	f7ff fce8 	bl	8012828 <atan>
 8012e58:	ec51 0b10 	vmov	r0, r1, d0
 8012e5c:	2c01      	cmp	r4, #1
 8012e5e:	d013      	beq.n	8012e88 <__ieee754_atan2+0x130>
 8012e60:	2c02      	cmp	r4, #2
 8012e62:	d015      	beq.n	8012e90 <__ieee754_atan2+0x138>
 8012e64:	2c00      	cmp	r4, #0
 8012e66:	d098      	beq.n	8012d9a <__ieee754_atan2+0x42>
 8012e68:	a321      	add	r3, pc, #132	; (adr r3, 8012ef0 <__ieee754_atan2+0x198>)
 8012e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6e:	f7ed fa0b 	bl	8000288 <__aeabi_dsub>
 8012e72:	a321      	add	r3, pc, #132	; (adr r3, 8012ef8 <__ieee754_atan2+0x1a0>)
 8012e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e78:	e014      	b.n	8012ea4 <__ieee754_atan2+0x14c>
 8012e7a:	a121      	add	r1, pc, #132	; (adr r1, 8012f00 <__ieee754_atan2+0x1a8>)
 8012e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e80:	e7ec      	b.n	8012e5c <__ieee754_atan2+0x104>
 8012e82:	2000      	movs	r0, #0
 8012e84:	2100      	movs	r1, #0
 8012e86:	e7e9      	b.n	8012e5c <__ieee754_atan2+0x104>
 8012e88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	e784      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012e90:	a317      	add	r3, pc, #92	; (adr r3, 8012ef0 <__ieee754_atan2+0x198>)
 8012e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e96:	f7ed f9f7 	bl	8000288 <__aeabi_dsub>
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	460b      	mov	r3, r1
 8012e9e:	a116      	add	r1, pc, #88	; (adr r1, 8012ef8 <__ieee754_atan2+0x1a0>)
 8012ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ea4:	f7ed f9f0 	bl	8000288 <__aeabi_dsub>
 8012ea8:	e777      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012eaa:	a117      	add	r1, pc, #92	; (adr r1, 8012f08 <__ieee754_atan2+0x1b0>)
 8012eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012eb0:	e773      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012eb2:	a111      	add	r1, pc, #68	; (adr r1, 8012ef8 <__ieee754_atan2+0x1a0>)
 8012eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012eb8:	e76f      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012eba:	a111      	add	r1, pc, #68	; (adr r1, 8012f00 <__ieee754_atan2+0x1a8>)
 8012ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ec0:	e76b      	b.n	8012d9a <__ieee754_atan2+0x42>
 8012ec2:	bf00      	nop
 8012ec4:	f3af 8000 	nop.w
 8012ec8:	54442d18 	.word	0x54442d18
 8012ecc:	c00921fb 	.word	0xc00921fb
 8012ed0:	54442d18 	.word	0x54442d18
 8012ed4:	bff921fb 	.word	0xbff921fb
 8012ed8:	54442d18 	.word	0x54442d18
 8012edc:	bfe921fb 	.word	0xbfe921fb
 8012ee0:	7f3321d2 	.word	0x7f3321d2
 8012ee4:	4002d97c 	.word	0x4002d97c
 8012ee8:	7f3321d2 	.word	0x7f3321d2
 8012eec:	c002d97c 	.word	0xc002d97c
 8012ef0:	33145c07 	.word	0x33145c07
 8012ef4:	3ca1a626 	.word	0x3ca1a626
 8012ef8:	54442d18 	.word	0x54442d18
 8012efc:	400921fb 	.word	0x400921fb
 8012f00:	54442d18 	.word	0x54442d18
 8012f04:	3ff921fb 	.word	0x3ff921fb
 8012f08:	54442d18 	.word	0x54442d18
 8012f0c:	3fe921fb 	.word	0x3fe921fb
 8012f10:	7ff00000 	.word	0x7ff00000
 8012f14:	00000000 	.word	0x00000000

08012f18 <__ieee754_rem_pio2>:
 8012f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1c:	ec57 6b10 	vmov	r6, r7, d0
 8012f20:	4bc3      	ldr	r3, [pc, #780]	; (8013230 <__ieee754_rem_pio2+0x318>)
 8012f22:	b08d      	sub	sp, #52	; 0x34
 8012f24:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012f28:	4598      	cmp	r8, r3
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	9704      	str	r7, [sp, #16]
 8012f2e:	dc07      	bgt.n	8012f40 <__ieee754_rem_pio2+0x28>
 8012f30:	2200      	movs	r2, #0
 8012f32:	2300      	movs	r3, #0
 8012f34:	ed84 0b00 	vstr	d0, [r4]
 8012f38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012f3c:	2500      	movs	r5, #0
 8012f3e:	e027      	b.n	8012f90 <__ieee754_rem_pio2+0x78>
 8012f40:	4bbc      	ldr	r3, [pc, #752]	; (8013234 <__ieee754_rem_pio2+0x31c>)
 8012f42:	4598      	cmp	r8, r3
 8012f44:	dc75      	bgt.n	8013032 <__ieee754_rem_pio2+0x11a>
 8012f46:	9b04      	ldr	r3, [sp, #16]
 8012f48:	4dbb      	ldr	r5, [pc, #748]	; (8013238 <__ieee754_rem_pio2+0x320>)
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	ee10 0a10 	vmov	r0, s0
 8012f50:	a3a9      	add	r3, pc, #676	; (adr r3, 80131f8 <__ieee754_rem_pio2+0x2e0>)
 8012f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f56:	4639      	mov	r1, r7
 8012f58:	dd36      	ble.n	8012fc8 <__ieee754_rem_pio2+0xb0>
 8012f5a:	f7ed f995 	bl	8000288 <__aeabi_dsub>
 8012f5e:	45a8      	cmp	r8, r5
 8012f60:	4606      	mov	r6, r0
 8012f62:	460f      	mov	r7, r1
 8012f64:	d018      	beq.n	8012f98 <__ieee754_rem_pio2+0x80>
 8012f66:	a3a6      	add	r3, pc, #664	; (adr r3, 8013200 <__ieee754_rem_pio2+0x2e8>)
 8012f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6c:	f7ed f98c 	bl	8000288 <__aeabi_dsub>
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	e9c4 2300 	strd	r2, r3, [r4]
 8012f78:	4630      	mov	r0, r6
 8012f7a:	4639      	mov	r1, r7
 8012f7c:	f7ed f984 	bl	8000288 <__aeabi_dsub>
 8012f80:	a39f      	add	r3, pc, #636	; (adr r3, 8013200 <__ieee754_rem_pio2+0x2e8>)
 8012f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f86:	f7ed f97f 	bl	8000288 <__aeabi_dsub>
 8012f8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012f8e:	2501      	movs	r5, #1
 8012f90:	4628      	mov	r0, r5
 8012f92:	b00d      	add	sp, #52	; 0x34
 8012f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f98:	a39b      	add	r3, pc, #620	; (adr r3, 8013208 <__ieee754_rem_pio2+0x2f0>)
 8012f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9e:	f7ed f973 	bl	8000288 <__aeabi_dsub>
 8012fa2:	a39b      	add	r3, pc, #620	; (adr r3, 8013210 <__ieee754_rem_pio2+0x2f8>)
 8012fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa8:	4606      	mov	r6, r0
 8012faa:	460f      	mov	r7, r1
 8012fac:	f7ed f96c 	bl	8000288 <__aeabi_dsub>
 8012fb0:	4602      	mov	r2, r0
 8012fb2:	460b      	mov	r3, r1
 8012fb4:	e9c4 2300 	strd	r2, r3, [r4]
 8012fb8:	4630      	mov	r0, r6
 8012fba:	4639      	mov	r1, r7
 8012fbc:	f7ed f964 	bl	8000288 <__aeabi_dsub>
 8012fc0:	a393      	add	r3, pc, #588	; (adr r3, 8013210 <__ieee754_rem_pio2+0x2f8>)
 8012fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc6:	e7de      	b.n	8012f86 <__ieee754_rem_pio2+0x6e>
 8012fc8:	f7ed f960 	bl	800028c <__adddf3>
 8012fcc:	45a8      	cmp	r8, r5
 8012fce:	4606      	mov	r6, r0
 8012fd0:	460f      	mov	r7, r1
 8012fd2:	d016      	beq.n	8013002 <__ieee754_rem_pio2+0xea>
 8012fd4:	a38a      	add	r3, pc, #552	; (adr r3, 8013200 <__ieee754_rem_pio2+0x2e8>)
 8012fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fda:	f7ed f957 	bl	800028c <__adddf3>
 8012fde:	4602      	mov	r2, r0
 8012fe0:	460b      	mov	r3, r1
 8012fe2:	e9c4 2300 	strd	r2, r3, [r4]
 8012fe6:	4630      	mov	r0, r6
 8012fe8:	4639      	mov	r1, r7
 8012fea:	f7ed f94d 	bl	8000288 <__aeabi_dsub>
 8012fee:	a384      	add	r3, pc, #528	; (adr r3, 8013200 <__ieee754_rem_pio2+0x2e8>)
 8012ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff4:	f7ed f94a 	bl	800028c <__adddf3>
 8012ff8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8012ffc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013000:	e7c6      	b.n	8012f90 <__ieee754_rem_pio2+0x78>
 8013002:	a381      	add	r3, pc, #516	; (adr r3, 8013208 <__ieee754_rem_pio2+0x2f0>)
 8013004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013008:	f7ed f940 	bl	800028c <__adddf3>
 801300c:	a380      	add	r3, pc, #512	; (adr r3, 8013210 <__ieee754_rem_pio2+0x2f8>)
 801300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013012:	4606      	mov	r6, r0
 8013014:	460f      	mov	r7, r1
 8013016:	f7ed f939 	bl	800028c <__adddf3>
 801301a:	4602      	mov	r2, r0
 801301c:	460b      	mov	r3, r1
 801301e:	e9c4 2300 	strd	r2, r3, [r4]
 8013022:	4630      	mov	r0, r6
 8013024:	4639      	mov	r1, r7
 8013026:	f7ed f92f 	bl	8000288 <__aeabi_dsub>
 801302a:	a379      	add	r3, pc, #484	; (adr r3, 8013210 <__ieee754_rem_pio2+0x2f8>)
 801302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013030:	e7e0      	b.n	8012ff4 <__ieee754_rem_pio2+0xdc>
 8013032:	4b82      	ldr	r3, [pc, #520]	; (801323c <__ieee754_rem_pio2+0x324>)
 8013034:	4598      	cmp	r8, r3
 8013036:	f300 80d0 	bgt.w	80131da <__ieee754_rem_pio2+0x2c2>
 801303a:	f7ff fdd9 	bl	8012bf0 <fabs>
 801303e:	ec57 6b10 	vmov	r6, r7, d0
 8013042:	ee10 0a10 	vmov	r0, s0
 8013046:	a374      	add	r3, pc, #464	; (adr r3, 8013218 <__ieee754_rem_pio2+0x300>)
 8013048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304c:	4639      	mov	r1, r7
 801304e:	f7ed fad3 	bl	80005f8 <__aeabi_dmul>
 8013052:	2200      	movs	r2, #0
 8013054:	4b7a      	ldr	r3, [pc, #488]	; (8013240 <__ieee754_rem_pio2+0x328>)
 8013056:	f7ed f919 	bl	800028c <__adddf3>
 801305a:	f7ed fd7d 	bl	8000b58 <__aeabi_d2iz>
 801305e:	4605      	mov	r5, r0
 8013060:	f7ed fa60 	bl	8000524 <__aeabi_i2d>
 8013064:	a364      	add	r3, pc, #400	; (adr r3, 80131f8 <__ieee754_rem_pio2+0x2e0>)
 8013066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801306e:	f7ed fac3 	bl	80005f8 <__aeabi_dmul>
 8013072:	4602      	mov	r2, r0
 8013074:	460b      	mov	r3, r1
 8013076:	4630      	mov	r0, r6
 8013078:	4639      	mov	r1, r7
 801307a:	f7ed f905 	bl	8000288 <__aeabi_dsub>
 801307e:	a360      	add	r3, pc, #384	; (adr r3, 8013200 <__ieee754_rem_pio2+0x2e8>)
 8013080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013084:	4682      	mov	sl, r0
 8013086:	468b      	mov	fp, r1
 8013088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801308c:	f7ed fab4 	bl	80005f8 <__aeabi_dmul>
 8013090:	2d1f      	cmp	r5, #31
 8013092:	4606      	mov	r6, r0
 8013094:	460f      	mov	r7, r1
 8013096:	dc0c      	bgt.n	80130b2 <__ieee754_rem_pio2+0x19a>
 8013098:	1e6a      	subs	r2, r5, #1
 801309a:	4b6a      	ldr	r3, [pc, #424]	; (8013244 <__ieee754_rem_pio2+0x32c>)
 801309c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130a0:	4543      	cmp	r3, r8
 80130a2:	d006      	beq.n	80130b2 <__ieee754_rem_pio2+0x19a>
 80130a4:	4632      	mov	r2, r6
 80130a6:	463b      	mov	r3, r7
 80130a8:	4650      	mov	r0, sl
 80130aa:	4659      	mov	r1, fp
 80130ac:	f7ed f8ec 	bl	8000288 <__aeabi_dsub>
 80130b0:	e00e      	b.n	80130d0 <__ieee754_rem_pio2+0x1b8>
 80130b2:	4632      	mov	r2, r6
 80130b4:	463b      	mov	r3, r7
 80130b6:	4650      	mov	r0, sl
 80130b8:	4659      	mov	r1, fp
 80130ba:	f7ed f8e5 	bl	8000288 <__aeabi_dsub>
 80130be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80130c2:	9305      	str	r3, [sp, #20]
 80130c4:	9a05      	ldr	r2, [sp, #20]
 80130c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80130ca:	1ad3      	subs	r3, r2, r3
 80130cc:	2b10      	cmp	r3, #16
 80130ce:	dc02      	bgt.n	80130d6 <__ieee754_rem_pio2+0x1be>
 80130d0:	e9c4 0100 	strd	r0, r1, [r4]
 80130d4:	e039      	b.n	801314a <__ieee754_rem_pio2+0x232>
 80130d6:	a34c      	add	r3, pc, #304	; (adr r3, 8013208 <__ieee754_rem_pio2+0x2f0>)
 80130d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130e0:	f7ed fa8a 	bl	80005f8 <__aeabi_dmul>
 80130e4:	4606      	mov	r6, r0
 80130e6:	460f      	mov	r7, r1
 80130e8:	4602      	mov	r2, r0
 80130ea:	460b      	mov	r3, r1
 80130ec:	4650      	mov	r0, sl
 80130ee:	4659      	mov	r1, fp
 80130f0:	f7ed f8ca 	bl	8000288 <__aeabi_dsub>
 80130f4:	4602      	mov	r2, r0
 80130f6:	460b      	mov	r3, r1
 80130f8:	4680      	mov	r8, r0
 80130fa:	4689      	mov	r9, r1
 80130fc:	4650      	mov	r0, sl
 80130fe:	4659      	mov	r1, fp
 8013100:	f7ed f8c2 	bl	8000288 <__aeabi_dsub>
 8013104:	4632      	mov	r2, r6
 8013106:	463b      	mov	r3, r7
 8013108:	f7ed f8be 	bl	8000288 <__aeabi_dsub>
 801310c:	a340      	add	r3, pc, #256	; (adr r3, 8013210 <__ieee754_rem_pio2+0x2f8>)
 801310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013112:	4606      	mov	r6, r0
 8013114:	460f      	mov	r7, r1
 8013116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801311a:	f7ed fa6d 	bl	80005f8 <__aeabi_dmul>
 801311e:	4632      	mov	r2, r6
 8013120:	463b      	mov	r3, r7
 8013122:	f7ed f8b1 	bl	8000288 <__aeabi_dsub>
 8013126:	4602      	mov	r2, r0
 8013128:	460b      	mov	r3, r1
 801312a:	4606      	mov	r6, r0
 801312c:	460f      	mov	r7, r1
 801312e:	4640      	mov	r0, r8
 8013130:	4649      	mov	r1, r9
 8013132:	f7ed f8a9 	bl	8000288 <__aeabi_dsub>
 8013136:	9a05      	ldr	r2, [sp, #20]
 8013138:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801313c:	1ad3      	subs	r3, r2, r3
 801313e:	2b31      	cmp	r3, #49	; 0x31
 8013140:	dc20      	bgt.n	8013184 <__ieee754_rem_pio2+0x26c>
 8013142:	e9c4 0100 	strd	r0, r1, [r4]
 8013146:	46c2      	mov	sl, r8
 8013148:	46cb      	mov	fp, r9
 801314a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801314e:	4650      	mov	r0, sl
 8013150:	4642      	mov	r2, r8
 8013152:	464b      	mov	r3, r9
 8013154:	4659      	mov	r1, fp
 8013156:	f7ed f897 	bl	8000288 <__aeabi_dsub>
 801315a:	463b      	mov	r3, r7
 801315c:	4632      	mov	r2, r6
 801315e:	f7ed f893 	bl	8000288 <__aeabi_dsub>
 8013162:	9b04      	ldr	r3, [sp, #16]
 8013164:	2b00      	cmp	r3, #0
 8013166:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801316a:	f6bf af11 	bge.w	8012f90 <__ieee754_rem_pio2+0x78>
 801316e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013172:	6063      	str	r3, [r4, #4]
 8013174:	f8c4 8000 	str.w	r8, [r4]
 8013178:	60a0      	str	r0, [r4, #8]
 801317a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801317e:	60e3      	str	r3, [r4, #12]
 8013180:	426d      	negs	r5, r5
 8013182:	e705      	b.n	8012f90 <__ieee754_rem_pio2+0x78>
 8013184:	a326      	add	r3, pc, #152	; (adr r3, 8013220 <__ieee754_rem_pio2+0x308>)
 8013186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801318e:	f7ed fa33 	bl	80005f8 <__aeabi_dmul>
 8013192:	4606      	mov	r6, r0
 8013194:	460f      	mov	r7, r1
 8013196:	4602      	mov	r2, r0
 8013198:	460b      	mov	r3, r1
 801319a:	4640      	mov	r0, r8
 801319c:	4649      	mov	r1, r9
 801319e:	f7ed f873 	bl	8000288 <__aeabi_dsub>
 80131a2:	4602      	mov	r2, r0
 80131a4:	460b      	mov	r3, r1
 80131a6:	4682      	mov	sl, r0
 80131a8:	468b      	mov	fp, r1
 80131aa:	4640      	mov	r0, r8
 80131ac:	4649      	mov	r1, r9
 80131ae:	f7ed f86b 	bl	8000288 <__aeabi_dsub>
 80131b2:	4632      	mov	r2, r6
 80131b4:	463b      	mov	r3, r7
 80131b6:	f7ed f867 	bl	8000288 <__aeabi_dsub>
 80131ba:	a31b      	add	r3, pc, #108	; (adr r3, 8013228 <__ieee754_rem_pio2+0x310>)
 80131bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c0:	4606      	mov	r6, r0
 80131c2:	460f      	mov	r7, r1
 80131c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131c8:	f7ed fa16 	bl	80005f8 <__aeabi_dmul>
 80131cc:	4632      	mov	r2, r6
 80131ce:	463b      	mov	r3, r7
 80131d0:	f7ed f85a 	bl	8000288 <__aeabi_dsub>
 80131d4:	4606      	mov	r6, r0
 80131d6:	460f      	mov	r7, r1
 80131d8:	e764      	b.n	80130a4 <__ieee754_rem_pio2+0x18c>
 80131da:	4b1b      	ldr	r3, [pc, #108]	; (8013248 <__ieee754_rem_pio2+0x330>)
 80131dc:	4598      	cmp	r8, r3
 80131de:	dd35      	ble.n	801324c <__ieee754_rem_pio2+0x334>
 80131e0:	ee10 2a10 	vmov	r2, s0
 80131e4:	463b      	mov	r3, r7
 80131e6:	4630      	mov	r0, r6
 80131e8:	4639      	mov	r1, r7
 80131ea:	f7ed f84d 	bl	8000288 <__aeabi_dsub>
 80131ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80131f2:	e9c4 0100 	strd	r0, r1, [r4]
 80131f6:	e6a1      	b.n	8012f3c <__ieee754_rem_pio2+0x24>
 80131f8:	54400000 	.word	0x54400000
 80131fc:	3ff921fb 	.word	0x3ff921fb
 8013200:	1a626331 	.word	0x1a626331
 8013204:	3dd0b461 	.word	0x3dd0b461
 8013208:	1a600000 	.word	0x1a600000
 801320c:	3dd0b461 	.word	0x3dd0b461
 8013210:	2e037073 	.word	0x2e037073
 8013214:	3ba3198a 	.word	0x3ba3198a
 8013218:	6dc9c883 	.word	0x6dc9c883
 801321c:	3fe45f30 	.word	0x3fe45f30
 8013220:	2e000000 	.word	0x2e000000
 8013224:	3ba3198a 	.word	0x3ba3198a
 8013228:	252049c1 	.word	0x252049c1
 801322c:	397b839a 	.word	0x397b839a
 8013230:	3fe921fb 	.word	0x3fe921fb
 8013234:	4002d97b 	.word	0x4002d97b
 8013238:	3ff921fb 	.word	0x3ff921fb
 801323c:	413921fb 	.word	0x413921fb
 8013240:	3fe00000 	.word	0x3fe00000
 8013244:	080155f8 	.word	0x080155f8
 8013248:	7fefffff 	.word	0x7fefffff
 801324c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013250:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013254:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013258:	4630      	mov	r0, r6
 801325a:	460f      	mov	r7, r1
 801325c:	f7ed fc7c 	bl	8000b58 <__aeabi_d2iz>
 8013260:	f7ed f960 	bl	8000524 <__aeabi_i2d>
 8013264:	4602      	mov	r2, r0
 8013266:	460b      	mov	r3, r1
 8013268:	4630      	mov	r0, r6
 801326a:	4639      	mov	r1, r7
 801326c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013270:	f7ed f80a 	bl	8000288 <__aeabi_dsub>
 8013274:	2200      	movs	r2, #0
 8013276:	4b1f      	ldr	r3, [pc, #124]	; (80132f4 <__ieee754_rem_pio2+0x3dc>)
 8013278:	f7ed f9be 	bl	80005f8 <__aeabi_dmul>
 801327c:	460f      	mov	r7, r1
 801327e:	4606      	mov	r6, r0
 8013280:	f7ed fc6a 	bl	8000b58 <__aeabi_d2iz>
 8013284:	f7ed f94e 	bl	8000524 <__aeabi_i2d>
 8013288:	4602      	mov	r2, r0
 801328a:	460b      	mov	r3, r1
 801328c:	4630      	mov	r0, r6
 801328e:	4639      	mov	r1, r7
 8013290:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013294:	f7ec fff8 	bl	8000288 <__aeabi_dsub>
 8013298:	2200      	movs	r2, #0
 801329a:	4b16      	ldr	r3, [pc, #88]	; (80132f4 <__ieee754_rem_pio2+0x3dc>)
 801329c:	f7ed f9ac 	bl	80005f8 <__aeabi_dmul>
 80132a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80132a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80132a8:	f04f 0803 	mov.w	r8, #3
 80132ac:	2600      	movs	r6, #0
 80132ae:	2700      	movs	r7, #0
 80132b0:	4632      	mov	r2, r6
 80132b2:	463b      	mov	r3, r7
 80132b4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80132b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80132bc:	f7ed fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80132c0:	b9b0      	cbnz	r0, 80132f0 <__ieee754_rem_pio2+0x3d8>
 80132c2:	4b0d      	ldr	r3, [pc, #52]	; (80132f8 <__ieee754_rem_pio2+0x3e0>)
 80132c4:	9301      	str	r3, [sp, #4]
 80132c6:	2302      	movs	r3, #2
 80132c8:	9300      	str	r3, [sp, #0]
 80132ca:	462a      	mov	r2, r5
 80132cc:	4643      	mov	r3, r8
 80132ce:	4621      	mov	r1, r4
 80132d0:	a806      	add	r0, sp, #24
 80132d2:	f000 fa39 	bl	8013748 <__kernel_rem_pio2>
 80132d6:	9b04      	ldr	r3, [sp, #16]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	4605      	mov	r5, r0
 80132dc:	f6bf ae58 	bge.w	8012f90 <__ieee754_rem_pio2+0x78>
 80132e0:	6863      	ldr	r3, [r4, #4]
 80132e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80132e6:	6063      	str	r3, [r4, #4]
 80132e8:	68e3      	ldr	r3, [r4, #12]
 80132ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80132ee:	e746      	b.n	801317e <__ieee754_rem_pio2+0x266>
 80132f0:	46d0      	mov	r8, sl
 80132f2:	e7dd      	b.n	80132b0 <__ieee754_rem_pio2+0x398>
 80132f4:	41700000 	.word	0x41700000
 80132f8:	08015678 	.word	0x08015678

080132fc <__ieee754_sqrt>:
 80132fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013300:	4955      	ldr	r1, [pc, #340]	; (8013458 <__ieee754_sqrt+0x15c>)
 8013302:	ec55 4b10 	vmov	r4, r5, d0
 8013306:	43a9      	bics	r1, r5
 8013308:	462b      	mov	r3, r5
 801330a:	462a      	mov	r2, r5
 801330c:	d112      	bne.n	8013334 <__ieee754_sqrt+0x38>
 801330e:	ee10 2a10 	vmov	r2, s0
 8013312:	ee10 0a10 	vmov	r0, s0
 8013316:	4629      	mov	r1, r5
 8013318:	f7ed f96e 	bl	80005f8 <__aeabi_dmul>
 801331c:	4602      	mov	r2, r0
 801331e:	460b      	mov	r3, r1
 8013320:	4620      	mov	r0, r4
 8013322:	4629      	mov	r1, r5
 8013324:	f7ec ffb2 	bl	800028c <__adddf3>
 8013328:	4604      	mov	r4, r0
 801332a:	460d      	mov	r5, r1
 801332c:	ec45 4b10 	vmov	d0, r4, r5
 8013330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013334:	2d00      	cmp	r5, #0
 8013336:	ee10 0a10 	vmov	r0, s0
 801333a:	4621      	mov	r1, r4
 801333c:	dc0f      	bgt.n	801335e <__ieee754_sqrt+0x62>
 801333e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013342:	4330      	orrs	r0, r6
 8013344:	d0f2      	beq.n	801332c <__ieee754_sqrt+0x30>
 8013346:	b155      	cbz	r5, 801335e <__ieee754_sqrt+0x62>
 8013348:	ee10 2a10 	vmov	r2, s0
 801334c:	4620      	mov	r0, r4
 801334e:	4629      	mov	r1, r5
 8013350:	f7ec ff9a 	bl	8000288 <__aeabi_dsub>
 8013354:	4602      	mov	r2, r0
 8013356:	460b      	mov	r3, r1
 8013358:	f7ed fa78 	bl	800084c <__aeabi_ddiv>
 801335c:	e7e4      	b.n	8013328 <__ieee754_sqrt+0x2c>
 801335e:	151b      	asrs	r3, r3, #20
 8013360:	d073      	beq.n	801344a <__ieee754_sqrt+0x14e>
 8013362:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013366:	07dd      	lsls	r5, r3, #31
 8013368:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801336c:	bf48      	it	mi
 801336e:	0fc8      	lsrmi	r0, r1, #31
 8013370:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013374:	bf44      	itt	mi
 8013376:	0049      	lslmi	r1, r1, #1
 8013378:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801337c:	2500      	movs	r5, #0
 801337e:	1058      	asrs	r0, r3, #1
 8013380:	0fcb      	lsrs	r3, r1, #31
 8013382:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013386:	0049      	lsls	r1, r1, #1
 8013388:	2316      	movs	r3, #22
 801338a:	462c      	mov	r4, r5
 801338c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013390:	19a7      	adds	r7, r4, r6
 8013392:	4297      	cmp	r7, r2
 8013394:	bfde      	ittt	le
 8013396:	19bc      	addle	r4, r7, r6
 8013398:	1bd2      	suble	r2, r2, r7
 801339a:	19ad      	addle	r5, r5, r6
 801339c:	0fcf      	lsrs	r7, r1, #31
 801339e:	3b01      	subs	r3, #1
 80133a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80133a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80133a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80133ac:	d1f0      	bne.n	8013390 <__ieee754_sqrt+0x94>
 80133ae:	f04f 0c20 	mov.w	ip, #32
 80133b2:	469e      	mov	lr, r3
 80133b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80133b8:	42a2      	cmp	r2, r4
 80133ba:	eb06 070e 	add.w	r7, r6, lr
 80133be:	dc02      	bgt.n	80133c6 <__ieee754_sqrt+0xca>
 80133c0:	d112      	bne.n	80133e8 <__ieee754_sqrt+0xec>
 80133c2:	428f      	cmp	r7, r1
 80133c4:	d810      	bhi.n	80133e8 <__ieee754_sqrt+0xec>
 80133c6:	2f00      	cmp	r7, #0
 80133c8:	eb07 0e06 	add.w	lr, r7, r6
 80133cc:	da42      	bge.n	8013454 <__ieee754_sqrt+0x158>
 80133ce:	f1be 0f00 	cmp.w	lr, #0
 80133d2:	db3f      	blt.n	8013454 <__ieee754_sqrt+0x158>
 80133d4:	f104 0801 	add.w	r8, r4, #1
 80133d8:	1b12      	subs	r2, r2, r4
 80133da:	428f      	cmp	r7, r1
 80133dc:	bf88      	it	hi
 80133de:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80133e2:	1bc9      	subs	r1, r1, r7
 80133e4:	4433      	add	r3, r6
 80133e6:	4644      	mov	r4, r8
 80133e8:	0052      	lsls	r2, r2, #1
 80133ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80133ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80133f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80133f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80133fa:	d1dd      	bne.n	80133b8 <__ieee754_sqrt+0xbc>
 80133fc:	430a      	orrs	r2, r1
 80133fe:	d006      	beq.n	801340e <__ieee754_sqrt+0x112>
 8013400:	1c5c      	adds	r4, r3, #1
 8013402:	bf13      	iteet	ne
 8013404:	3301      	addne	r3, #1
 8013406:	3501      	addeq	r5, #1
 8013408:	4663      	moveq	r3, ip
 801340a:	f023 0301 	bicne.w	r3, r3, #1
 801340e:	106a      	asrs	r2, r5, #1
 8013410:	085b      	lsrs	r3, r3, #1
 8013412:	07e9      	lsls	r1, r5, #31
 8013414:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013418:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801341c:	bf48      	it	mi
 801341e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013422:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8013426:	461c      	mov	r4, r3
 8013428:	e780      	b.n	801332c <__ieee754_sqrt+0x30>
 801342a:	0aca      	lsrs	r2, r1, #11
 801342c:	3815      	subs	r0, #21
 801342e:	0549      	lsls	r1, r1, #21
 8013430:	2a00      	cmp	r2, #0
 8013432:	d0fa      	beq.n	801342a <__ieee754_sqrt+0x12e>
 8013434:	02d6      	lsls	r6, r2, #11
 8013436:	d50a      	bpl.n	801344e <__ieee754_sqrt+0x152>
 8013438:	f1c3 0420 	rsb	r4, r3, #32
 801343c:	fa21 f404 	lsr.w	r4, r1, r4
 8013440:	1e5d      	subs	r5, r3, #1
 8013442:	4099      	lsls	r1, r3
 8013444:	4322      	orrs	r2, r4
 8013446:	1b43      	subs	r3, r0, r5
 8013448:	e78b      	b.n	8013362 <__ieee754_sqrt+0x66>
 801344a:	4618      	mov	r0, r3
 801344c:	e7f0      	b.n	8013430 <__ieee754_sqrt+0x134>
 801344e:	0052      	lsls	r2, r2, #1
 8013450:	3301      	adds	r3, #1
 8013452:	e7ef      	b.n	8013434 <__ieee754_sqrt+0x138>
 8013454:	46a0      	mov	r8, r4
 8013456:	e7bf      	b.n	80133d8 <__ieee754_sqrt+0xdc>
 8013458:	7ff00000 	.word	0x7ff00000

0801345c <__ieee754_atan2f>:
 801345c:	ee10 2a90 	vmov	r2, s1
 8013460:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013464:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013468:	b510      	push	{r4, lr}
 801346a:	eef0 7a40 	vmov.f32	s15, s0
 801346e:	dc06      	bgt.n	801347e <__ieee754_atan2f+0x22>
 8013470:	ee10 0a10 	vmov	r0, s0
 8013474:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013478:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801347c:	dd04      	ble.n	8013488 <__ieee754_atan2f+0x2c>
 801347e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013482:	eeb0 0a67 	vmov.f32	s0, s15
 8013486:	bd10      	pop	{r4, pc}
 8013488:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801348c:	d103      	bne.n	8013496 <__ieee754_atan2f+0x3a>
 801348e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013492:	f000 be53 	b.w	801413c <atanf>
 8013496:	1794      	asrs	r4, r2, #30
 8013498:	f004 0402 	and.w	r4, r4, #2
 801349c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80134a0:	b943      	cbnz	r3, 80134b4 <__ieee754_atan2f+0x58>
 80134a2:	2c02      	cmp	r4, #2
 80134a4:	d06e      	beq.n	8013584 <__ieee754_atan2f+0x128>
 80134a6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 801358c <__ieee754_atan2f+0x130>
 80134aa:	2c03      	cmp	r4, #3
 80134ac:	bf08      	it	eq
 80134ae:	eef0 7a47 	vmoveq.f32	s15, s14
 80134b2:	e7e6      	b.n	8013482 <__ieee754_atan2f+0x26>
 80134b4:	b941      	cbnz	r1, 80134c8 <__ieee754_atan2f+0x6c>
 80134b6:	eddf 7a36 	vldr	s15, [pc, #216]	; 8013590 <__ieee754_atan2f+0x134>
 80134ba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013594 <__ieee754_atan2f+0x138>
 80134be:	2800      	cmp	r0, #0
 80134c0:	bfb8      	it	lt
 80134c2:	eef0 7a47 	vmovlt.f32	s15, s14
 80134c6:	e7dc      	b.n	8013482 <__ieee754_atan2f+0x26>
 80134c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80134cc:	d122      	bne.n	8013514 <__ieee754_atan2f+0xb8>
 80134ce:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80134d2:	d112      	bne.n	80134fa <__ieee754_atan2f+0x9e>
 80134d4:	2c02      	cmp	r4, #2
 80134d6:	d00a      	beq.n	80134ee <__ieee754_atan2f+0x92>
 80134d8:	2c03      	cmp	r4, #3
 80134da:	d00b      	beq.n	80134f4 <__ieee754_atan2f+0x98>
 80134dc:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8013598 <__ieee754_atan2f+0x13c>
 80134e0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 801359c <__ieee754_atan2f+0x140>
 80134e4:	2c01      	cmp	r4, #1
 80134e6:	bf18      	it	ne
 80134e8:	eef0 7a47 	vmovne.f32	s15, s14
 80134ec:	e7c9      	b.n	8013482 <__ieee754_atan2f+0x26>
 80134ee:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80135a0 <__ieee754_atan2f+0x144>
 80134f2:	e7c6      	b.n	8013482 <__ieee754_atan2f+0x26>
 80134f4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80135a4 <__ieee754_atan2f+0x148>
 80134f8:	e7c3      	b.n	8013482 <__ieee754_atan2f+0x26>
 80134fa:	2c02      	cmp	r4, #2
 80134fc:	d042      	beq.n	8013584 <__ieee754_atan2f+0x128>
 80134fe:	2c03      	cmp	r4, #3
 8013500:	d005      	beq.n	801350e <__ieee754_atan2f+0xb2>
 8013502:	2c01      	cmp	r4, #1
 8013504:	eddf 7a28 	vldr	s15, [pc, #160]	; 80135a8 <__ieee754_atan2f+0x14c>
 8013508:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80135ac <__ieee754_atan2f+0x150>
 801350c:	e7eb      	b.n	80134e6 <__ieee754_atan2f+0x8a>
 801350e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801358c <__ieee754_atan2f+0x130>
 8013512:	e7b6      	b.n	8013482 <__ieee754_atan2f+0x26>
 8013514:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013518:	d0cd      	beq.n	80134b6 <__ieee754_atan2f+0x5a>
 801351a:	1a5b      	subs	r3, r3, r1
 801351c:	15db      	asrs	r3, r3, #23
 801351e:	2b3c      	cmp	r3, #60	; 0x3c
 8013520:	dc1a      	bgt.n	8013558 <__ieee754_atan2f+0xfc>
 8013522:	2a00      	cmp	r2, #0
 8013524:	da01      	bge.n	801352a <__ieee754_atan2f+0xce>
 8013526:	333c      	adds	r3, #60	; 0x3c
 8013528:	db19      	blt.n	801355e <__ieee754_atan2f+0x102>
 801352a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801352e:	f000 fed9 	bl	80142e4 <fabsf>
 8013532:	f000 fe03 	bl	801413c <atanf>
 8013536:	eef0 7a40 	vmov.f32	s15, s0
 801353a:	2c01      	cmp	r4, #1
 801353c:	d012      	beq.n	8013564 <__ieee754_atan2f+0x108>
 801353e:	2c02      	cmp	r4, #2
 8013540:	d017      	beq.n	8013572 <__ieee754_atan2f+0x116>
 8013542:	2c00      	cmp	r4, #0
 8013544:	d09d      	beq.n	8013482 <__ieee754_atan2f+0x26>
 8013546:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80135b0 <__ieee754_atan2f+0x154>
 801354a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801354e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80135b4 <__ieee754_atan2f+0x158>
 8013552:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013556:	e794      	b.n	8013482 <__ieee754_atan2f+0x26>
 8013558:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013590 <__ieee754_atan2f+0x134>
 801355c:	e7ed      	b.n	801353a <__ieee754_atan2f+0xde>
 801355e:	eddf 7a13 	vldr	s15, [pc, #76]	; 80135ac <__ieee754_atan2f+0x150>
 8013562:	e7ea      	b.n	801353a <__ieee754_atan2f+0xde>
 8013564:	ee17 3a90 	vmov	r3, s15
 8013568:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801356c:	ee07 3a90 	vmov	s15, r3
 8013570:	e787      	b.n	8013482 <__ieee754_atan2f+0x26>
 8013572:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80135b0 <__ieee754_atan2f+0x154>
 8013576:	ee77 7a87 	vadd.f32	s15, s15, s14
 801357a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80135b4 <__ieee754_atan2f+0x158>
 801357e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013582:	e77e      	b.n	8013482 <__ieee754_atan2f+0x26>
 8013584:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80135b4 <__ieee754_atan2f+0x158>
 8013588:	e77b      	b.n	8013482 <__ieee754_atan2f+0x26>
 801358a:	bf00      	nop
 801358c:	c0490fdb 	.word	0xc0490fdb
 8013590:	3fc90fdb 	.word	0x3fc90fdb
 8013594:	bfc90fdb 	.word	0xbfc90fdb
 8013598:	bf490fdb 	.word	0xbf490fdb
 801359c:	3f490fdb 	.word	0x3f490fdb
 80135a0:	4016cbe4 	.word	0x4016cbe4
 80135a4:	c016cbe4 	.word	0xc016cbe4
 80135a8:	80000000 	.word	0x80000000
 80135ac:	00000000 	.word	0x00000000
 80135b0:	33bbbd2e 	.word	0x33bbbd2e
 80135b4:	40490fdb 	.word	0x40490fdb

080135b8 <__kernel_cos>:
 80135b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135bc:	ec59 8b10 	vmov	r8, r9, d0
 80135c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80135c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80135c8:	ed2d 8b02 	vpush	{d8}
 80135cc:	eeb0 8a41 	vmov.f32	s16, s2
 80135d0:	eef0 8a61 	vmov.f32	s17, s3
 80135d4:	da07      	bge.n	80135e6 <__kernel_cos+0x2e>
 80135d6:	ee10 0a10 	vmov	r0, s0
 80135da:	4649      	mov	r1, r9
 80135dc:	f7ed fabc 	bl	8000b58 <__aeabi_d2iz>
 80135e0:	2800      	cmp	r0, #0
 80135e2:	f000 8089 	beq.w	80136f8 <__kernel_cos+0x140>
 80135e6:	4642      	mov	r2, r8
 80135e8:	464b      	mov	r3, r9
 80135ea:	4640      	mov	r0, r8
 80135ec:	4649      	mov	r1, r9
 80135ee:	f7ed f803 	bl	80005f8 <__aeabi_dmul>
 80135f2:	2200      	movs	r2, #0
 80135f4:	4b4e      	ldr	r3, [pc, #312]	; (8013730 <__kernel_cos+0x178>)
 80135f6:	4604      	mov	r4, r0
 80135f8:	460d      	mov	r5, r1
 80135fa:	f7ec fffd 	bl	80005f8 <__aeabi_dmul>
 80135fe:	a340      	add	r3, pc, #256	; (adr r3, 8013700 <__kernel_cos+0x148>)
 8013600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013604:	4682      	mov	sl, r0
 8013606:	468b      	mov	fp, r1
 8013608:	4620      	mov	r0, r4
 801360a:	4629      	mov	r1, r5
 801360c:	f7ec fff4 	bl	80005f8 <__aeabi_dmul>
 8013610:	a33d      	add	r3, pc, #244	; (adr r3, 8013708 <__kernel_cos+0x150>)
 8013612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013616:	f7ec fe39 	bl	800028c <__adddf3>
 801361a:	4622      	mov	r2, r4
 801361c:	462b      	mov	r3, r5
 801361e:	f7ec ffeb 	bl	80005f8 <__aeabi_dmul>
 8013622:	a33b      	add	r3, pc, #236	; (adr r3, 8013710 <__kernel_cos+0x158>)
 8013624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013628:	f7ec fe2e 	bl	8000288 <__aeabi_dsub>
 801362c:	4622      	mov	r2, r4
 801362e:	462b      	mov	r3, r5
 8013630:	f7ec ffe2 	bl	80005f8 <__aeabi_dmul>
 8013634:	a338      	add	r3, pc, #224	; (adr r3, 8013718 <__kernel_cos+0x160>)
 8013636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363a:	f7ec fe27 	bl	800028c <__adddf3>
 801363e:	4622      	mov	r2, r4
 8013640:	462b      	mov	r3, r5
 8013642:	f7ec ffd9 	bl	80005f8 <__aeabi_dmul>
 8013646:	a336      	add	r3, pc, #216	; (adr r3, 8013720 <__kernel_cos+0x168>)
 8013648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364c:	f7ec fe1c 	bl	8000288 <__aeabi_dsub>
 8013650:	4622      	mov	r2, r4
 8013652:	462b      	mov	r3, r5
 8013654:	f7ec ffd0 	bl	80005f8 <__aeabi_dmul>
 8013658:	a333      	add	r3, pc, #204	; (adr r3, 8013728 <__kernel_cos+0x170>)
 801365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801365e:	f7ec fe15 	bl	800028c <__adddf3>
 8013662:	4622      	mov	r2, r4
 8013664:	462b      	mov	r3, r5
 8013666:	f7ec ffc7 	bl	80005f8 <__aeabi_dmul>
 801366a:	4622      	mov	r2, r4
 801366c:	462b      	mov	r3, r5
 801366e:	f7ec ffc3 	bl	80005f8 <__aeabi_dmul>
 8013672:	ec53 2b18 	vmov	r2, r3, d8
 8013676:	4604      	mov	r4, r0
 8013678:	460d      	mov	r5, r1
 801367a:	4640      	mov	r0, r8
 801367c:	4649      	mov	r1, r9
 801367e:	f7ec ffbb 	bl	80005f8 <__aeabi_dmul>
 8013682:	460b      	mov	r3, r1
 8013684:	4602      	mov	r2, r0
 8013686:	4629      	mov	r1, r5
 8013688:	4620      	mov	r0, r4
 801368a:	f7ec fdfd 	bl	8000288 <__aeabi_dsub>
 801368e:	4b29      	ldr	r3, [pc, #164]	; (8013734 <__kernel_cos+0x17c>)
 8013690:	429e      	cmp	r6, r3
 8013692:	4680      	mov	r8, r0
 8013694:	4689      	mov	r9, r1
 8013696:	dc11      	bgt.n	80136bc <__kernel_cos+0x104>
 8013698:	4602      	mov	r2, r0
 801369a:	460b      	mov	r3, r1
 801369c:	4650      	mov	r0, sl
 801369e:	4659      	mov	r1, fp
 80136a0:	f7ec fdf2 	bl	8000288 <__aeabi_dsub>
 80136a4:	460b      	mov	r3, r1
 80136a6:	4924      	ldr	r1, [pc, #144]	; (8013738 <__kernel_cos+0x180>)
 80136a8:	4602      	mov	r2, r0
 80136aa:	2000      	movs	r0, #0
 80136ac:	f7ec fdec 	bl	8000288 <__aeabi_dsub>
 80136b0:	ecbd 8b02 	vpop	{d8}
 80136b4:	ec41 0b10 	vmov	d0, r0, r1
 80136b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136bc:	4b1f      	ldr	r3, [pc, #124]	; (801373c <__kernel_cos+0x184>)
 80136be:	491e      	ldr	r1, [pc, #120]	; (8013738 <__kernel_cos+0x180>)
 80136c0:	429e      	cmp	r6, r3
 80136c2:	bfcc      	ite	gt
 80136c4:	4d1e      	ldrgt	r5, [pc, #120]	; (8013740 <__kernel_cos+0x188>)
 80136c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80136ca:	2400      	movs	r4, #0
 80136cc:	4622      	mov	r2, r4
 80136ce:	462b      	mov	r3, r5
 80136d0:	2000      	movs	r0, #0
 80136d2:	f7ec fdd9 	bl	8000288 <__aeabi_dsub>
 80136d6:	4622      	mov	r2, r4
 80136d8:	4606      	mov	r6, r0
 80136da:	460f      	mov	r7, r1
 80136dc:	462b      	mov	r3, r5
 80136de:	4650      	mov	r0, sl
 80136e0:	4659      	mov	r1, fp
 80136e2:	f7ec fdd1 	bl	8000288 <__aeabi_dsub>
 80136e6:	4642      	mov	r2, r8
 80136e8:	464b      	mov	r3, r9
 80136ea:	f7ec fdcd 	bl	8000288 <__aeabi_dsub>
 80136ee:	4602      	mov	r2, r0
 80136f0:	460b      	mov	r3, r1
 80136f2:	4630      	mov	r0, r6
 80136f4:	4639      	mov	r1, r7
 80136f6:	e7d9      	b.n	80136ac <__kernel_cos+0xf4>
 80136f8:	2000      	movs	r0, #0
 80136fa:	490f      	ldr	r1, [pc, #60]	; (8013738 <__kernel_cos+0x180>)
 80136fc:	e7d8      	b.n	80136b0 <__kernel_cos+0xf8>
 80136fe:	bf00      	nop
 8013700:	be8838d4 	.word	0xbe8838d4
 8013704:	bda8fae9 	.word	0xbda8fae9
 8013708:	bdb4b1c4 	.word	0xbdb4b1c4
 801370c:	3e21ee9e 	.word	0x3e21ee9e
 8013710:	809c52ad 	.word	0x809c52ad
 8013714:	3e927e4f 	.word	0x3e927e4f
 8013718:	19cb1590 	.word	0x19cb1590
 801371c:	3efa01a0 	.word	0x3efa01a0
 8013720:	16c15177 	.word	0x16c15177
 8013724:	3f56c16c 	.word	0x3f56c16c
 8013728:	5555554c 	.word	0x5555554c
 801372c:	3fa55555 	.word	0x3fa55555
 8013730:	3fe00000 	.word	0x3fe00000
 8013734:	3fd33332 	.word	0x3fd33332
 8013738:	3ff00000 	.word	0x3ff00000
 801373c:	3fe90000 	.word	0x3fe90000
 8013740:	3fd20000 	.word	0x3fd20000
 8013744:	00000000 	.word	0x00000000

08013748 <__kernel_rem_pio2>:
 8013748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801374c:	ed2d 8b02 	vpush	{d8}
 8013750:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013754:	1ed4      	subs	r4, r2, #3
 8013756:	9308      	str	r3, [sp, #32]
 8013758:	9101      	str	r1, [sp, #4]
 801375a:	4bc5      	ldr	r3, [pc, #788]	; (8013a70 <__kernel_rem_pio2+0x328>)
 801375c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801375e:	9009      	str	r0, [sp, #36]	; 0x24
 8013760:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013764:	9304      	str	r3, [sp, #16]
 8013766:	9b08      	ldr	r3, [sp, #32]
 8013768:	3b01      	subs	r3, #1
 801376a:	9307      	str	r3, [sp, #28]
 801376c:	2318      	movs	r3, #24
 801376e:	fb94 f4f3 	sdiv	r4, r4, r3
 8013772:	f06f 0317 	mvn.w	r3, #23
 8013776:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801377a:	fb04 3303 	mla	r3, r4, r3, r3
 801377e:	eb03 0a02 	add.w	sl, r3, r2
 8013782:	9b04      	ldr	r3, [sp, #16]
 8013784:	9a07      	ldr	r2, [sp, #28]
 8013786:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013a60 <__kernel_rem_pio2+0x318>
 801378a:	eb03 0802 	add.w	r8, r3, r2
 801378e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013790:	1aa7      	subs	r7, r4, r2
 8013792:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013796:	ae22      	add	r6, sp, #136	; 0x88
 8013798:	2500      	movs	r5, #0
 801379a:	4545      	cmp	r5, r8
 801379c:	dd13      	ble.n	80137c6 <__kernel_rem_pio2+0x7e>
 801379e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8013a60 <__kernel_rem_pio2+0x318>
 80137a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80137a6:	2600      	movs	r6, #0
 80137a8:	9b04      	ldr	r3, [sp, #16]
 80137aa:	429e      	cmp	r6, r3
 80137ac:	dc32      	bgt.n	8013814 <__kernel_rem_pio2+0xcc>
 80137ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137b0:	9302      	str	r3, [sp, #8]
 80137b2:	9b08      	ldr	r3, [sp, #32]
 80137b4:	199d      	adds	r5, r3, r6
 80137b6:	ab22      	add	r3, sp, #136	; 0x88
 80137b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80137bc:	9306      	str	r3, [sp, #24]
 80137be:	ec59 8b18 	vmov	r8, r9, d8
 80137c2:	2700      	movs	r7, #0
 80137c4:	e01f      	b.n	8013806 <__kernel_rem_pio2+0xbe>
 80137c6:	42ef      	cmn	r7, r5
 80137c8:	d407      	bmi.n	80137da <__kernel_rem_pio2+0x92>
 80137ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80137ce:	f7ec fea9 	bl	8000524 <__aeabi_i2d>
 80137d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80137d6:	3501      	adds	r5, #1
 80137d8:	e7df      	b.n	801379a <__kernel_rem_pio2+0x52>
 80137da:	ec51 0b18 	vmov	r0, r1, d8
 80137de:	e7f8      	b.n	80137d2 <__kernel_rem_pio2+0x8a>
 80137e0:	9906      	ldr	r1, [sp, #24]
 80137e2:	9d02      	ldr	r5, [sp, #8]
 80137e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80137e8:	9106      	str	r1, [sp, #24]
 80137ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80137ee:	9502      	str	r5, [sp, #8]
 80137f0:	f7ec ff02 	bl	80005f8 <__aeabi_dmul>
 80137f4:	4602      	mov	r2, r0
 80137f6:	460b      	mov	r3, r1
 80137f8:	4640      	mov	r0, r8
 80137fa:	4649      	mov	r1, r9
 80137fc:	f7ec fd46 	bl	800028c <__adddf3>
 8013800:	3701      	adds	r7, #1
 8013802:	4680      	mov	r8, r0
 8013804:	4689      	mov	r9, r1
 8013806:	9b07      	ldr	r3, [sp, #28]
 8013808:	429f      	cmp	r7, r3
 801380a:	dde9      	ble.n	80137e0 <__kernel_rem_pio2+0x98>
 801380c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8013810:	3601      	adds	r6, #1
 8013812:	e7c9      	b.n	80137a8 <__kernel_rem_pio2+0x60>
 8013814:	9b04      	ldr	r3, [sp, #16]
 8013816:	aa0e      	add	r2, sp, #56	; 0x38
 8013818:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801381c:	930c      	str	r3, [sp, #48]	; 0x30
 801381e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013820:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013824:	9c04      	ldr	r4, [sp, #16]
 8013826:	930b      	str	r3, [sp, #44]	; 0x2c
 8013828:	ab9a      	add	r3, sp, #616	; 0x268
 801382a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801382e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013832:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013836:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801383a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801383e:	ab9a      	add	r3, sp, #616	; 0x268
 8013840:	445b      	add	r3, fp
 8013842:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8013846:	2500      	movs	r5, #0
 8013848:	1b63      	subs	r3, r4, r5
 801384a:	2b00      	cmp	r3, #0
 801384c:	dc78      	bgt.n	8013940 <__kernel_rem_pio2+0x1f8>
 801384e:	4650      	mov	r0, sl
 8013850:	ec49 8b10 	vmov	d0, r8, r9
 8013854:	f000 fbfc 	bl	8014050 <scalbn>
 8013858:	ec57 6b10 	vmov	r6, r7, d0
 801385c:	2200      	movs	r2, #0
 801385e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013862:	ee10 0a10 	vmov	r0, s0
 8013866:	4639      	mov	r1, r7
 8013868:	f7ec fec6 	bl	80005f8 <__aeabi_dmul>
 801386c:	ec41 0b10 	vmov	d0, r0, r1
 8013870:	f000 fb66 	bl	8013f40 <floor>
 8013874:	2200      	movs	r2, #0
 8013876:	ec51 0b10 	vmov	r0, r1, d0
 801387a:	4b7e      	ldr	r3, [pc, #504]	; (8013a74 <__kernel_rem_pio2+0x32c>)
 801387c:	f7ec febc 	bl	80005f8 <__aeabi_dmul>
 8013880:	4602      	mov	r2, r0
 8013882:	460b      	mov	r3, r1
 8013884:	4630      	mov	r0, r6
 8013886:	4639      	mov	r1, r7
 8013888:	f7ec fcfe 	bl	8000288 <__aeabi_dsub>
 801388c:	460f      	mov	r7, r1
 801388e:	4606      	mov	r6, r0
 8013890:	f7ed f962 	bl	8000b58 <__aeabi_d2iz>
 8013894:	9006      	str	r0, [sp, #24]
 8013896:	f7ec fe45 	bl	8000524 <__aeabi_i2d>
 801389a:	4602      	mov	r2, r0
 801389c:	460b      	mov	r3, r1
 801389e:	4630      	mov	r0, r6
 80138a0:	4639      	mov	r1, r7
 80138a2:	f7ec fcf1 	bl	8000288 <__aeabi_dsub>
 80138a6:	f1ba 0f00 	cmp.w	sl, #0
 80138aa:	4606      	mov	r6, r0
 80138ac:	460f      	mov	r7, r1
 80138ae:	dd6c      	ble.n	801398a <__kernel_rem_pio2+0x242>
 80138b0:	1e62      	subs	r2, r4, #1
 80138b2:	ab0e      	add	r3, sp, #56	; 0x38
 80138b4:	f1ca 0118 	rsb	r1, sl, #24
 80138b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80138bc:	9d06      	ldr	r5, [sp, #24]
 80138be:	fa40 f301 	asr.w	r3, r0, r1
 80138c2:	441d      	add	r5, r3
 80138c4:	408b      	lsls	r3, r1
 80138c6:	1ac0      	subs	r0, r0, r3
 80138c8:	ab0e      	add	r3, sp, #56	; 0x38
 80138ca:	9506      	str	r5, [sp, #24]
 80138cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80138d0:	f1ca 0317 	rsb	r3, sl, #23
 80138d4:	fa40 f303 	asr.w	r3, r0, r3
 80138d8:	9302      	str	r3, [sp, #8]
 80138da:	9b02      	ldr	r3, [sp, #8]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	dd62      	ble.n	80139a6 <__kernel_rem_pio2+0x25e>
 80138e0:	9b06      	ldr	r3, [sp, #24]
 80138e2:	2200      	movs	r2, #0
 80138e4:	3301      	adds	r3, #1
 80138e6:	9306      	str	r3, [sp, #24]
 80138e8:	4615      	mov	r5, r2
 80138ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80138ee:	4294      	cmp	r4, r2
 80138f0:	f300 8095 	bgt.w	8013a1e <__kernel_rem_pio2+0x2d6>
 80138f4:	f1ba 0f00 	cmp.w	sl, #0
 80138f8:	dd07      	ble.n	801390a <__kernel_rem_pio2+0x1c2>
 80138fa:	f1ba 0f01 	cmp.w	sl, #1
 80138fe:	f000 80a2 	beq.w	8013a46 <__kernel_rem_pio2+0x2fe>
 8013902:	f1ba 0f02 	cmp.w	sl, #2
 8013906:	f000 80c1 	beq.w	8013a8c <__kernel_rem_pio2+0x344>
 801390a:	9b02      	ldr	r3, [sp, #8]
 801390c:	2b02      	cmp	r3, #2
 801390e:	d14a      	bne.n	80139a6 <__kernel_rem_pio2+0x25e>
 8013910:	4632      	mov	r2, r6
 8013912:	463b      	mov	r3, r7
 8013914:	2000      	movs	r0, #0
 8013916:	4958      	ldr	r1, [pc, #352]	; (8013a78 <__kernel_rem_pio2+0x330>)
 8013918:	f7ec fcb6 	bl	8000288 <__aeabi_dsub>
 801391c:	4606      	mov	r6, r0
 801391e:	460f      	mov	r7, r1
 8013920:	2d00      	cmp	r5, #0
 8013922:	d040      	beq.n	80139a6 <__kernel_rem_pio2+0x25e>
 8013924:	4650      	mov	r0, sl
 8013926:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013a68 <__kernel_rem_pio2+0x320>
 801392a:	f000 fb91 	bl	8014050 <scalbn>
 801392e:	4630      	mov	r0, r6
 8013930:	4639      	mov	r1, r7
 8013932:	ec53 2b10 	vmov	r2, r3, d0
 8013936:	f7ec fca7 	bl	8000288 <__aeabi_dsub>
 801393a:	4606      	mov	r6, r0
 801393c:	460f      	mov	r7, r1
 801393e:	e032      	b.n	80139a6 <__kernel_rem_pio2+0x25e>
 8013940:	2200      	movs	r2, #0
 8013942:	4b4e      	ldr	r3, [pc, #312]	; (8013a7c <__kernel_rem_pio2+0x334>)
 8013944:	4640      	mov	r0, r8
 8013946:	4649      	mov	r1, r9
 8013948:	f7ec fe56 	bl	80005f8 <__aeabi_dmul>
 801394c:	f7ed f904 	bl	8000b58 <__aeabi_d2iz>
 8013950:	f7ec fde8 	bl	8000524 <__aeabi_i2d>
 8013954:	2200      	movs	r2, #0
 8013956:	4b4a      	ldr	r3, [pc, #296]	; (8013a80 <__kernel_rem_pio2+0x338>)
 8013958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801395c:	f7ec fe4c 	bl	80005f8 <__aeabi_dmul>
 8013960:	4602      	mov	r2, r0
 8013962:	460b      	mov	r3, r1
 8013964:	4640      	mov	r0, r8
 8013966:	4649      	mov	r1, r9
 8013968:	f7ec fc8e 	bl	8000288 <__aeabi_dsub>
 801396c:	f7ed f8f4 	bl	8000b58 <__aeabi_d2iz>
 8013970:	ab0e      	add	r3, sp, #56	; 0x38
 8013972:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8013976:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801397a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801397e:	f7ec fc85 	bl	800028c <__adddf3>
 8013982:	3501      	adds	r5, #1
 8013984:	4680      	mov	r8, r0
 8013986:	4689      	mov	r9, r1
 8013988:	e75e      	b.n	8013848 <__kernel_rem_pio2+0x100>
 801398a:	d105      	bne.n	8013998 <__kernel_rem_pio2+0x250>
 801398c:	1e63      	subs	r3, r4, #1
 801398e:	aa0e      	add	r2, sp, #56	; 0x38
 8013990:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013994:	15c3      	asrs	r3, r0, #23
 8013996:	e79f      	b.n	80138d8 <__kernel_rem_pio2+0x190>
 8013998:	2200      	movs	r2, #0
 801399a:	4b3a      	ldr	r3, [pc, #232]	; (8013a84 <__kernel_rem_pio2+0x33c>)
 801399c:	f7ed f8b2 	bl	8000b04 <__aeabi_dcmpge>
 80139a0:	2800      	cmp	r0, #0
 80139a2:	d139      	bne.n	8013a18 <__kernel_rem_pio2+0x2d0>
 80139a4:	9002      	str	r0, [sp, #8]
 80139a6:	2200      	movs	r2, #0
 80139a8:	2300      	movs	r3, #0
 80139aa:	4630      	mov	r0, r6
 80139ac:	4639      	mov	r1, r7
 80139ae:	f7ed f88b 	bl	8000ac8 <__aeabi_dcmpeq>
 80139b2:	2800      	cmp	r0, #0
 80139b4:	f000 80c7 	beq.w	8013b46 <__kernel_rem_pio2+0x3fe>
 80139b8:	1e65      	subs	r5, r4, #1
 80139ba:	462b      	mov	r3, r5
 80139bc:	2200      	movs	r2, #0
 80139be:	9904      	ldr	r1, [sp, #16]
 80139c0:	428b      	cmp	r3, r1
 80139c2:	da6a      	bge.n	8013a9a <__kernel_rem_pio2+0x352>
 80139c4:	2a00      	cmp	r2, #0
 80139c6:	f000 8088 	beq.w	8013ada <__kernel_rem_pio2+0x392>
 80139ca:	ab0e      	add	r3, sp, #56	; 0x38
 80139cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80139d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	f000 80b4 	beq.w	8013b42 <__kernel_rem_pio2+0x3fa>
 80139da:	4650      	mov	r0, sl
 80139dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8013a68 <__kernel_rem_pio2+0x320>
 80139e0:	f000 fb36 	bl	8014050 <scalbn>
 80139e4:	00ec      	lsls	r4, r5, #3
 80139e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80139e8:	191e      	adds	r6, r3, r4
 80139ea:	ec59 8b10 	vmov	r8, r9, d0
 80139ee:	f106 0a08 	add.w	sl, r6, #8
 80139f2:	462f      	mov	r7, r5
 80139f4:	2f00      	cmp	r7, #0
 80139f6:	f280 80df 	bge.w	8013bb8 <__kernel_rem_pio2+0x470>
 80139fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8013a60 <__kernel_rem_pio2+0x318>
 80139fe:	f04f 0a00 	mov.w	sl, #0
 8013a02:	eba5 030a 	sub.w	r3, r5, sl
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	f2c0 810a 	blt.w	8013c20 <__kernel_rem_pio2+0x4d8>
 8013a0c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8013a88 <__kernel_rem_pio2+0x340>
 8013a10:	ec59 8b18 	vmov	r8, r9, d8
 8013a14:	2700      	movs	r7, #0
 8013a16:	e0f5      	b.n	8013c04 <__kernel_rem_pio2+0x4bc>
 8013a18:	2302      	movs	r3, #2
 8013a1a:	9302      	str	r3, [sp, #8]
 8013a1c:	e760      	b.n	80138e0 <__kernel_rem_pio2+0x198>
 8013a1e:	ab0e      	add	r3, sp, #56	; 0x38
 8013a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a24:	b94d      	cbnz	r5, 8013a3a <__kernel_rem_pio2+0x2f2>
 8013a26:	b12b      	cbz	r3, 8013a34 <__kernel_rem_pio2+0x2ec>
 8013a28:	a80e      	add	r0, sp, #56	; 0x38
 8013a2a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013a2e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013a32:	2301      	movs	r3, #1
 8013a34:	3201      	adds	r2, #1
 8013a36:	461d      	mov	r5, r3
 8013a38:	e759      	b.n	80138ee <__kernel_rem_pio2+0x1a6>
 8013a3a:	a80e      	add	r0, sp, #56	; 0x38
 8013a3c:	1acb      	subs	r3, r1, r3
 8013a3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013a42:	462b      	mov	r3, r5
 8013a44:	e7f6      	b.n	8013a34 <__kernel_rem_pio2+0x2ec>
 8013a46:	1e62      	subs	r2, r4, #1
 8013a48:	ab0e      	add	r3, sp, #56	; 0x38
 8013a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013a52:	a90e      	add	r1, sp, #56	; 0x38
 8013a54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013a58:	e757      	b.n	801390a <__kernel_rem_pio2+0x1c2>
 8013a5a:	bf00      	nop
 8013a5c:	f3af 8000 	nop.w
	...
 8013a6c:	3ff00000 	.word	0x3ff00000
 8013a70:	080157c0 	.word	0x080157c0
 8013a74:	40200000 	.word	0x40200000
 8013a78:	3ff00000 	.word	0x3ff00000
 8013a7c:	3e700000 	.word	0x3e700000
 8013a80:	41700000 	.word	0x41700000
 8013a84:	3fe00000 	.word	0x3fe00000
 8013a88:	08015780 	.word	0x08015780
 8013a8c:	1e62      	subs	r2, r4, #1
 8013a8e:	ab0e      	add	r3, sp, #56	; 0x38
 8013a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013a98:	e7db      	b.n	8013a52 <__kernel_rem_pio2+0x30a>
 8013a9a:	a90e      	add	r1, sp, #56	; 0x38
 8013a9c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013aa0:	3b01      	subs	r3, #1
 8013aa2:	430a      	orrs	r2, r1
 8013aa4:	e78b      	b.n	80139be <__kernel_rem_pio2+0x276>
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013aac:	2900      	cmp	r1, #0
 8013aae:	d0fa      	beq.n	8013aa6 <__kernel_rem_pio2+0x35e>
 8013ab0:	9a08      	ldr	r2, [sp, #32]
 8013ab2:	4422      	add	r2, r4
 8013ab4:	00d2      	lsls	r2, r2, #3
 8013ab6:	a922      	add	r1, sp, #136	; 0x88
 8013ab8:	18e3      	adds	r3, r4, r3
 8013aba:	9206      	str	r2, [sp, #24]
 8013abc:	440a      	add	r2, r1
 8013abe:	9302      	str	r3, [sp, #8]
 8013ac0:	f10b 0108 	add.w	r1, fp, #8
 8013ac4:	f102 0308 	add.w	r3, r2, #8
 8013ac8:	1c66      	adds	r6, r4, #1
 8013aca:	910a      	str	r1, [sp, #40]	; 0x28
 8013acc:	2500      	movs	r5, #0
 8013ace:	930d      	str	r3, [sp, #52]	; 0x34
 8013ad0:	9b02      	ldr	r3, [sp, #8]
 8013ad2:	42b3      	cmp	r3, r6
 8013ad4:	da04      	bge.n	8013ae0 <__kernel_rem_pio2+0x398>
 8013ad6:	461c      	mov	r4, r3
 8013ad8:	e6a6      	b.n	8013828 <__kernel_rem_pio2+0xe0>
 8013ada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013adc:	2301      	movs	r3, #1
 8013ade:	e7e3      	b.n	8013aa8 <__kernel_rem_pio2+0x360>
 8013ae0:	9b06      	ldr	r3, [sp, #24]
 8013ae2:	18ef      	adds	r7, r5, r3
 8013ae4:	ab22      	add	r3, sp, #136	; 0x88
 8013ae6:	441f      	add	r7, r3
 8013ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013aea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013aee:	f7ec fd19 	bl	8000524 <__aeabi_i2d>
 8013af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013af4:	461c      	mov	r4, r3
 8013af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013af8:	e9c7 0100 	strd	r0, r1, [r7]
 8013afc:	eb03 0b05 	add.w	fp, r3, r5
 8013b00:	2700      	movs	r7, #0
 8013b02:	f04f 0800 	mov.w	r8, #0
 8013b06:	f04f 0900 	mov.w	r9, #0
 8013b0a:	9b07      	ldr	r3, [sp, #28]
 8013b0c:	429f      	cmp	r7, r3
 8013b0e:	dd08      	ble.n	8013b22 <__kernel_rem_pio2+0x3da>
 8013b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b12:	aa72      	add	r2, sp, #456	; 0x1c8
 8013b14:	18eb      	adds	r3, r5, r3
 8013b16:	4413      	add	r3, r2
 8013b18:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8013b1c:	3601      	adds	r6, #1
 8013b1e:	3508      	adds	r5, #8
 8013b20:	e7d6      	b.n	8013ad0 <__kernel_rem_pio2+0x388>
 8013b22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013b26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013b2a:	f7ec fd65 	bl	80005f8 <__aeabi_dmul>
 8013b2e:	4602      	mov	r2, r0
 8013b30:	460b      	mov	r3, r1
 8013b32:	4640      	mov	r0, r8
 8013b34:	4649      	mov	r1, r9
 8013b36:	f7ec fba9 	bl	800028c <__adddf3>
 8013b3a:	3701      	adds	r7, #1
 8013b3c:	4680      	mov	r8, r0
 8013b3e:	4689      	mov	r9, r1
 8013b40:	e7e3      	b.n	8013b0a <__kernel_rem_pio2+0x3c2>
 8013b42:	3d01      	subs	r5, #1
 8013b44:	e741      	b.n	80139ca <__kernel_rem_pio2+0x282>
 8013b46:	f1ca 0000 	rsb	r0, sl, #0
 8013b4a:	ec47 6b10 	vmov	d0, r6, r7
 8013b4e:	f000 fa7f 	bl	8014050 <scalbn>
 8013b52:	ec57 6b10 	vmov	r6, r7, d0
 8013b56:	2200      	movs	r2, #0
 8013b58:	4b99      	ldr	r3, [pc, #612]	; (8013dc0 <__kernel_rem_pio2+0x678>)
 8013b5a:	ee10 0a10 	vmov	r0, s0
 8013b5e:	4639      	mov	r1, r7
 8013b60:	f7ec ffd0 	bl	8000b04 <__aeabi_dcmpge>
 8013b64:	b1f8      	cbz	r0, 8013ba6 <__kernel_rem_pio2+0x45e>
 8013b66:	2200      	movs	r2, #0
 8013b68:	4b96      	ldr	r3, [pc, #600]	; (8013dc4 <__kernel_rem_pio2+0x67c>)
 8013b6a:	4630      	mov	r0, r6
 8013b6c:	4639      	mov	r1, r7
 8013b6e:	f7ec fd43 	bl	80005f8 <__aeabi_dmul>
 8013b72:	f7ec fff1 	bl	8000b58 <__aeabi_d2iz>
 8013b76:	4680      	mov	r8, r0
 8013b78:	f7ec fcd4 	bl	8000524 <__aeabi_i2d>
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	4b90      	ldr	r3, [pc, #576]	; (8013dc0 <__kernel_rem_pio2+0x678>)
 8013b80:	f7ec fd3a 	bl	80005f8 <__aeabi_dmul>
 8013b84:	460b      	mov	r3, r1
 8013b86:	4602      	mov	r2, r0
 8013b88:	4639      	mov	r1, r7
 8013b8a:	4630      	mov	r0, r6
 8013b8c:	f7ec fb7c 	bl	8000288 <__aeabi_dsub>
 8013b90:	f7ec ffe2 	bl	8000b58 <__aeabi_d2iz>
 8013b94:	1c65      	adds	r5, r4, #1
 8013b96:	ab0e      	add	r3, sp, #56	; 0x38
 8013b98:	f10a 0a18 	add.w	sl, sl, #24
 8013b9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013ba0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013ba4:	e719      	b.n	80139da <__kernel_rem_pio2+0x292>
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	4639      	mov	r1, r7
 8013baa:	f7ec ffd5 	bl	8000b58 <__aeabi_d2iz>
 8013bae:	ab0e      	add	r3, sp, #56	; 0x38
 8013bb0:	4625      	mov	r5, r4
 8013bb2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013bb6:	e710      	b.n	80139da <__kernel_rem_pio2+0x292>
 8013bb8:	ab0e      	add	r3, sp, #56	; 0x38
 8013bba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013bbe:	f7ec fcb1 	bl	8000524 <__aeabi_i2d>
 8013bc2:	4642      	mov	r2, r8
 8013bc4:	464b      	mov	r3, r9
 8013bc6:	f7ec fd17 	bl	80005f8 <__aeabi_dmul>
 8013bca:	2200      	movs	r2, #0
 8013bcc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013bd0:	4b7c      	ldr	r3, [pc, #496]	; (8013dc4 <__kernel_rem_pio2+0x67c>)
 8013bd2:	4640      	mov	r0, r8
 8013bd4:	4649      	mov	r1, r9
 8013bd6:	f7ec fd0f 	bl	80005f8 <__aeabi_dmul>
 8013bda:	3f01      	subs	r7, #1
 8013bdc:	4680      	mov	r8, r0
 8013bde:	4689      	mov	r9, r1
 8013be0:	e708      	b.n	80139f4 <__kernel_rem_pio2+0x2ac>
 8013be2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8013be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8013bee:	f7ec fd03 	bl	80005f8 <__aeabi_dmul>
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	460b      	mov	r3, r1
 8013bf6:	4640      	mov	r0, r8
 8013bf8:	4649      	mov	r1, r9
 8013bfa:	f7ec fb47 	bl	800028c <__adddf3>
 8013bfe:	3701      	adds	r7, #1
 8013c00:	4680      	mov	r8, r0
 8013c02:	4689      	mov	r9, r1
 8013c04:	9b04      	ldr	r3, [sp, #16]
 8013c06:	429f      	cmp	r7, r3
 8013c08:	dc01      	bgt.n	8013c0e <__kernel_rem_pio2+0x4c6>
 8013c0a:	45ba      	cmp	sl, r7
 8013c0c:	dae9      	bge.n	8013be2 <__kernel_rem_pio2+0x49a>
 8013c0e:	ab4a      	add	r3, sp, #296	; 0x128
 8013c10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013c14:	e9c3 8900 	strd	r8, r9, [r3]
 8013c18:	f10a 0a01 	add.w	sl, sl, #1
 8013c1c:	3e08      	subs	r6, #8
 8013c1e:	e6f0      	b.n	8013a02 <__kernel_rem_pio2+0x2ba>
 8013c20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013c22:	2b03      	cmp	r3, #3
 8013c24:	d85b      	bhi.n	8013cde <__kernel_rem_pio2+0x596>
 8013c26:	e8df f003 	tbb	[pc, r3]
 8013c2a:	264a      	.short	0x264a
 8013c2c:	0226      	.short	0x0226
 8013c2e:	ab9a      	add	r3, sp, #616	; 0x268
 8013c30:	441c      	add	r4, r3
 8013c32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013c36:	46a2      	mov	sl, r4
 8013c38:	46ab      	mov	fp, r5
 8013c3a:	f1bb 0f00 	cmp.w	fp, #0
 8013c3e:	dc6c      	bgt.n	8013d1a <__kernel_rem_pio2+0x5d2>
 8013c40:	46a2      	mov	sl, r4
 8013c42:	46ab      	mov	fp, r5
 8013c44:	f1bb 0f01 	cmp.w	fp, #1
 8013c48:	f300 8086 	bgt.w	8013d58 <__kernel_rem_pio2+0x610>
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	2100      	movs	r1, #0
 8013c50:	2d01      	cmp	r5, #1
 8013c52:	f300 80a0 	bgt.w	8013d96 <__kernel_rem_pio2+0x64e>
 8013c56:	9b02      	ldr	r3, [sp, #8]
 8013c58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013c5c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f040 809e 	bne.w	8013da2 <__kernel_rem_pio2+0x65a>
 8013c66:	9b01      	ldr	r3, [sp, #4]
 8013c68:	e9c3 7800 	strd	r7, r8, [r3]
 8013c6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013c70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013c74:	e033      	b.n	8013cde <__kernel_rem_pio2+0x596>
 8013c76:	3408      	adds	r4, #8
 8013c78:	ab4a      	add	r3, sp, #296	; 0x128
 8013c7a:	441c      	add	r4, r3
 8013c7c:	462e      	mov	r6, r5
 8013c7e:	2000      	movs	r0, #0
 8013c80:	2100      	movs	r1, #0
 8013c82:	2e00      	cmp	r6, #0
 8013c84:	da3a      	bge.n	8013cfc <__kernel_rem_pio2+0x5b4>
 8013c86:	9b02      	ldr	r3, [sp, #8]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d03d      	beq.n	8013d08 <__kernel_rem_pio2+0x5c0>
 8013c8c:	4602      	mov	r2, r0
 8013c8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c92:	9c01      	ldr	r4, [sp, #4]
 8013c94:	e9c4 2300 	strd	r2, r3, [r4]
 8013c98:	4602      	mov	r2, r0
 8013c9a:	460b      	mov	r3, r1
 8013c9c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013ca0:	f7ec faf2 	bl	8000288 <__aeabi_dsub>
 8013ca4:	ae4c      	add	r6, sp, #304	; 0x130
 8013ca6:	2401      	movs	r4, #1
 8013ca8:	42a5      	cmp	r5, r4
 8013caa:	da30      	bge.n	8013d0e <__kernel_rem_pio2+0x5c6>
 8013cac:	9b02      	ldr	r3, [sp, #8]
 8013cae:	b113      	cbz	r3, 8013cb6 <__kernel_rem_pio2+0x56e>
 8013cb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	9b01      	ldr	r3, [sp, #4]
 8013cb8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013cbc:	e00f      	b.n	8013cde <__kernel_rem_pio2+0x596>
 8013cbe:	ab9a      	add	r3, sp, #616	; 0x268
 8013cc0:	441c      	add	r4, r3
 8013cc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013cc6:	2000      	movs	r0, #0
 8013cc8:	2100      	movs	r1, #0
 8013cca:	2d00      	cmp	r5, #0
 8013ccc:	da10      	bge.n	8013cf0 <__kernel_rem_pio2+0x5a8>
 8013cce:	9b02      	ldr	r3, [sp, #8]
 8013cd0:	b113      	cbz	r3, 8013cd8 <__kernel_rem_pio2+0x590>
 8013cd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	9b01      	ldr	r3, [sp, #4]
 8013cda:	e9c3 0100 	strd	r0, r1, [r3]
 8013cde:	9b06      	ldr	r3, [sp, #24]
 8013ce0:	f003 0007 	and.w	r0, r3, #7
 8013ce4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013ce8:	ecbd 8b02 	vpop	{d8}
 8013cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013cf4:	f7ec faca 	bl	800028c <__adddf3>
 8013cf8:	3d01      	subs	r5, #1
 8013cfa:	e7e6      	b.n	8013cca <__kernel_rem_pio2+0x582>
 8013cfc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013d00:	f7ec fac4 	bl	800028c <__adddf3>
 8013d04:	3e01      	subs	r6, #1
 8013d06:	e7bc      	b.n	8013c82 <__kernel_rem_pio2+0x53a>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	460b      	mov	r3, r1
 8013d0c:	e7c1      	b.n	8013c92 <__kernel_rem_pio2+0x54a>
 8013d0e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013d12:	f7ec fabb 	bl	800028c <__adddf3>
 8013d16:	3401      	adds	r4, #1
 8013d18:	e7c6      	b.n	8013ca8 <__kernel_rem_pio2+0x560>
 8013d1a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8013d1e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013d22:	4640      	mov	r0, r8
 8013d24:	ec53 2b17 	vmov	r2, r3, d7
 8013d28:	4649      	mov	r1, r9
 8013d2a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013d2e:	f7ec faad 	bl	800028c <__adddf3>
 8013d32:	4602      	mov	r2, r0
 8013d34:	460b      	mov	r3, r1
 8013d36:	4606      	mov	r6, r0
 8013d38:	460f      	mov	r7, r1
 8013d3a:	4640      	mov	r0, r8
 8013d3c:	4649      	mov	r1, r9
 8013d3e:	f7ec faa3 	bl	8000288 <__aeabi_dsub>
 8013d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d46:	f7ec faa1 	bl	800028c <__adddf3>
 8013d4a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013d4e:	e9ca 0100 	strd	r0, r1, [sl]
 8013d52:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8013d56:	e770      	b.n	8013c3a <__kernel_rem_pio2+0x4f2>
 8013d58:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8013d5c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013d60:	4630      	mov	r0, r6
 8013d62:	ec53 2b17 	vmov	r2, r3, d7
 8013d66:	4639      	mov	r1, r7
 8013d68:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013d6c:	f7ec fa8e 	bl	800028c <__adddf3>
 8013d70:	4602      	mov	r2, r0
 8013d72:	460b      	mov	r3, r1
 8013d74:	4680      	mov	r8, r0
 8013d76:	4689      	mov	r9, r1
 8013d78:	4630      	mov	r0, r6
 8013d7a:	4639      	mov	r1, r7
 8013d7c:	f7ec fa84 	bl	8000288 <__aeabi_dsub>
 8013d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d84:	f7ec fa82 	bl	800028c <__adddf3>
 8013d88:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013d8c:	e9ca 0100 	strd	r0, r1, [sl]
 8013d90:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8013d94:	e756      	b.n	8013c44 <__kernel_rem_pio2+0x4fc>
 8013d96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013d9a:	f7ec fa77 	bl	800028c <__adddf3>
 8013d9e:	3d01      	subs	r5, #1
 8013da0:	e756      	b.n	8013c50 <__kernel_rem_pio2+0x508>
 8013da2:	9b01      	ldr	r3, [sp, #4]
 8013da4:	9a01      	ldr	r2, [sp, #4]
 8013da6:	601f      	str	r7, [r3, #0]
 8013da8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013dac:	605c      	str	r4, [r3, #4]
 8013dae:	609d      	str	r5, [r3, #8]
 8013db0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013db4:	60d3      	str	r3, [r2, #12]
 8013db6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013dba:	6110      	str	r0, [r2, #16]
 8013dbc:	6153      	str	r3, [r2, #20]
 8013dbe:	e78e      	b.n	8013cde <__kernel_rem_pio2+0x596>
 8013dc0:	41700000 	.word	0x41700000
 8013dc4:	3e700000 	.word	0x3e700000

08013dc8 <__kernel_sin>:
 8013dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dcc:	ec55 4b10 	vmov	r4, r5, d0
 8013dd0:	b085      	sub	sp, #20
 8013dd2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013dd6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013dda:	ed8d 1b00 	vstr	d1, [sp]
 8013dde:	9002      	str	r0, [sp, #8]
 8013de0:	da06      	bge.n	8013df0 <__kernel_sin+0x28>
 8013de2:	ee10 0a10 	vmov	r0, s0
 8013de6:	4629      	mov	r1, r5
 8013de8:	f7ec feb6 	bl	8000b58 <__aeabi_d2iz>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d051      	beq.n	8013e94 <__kernel_sin+0xcc>
 8013df0:	4622      	mov	r2, r4
 8013df2:	462b      	mov	r3, r5
 8013df4:	4620      	mov	r0, r4
 8013df6:	4629      	mov	r1, r5
 8013df8:	f7ec fbfe 	bl	80005f8 <__aeabi_dmul>
 8013dfc:	4682      	mov	sl, r0
 8013dfe:	468b      	mov	fp, r1
 8013e00:	4602      	mov	r2, r0
 8013e02:	460b      	mov	r3, r1
 8013e04:	4620      	mov	r0, r4
 8013e06:	4629      	mov	r1, r5
 8013e08:	f7ec fbf6 	bl	80005f8 <__aeabi_dmul>
 8013e0c:	a341      	add	r3, pc, #260	; (adr r3, 8013f14 <__kernel_sin+0x14c>)
 8013e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e12:	4680      	mov	r8, r0
 8013e14:	4689      	mov	r9, r1
 8013e16:	4650      	mov	r0, sl
 8013e18:	4659      	mov	r1, fp
 8013e1a:	f7ec fbed 	bl	80005f8 <__aeabi_dmul>
 8013e1e:	a33f      	add	r3, pc, #252	; (adr r3, 8013f1c <__kernel_sin+0x154>)
 8013e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e24:	f7ec fa30 	bl	8000288 <__aeabi_dsub>
 8013e28:	4652      	mov	r2, sl
 8013e2a:	465b      	mov	r3, fp
 8013e2c:	f7ec fbe4 	bl	80005f8 <__aeabi_dmul>
 8013e30:	a33c      	add	r3, pc, #240	; (adr r3, 8013f24 <__kernel_sin+0x15c>)
 8013e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e36:	f7ec fa29 	bl	800028c <__adddf3>
 8013e3a:	4652      	mov	r2, sl
 8013e3c:	465b      	mov	r3, fp
 8013e3e:	f7ec fbdb 	bl	80005f8 <__aeabi_dmul>
 8013e42:	a33a      	add	r3, pc, #232	; (adr r3, 8013f2c <__kernel_sin+0x164>)
 8013e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e48:	f7ec fa1e 	bl	8000288 <__aeabi_dsub>
 8013e4c:	4652      	mov	r2, sl
 8013e4e:	465b      	mov	r3, fp
 8013e50:	f7ec fbd2 	bl	80005f8 <__aeabi_dmul>
 8013e54:	a337      	add	r3, pc, #220	; (adr r3, 8013f34 <__kernel_sin+0x16c>)
 8013e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e5a:	f7ec fa17 	bl	800028c <__adddf3>
 8013e5e:	9b02      	ldr	r3, [sp, #8]
 8013e60:	4606      	mov	r6, r0
 8013e62:	460f      	mov	r7, r1
 8013e64:	b9db      	cbnz	r3, 8013e9e <__kernel_sin+0xd6>
 8013e66:	4602      	mov	r2, r0
 8013e68:	460b      	mov	r3, r1
 8013e6a:	4650      	mov	r0, sl
 8013e6c:	4659      	mov	r1, fp
 8013e6e:	f7ec fbc3 	bl	80005f8 <__aeabi_dmul>
 8013e72:	a325      	add	r3, pc, #148	; (adr r3, 8013f08 <__kernel_sin+0x140>)
 8013e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e78:	f7ec fa06 	bl	8000288 <__aeabi_dsub>
 8013e7c:	4642      	mov	r2, r8
 8013e7e:	464b      	mov	r3, r9
 8013e80:	f7ec fbba 	bl	80005f8 <__aeabi_dmul>
 8013e84:	4602      	mov	r2, r0
 8013e86:	460b      	mov	r3, r1
 8013e88:	4620      	mov	r0, r4
 8013e8a:	4629      	mov	r1, r5
 8013e8c:	f7ec f9fe 	bl	800028c <__adddf3>
 8013e90:	4604      	mov	r4, r0
 8013e92:	460d      	mov	r5, r1
 8013e94:	ec45 4b10 	vmov	d0, r4, r5
 8013e98:	b005      	add	sp, #20
 8013e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	4b1b      	ldr	r3, [pc, #108]	; (8013f10 <__kernel_sin+0x148>)
 8013ea2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ea6:	f7ec fba7 	bl	80005f8 <__aeabi_dmul>
 8013eaa:	4632      	mov	r2, r6
 8013eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eb0:	463b      	mov	r3, r7
 8013eb2:	4640      	mov	r0, r8
 8013eb4:	4649      	mov	r1, r9
 8013eb6:	f7ec fb9f 	bl	80005f8 <__aeabi_dmul>
 8013eba:	4602      	mov	r2, r0
 8013ebc:	460b      	mov	r3, r1
 8013ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ec2:	f7ec f9e1 	bl	8000288 <__aeabi_dsub>
 8013ec6:	4652      	mov	r2, sl
 8013ec8:	465b      	mov	r3, fp
 8013eca:	f7ec fb95 	bl	80005f8 <__aeabi_dmul>
 8013ece:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ed2:	f7ec f9d9 	bl	8000288 <__aeabi_dsub>
 8013ed6:	a30c      	add	r3, pc, #48	; (adr r3, 8013f08 <__kernel_sin+0x140>)
 8013ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013edc:	4606      	mov	r6, r0
 8013ede:	460f      	mov	r7, r1
 8013ee0:	4640      	mov	r0, r8
 8013ee2:	4649      	mov	r1, r9
 8013ee4:	f7ec fb88 	bl	80005f8 <__aeabi_dmul>
 8013ee8:	4602      	mov	r2, r0
 8013eea:	460b      	mov	r3, r1
 8013eec:	4630      	mov	r0, r6
 8013eee:	4639      	mov	r1, r7
 8013ef0:	f7ec f9cc 	bl	800028c <__adddf3>
 8013ef4:	4602      	mov	r2, r0
 8013ef6:	460b      	mov	r3, r1
 8013ef8:	4620      	mov	r0, r4
 8013efa:	4629      	mov	r1, r5
 8013efc:	f7ec f9c4 	bl	8000288 <__aeabi_dsub>
 8013f00:	e7c6      	b.n	8013e90 <__kernel_sin+0xc8>
 8013f02:	bf00      	nop
 8013f04:	f3af 8000 	nop.w
 8013f08:	55555549 	.word	0x55555549
 8013f0c:	3fc55555 	.word	0x3fc55555
 8013f10:	3fe00000 	.word	0x3fe00000
 8013f14:	5acfd57c 	.word	0x5acfd57c
 8013f18:	3de5d93a 	.word	0x3de5d93a
 8013f1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013f20:	3e5ae5e6 	.word	0x3e5ae5e6
 8013f24:	57b1fe7d 	.word	0x57b1fe7d
 8013f28:	3ec71de3 	.word	0x3ec71de3
 8013f2c:	19c161d5 	.word	0x19c161d5
 8013f30:	3f2a01a0 	.word	0x3f2a01a0
 8013f34:	1110f8a6 	.word	0x1110f8a6
 8013f38:	3f811111 	.word	0x3f811111
 8013f3c:	00000000 	.word	0x00000000

08013f40 <floor>:
 8013f40:	ec51 0b10 	vmov	r0, r1, d0
 8013f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013f4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013f50:	2e13      	cmp	r6, #19
 8013f52:	460c      	mov	r4, r1
 8013f54:	ee10 5a10 	vmov	r5, s0
 8013f58:	4680      	mov	r8, r0
 8013f5a:	dc34      	bgt.n	8013fc6 <floor+0x86>
 8013f5c:	2e00      	cmp	r6, #0
 8013f5e:	da16      	bge.n	8013f8e <floor+0x4e>
 8013f60:	a335      	add	r3, pc, #212	; (adr r3, 8014038 <floor+0xf8>)
 8013f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f66:	f7ec f991 	bl	800028c <__adddf3>
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	f7ec fdd3 	bl	8000b18 <__aeabi_dcmpgt>
 8013f72:	b148      	cbz	r0, 8013f88 <floor+0x48>
 8013f74:	2c00      	cmp	r4, #0
 8013f76:	da59      	bge.n	801402c <floor+0xec>
 8013f78:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013f7c:	4a30      	ldr	r2, [pc, #192]	; (8014040 <floor+0x100>)
 8013f7e:	432b      	orrs	r3, r5
 8013f80:	2500      	movs	r5, #0
 8013f82:	42ab      	cmp	r3, r5
 8013f84:	bf18      	it	ne
 8013f86:	4614      	movne	r4, r2
 8013f88:	4621      	mov	r1, r4
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	e025      	b.n	8013fda <floor+0x9a>
 8013f8e:	4f2d      	ldr	r7, [pc, #180]	; (8014044 <floor+0x104>)
 8013f90:	4137      	asrs	r7, r6
 8013f92:	ea01 0307 	and.w	r3, r1, r7
 8013f96:	4303      	orrs	r3, r0
 8013f98:	d01f      	beq.n	8013fda <floor+0x9a>
 8013f9a:	a327      	add	r3, pc, #156	; (adr r3, 8014038 <floor+0xf8>)
 8013f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa0:	f7ec f974 	bl	800028c <__adddf3>
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	f7ec fdb6 	bl	8000b18 <__aeabi_dcmpgt>
 8013fac:	2800      	cmp	r0, #0
 8013fae:	d0eb      	beq.n	8013f88 <floor+0x48>
 8013fb0:	2c00      	cmp	r4, #0
 8013fb2:	bfbe      	ittt	lt
 8013fb4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013fb8:	fa43 f606 	asrlt.w	r6, r3, r6
 8013fbc:	19a4      	addlt	r4, r4, r6
 8013fbe:	ea24 0407 	bic.w	r4, r4, r7
 8013fc2:	2500      	movs	r5, #0
 8013fc4:	e7e0      	b.n	8013f88 <floor+0x48>
 8013fc6:	2e33      	cmp	r6, #51	; 0x33
 8013fc8:	dd0b      	ble.n	8013fe2 <floor+0xa2>
 8013fca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013fce:	d104      	bne.n	8013fda <floor+0x9a>
 8013fd0:	ee10 2a10 	vmov	r2, s0
 8013fd4:	460b      	mov	r3, r1
 8013fd6:	f7ec f959 	bl	800028c <__adddf3>
 8013fda:	ec41 0b10 	vmov	d0, r0, r1
 8013fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fe2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fea:	fa23 f707 	lsr.w	r7, r3, r7
 8013fee:	4207      	tst	r7, r0
 8013ff0:	d0f3      	beq.n	8013fda <floor+0x9a>
 8013ff2:	a311      	add	r3, pc, #68	; (adr r3, 8014038 <floor+0xf8>)
 8013ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ff8:	f7ec f948 	bl	800028c <__adddf3>
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	2300      	movs	r3, #0
 8014000:	f7ec fd8a 	bl	8000b18 <__aeabi_dcmpgt>
 8014004:	2800      	cmp	r0, #0
 8014006:	d0bf      	beq.n	8013f88 <floor+0x48>
 8014008:	2c00      	cmp	r4, #0
 801400a:	da02      	bge.n	8014012 <floor+0xd2>
 801400c:	2e14      	cmp	r6, #20
 801400e:	d103      	bne.n	8014018 <floor+0xd8>
 8014010:	3401      	adds	r4, #1
 8014012:	ea25 0507 	bic.w	r5, r5, r7
 8014016:	e7b7      	b.n	8013f88 <floor+0x48>
 8014018:	2301      	movs	r3, #1
 801401a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801401e:	fa03 f606 	lsl.w	r6, r3, r6
 8014022:	4435      	add	r5, r6
 8014024:	4545      	cmp	r5, r8
 8014026:	bf38      	it	cc
 8014028:	18e4      	addcc	r4, r4, r3
 801402a:	e7f2      	b.n	8014012 <floor+0xd2>
 801402c:	2500      	movs	r5, #0
 801402e:	462c      	mov	r4, r5
 8014030:	e7aa      	b.n	8013f88 <floor+0x48>
 8014032:	bf00      	nop
 8014034:	f3af 8000 	nop.w
 8014038:	8800759c 	.word	0x8800759c
 801403c:	7e37e43c 	.word	0x7e37e43c
 8014040:	bff00000 	.word	0xbff00000
 8014044:	000fffff 	.word	0x000fffff

08014048 <matherr>:
 8014048:	2000      	movs	r0, #0
 801404a:	4770      	bx	lr
 801404c:	0000      	movs	r0, r0
	...

08014050 <scalbn>:
 8014050:	b570      	push	{r4, r5, r6, lr}
 8014052:	ec55 4b10 	vmov	r4, r5, d0
 8014056:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801405a:	4606      	mov	r6, r0
 801405c:	462b      	mov	r3, r5
 801405e:	b9aa      	cbnz	r2, 801408c <scalbn+0x3c>
 8014060:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014064:	4323      	orrs	r3, r4
 8014066:	d03b      	beq.n	80140e0 <scalbn+0x90>
 8014068:	4b31      	ldr	r3, [pc, #196]	; (8014130 <scalbn+0xe0>)
 801406a:	4629      	mov	r1, r5
 801406c:	2200      	movs	r2, #0
 801406e:	ee10 0a10 	vmov	r0, s0
 8014072:	f7ec fac1 	bl	80005f8 <__aeabi_dmul>
 8014076:	4b2f      	ldr	r3, [pc, #188]	; (8014134 <scalbn+0xe4>)
 8014078:	429e      	cmp	r6, r3
 801407a:	4604      	mov	r4, r0
 801407c:	460d      	mov	r5, r1
 801407e:	da12      	bge.n	80140a6 <scalbn+0x56>
 8014080:	a327      	add	r3, pc, #156	; (adr r3, 8014120 <scalbn+0xd0>)
 8014082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014086:	f7ec fab7 	bl	80005f8 <__aeabi_dmul>
 801408a:	e009      	b.n	80140a0 <scalbn+0x50>
 801408c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014090:	428a      	cmp	r2, r1
 8014092:	d10c      	bne.n	80140ae <scalbn+0x5e>
 8014094:	ee10 2a10 	vmov	r2, s0
 8014098:	4620      	mov	r0, r4
 801409a:	4629      	mov	r1, r5
 801409c:	f7ec f8f6 	bl	800028c <__adddf3>
 80140a0:	4604      	mov	r4, r0
 80140a2:	460d      	mov	r5, r1
 80140a4:	e01c      	b.n	80140e0 <scalbn+0x90>
 80140a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80140aa:	460b      	mov	r3, r1
 80140ac:	3a36      	subs	r2, #54	; 0x36
 80140ae:	4432      	add	r2, r6
 80140b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80140b4:	428a      	cmp	r2, r1
 80140b6:	dd0b      	ble.n	80140d0 <scalbn+0x80>
 80140b8:	ec45 4b11 	vmov	d1, r4, r5
 80140bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014128 <scalbn+0xd8>
 80140c0:	f000 f917 	bl	80142f2 <copysign>
 80140c4:	a318      	add	r3, pc, #96	; (adr r3, 8014128 <scalbn+0xd8>)
 80140c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ca:	ec51 0b10 	vmov	r0, r1, d0
 80140ce:	e7da      	b.n	8014086 <scalbn+0x36>
 80140d0:	2a00      	cmp	r2, #0
 80140d2:	dd08      	ble.n	80140e6 <scalbn+0x96>
 80140d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80140d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80140dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80140e0:	ec45 4b10 	vmov	d0, r4, r5
 80140e4:	bd70      	pop	{r4, r5, r6, pc}
 80140e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80140ea:	da0d      	bge.n	8014108 <scalbn+0xb8>
 80140ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80140f0:	429e      	cmp	r6, r3
 80140f2:	ec45 4b11 	vmov	d1, r4, r5
 80140f6:	dce1      	bgt.n	80140bc <scalbn+0x6c>
 80140f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014120 <scalbn+0xd0>
 80140fc:	f000 f8f9 	bl	80142f2 <copysign>
 8014100:	a307      	add	r3, pc, #28	; (adr r3, 8014120 <scalbn+0xd0>)
 8014102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014106:	e7e0      	b.n	80140ca <scalbn+0x7a>
 8014108:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801410c:	3236      	adds	r2, #54	; 0x36
 801410e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014112:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014116:	4620      	mov	r0, r4
 8014118:	4629      	mov	r1, r5
 801411a:	2200      	movs	r2, #0
 801411c:	4b06      	ldr	r3, [pc, #24]	; (8014138 <scalbn+0xe8>)
 801411e:	e7b2      	b.n	8014086 <scalbn+0x36>
 8014120:	c2f8f359 	.word	0xc2f8f359
 8014124:	01a56e1f 	.word	0x01a56e1f
 8014128:	8800759c 	.word	0x8800759c
 801412c:	7e37e43c 	.word	0x7e37e43c
 8014130:	43500000 	.word	0x43500000
 8014134:	ffff3cb0 	.word	0xffff3cb0
 8014138:	3c900000 	.word	0x3c900000

0801413c <atanf>:
 801413c:	b538      	push	{r3, r4, r5, lr}
 801413e:	ee10 5a10 	vmov	r5, s0
 8014142:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014146:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801414a:	eef0 7a40 	vmov.f32	s15, s0
 801414e:	db10      	blt.n	8014172 <atanf+0x36>
 8014150:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014154:	dd04      	ble.n	8014160 <atanf+0x24>
 8014156:	ee70 7a00 	vadd.f32	s15, s0, s0
 801415a:	eeb0 0a67 	vmov.f32	s0, s15
 801415e:	bd38      	pop	{r3, r4, r5, pc}
 8014160:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8014298 <atanf+0x15c>
 8014164:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801429c <atanf+0x160>
 8014168:	2d00      	cmp	r5, #0
 801416a:	bfd8      	it	le
 801416c:	eef0 7a47 	vmovle.f32	s15, s14
 8014170:	e7f3      	b.n	801415a <atanf+0x1e>
 8014172:	4b4b      	ldr	r3, [pc, #300]	; (80142a0 <atanf+0x164>)
 8014174:	429c      	cmp	r4, r3
 8014176:	dc10      	bgt.n	801419a <atanf+0x5e>
 8014178:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801417c:	da0a      	bge.n	8014194 <atanf+0x58>
 801417e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80142a4 <atanf+0x168>
 8014182:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801418a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014192:	dce2      	bgt.n	801415a <atanf+0x1e>
 8014194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014198:	e013      	b.n	80141c2 <atanf+0x86>
 801419a:	f000 f8a3 	bl	80142e4 <fabsf>
 801419e:	4b42      	ldr	r3, [pc, #264]	; (80142a8 <atanf+0x16c>)
 80141a0:	429c      	cmp	r4, r3
 80141a2:	dc4f      	bgt.n	8014244 <atanf+0x108>
 80141a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80141a8:	429c      	cmp	r4, r3
 80141aa:	dc41      	bgt.n	8014230 <atanf+0xf4>
 80141ac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80141b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80141b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80141b8:	2300      	movs	r3, #0
 80141ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80141be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80141c2:	1c5a      	adds	r2, r3, #1
 80141c4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80141c8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80142ac <atanf+0x170>
 80141cc:	eddf 5a38 	vldr	s11, [pc, #224]	; 80142b0 <atanf+0x174>
 80141d0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80142b4 <atanf+0x178>
 80141d4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80141d8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80141dc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80142b8 <atanf+0x17c>
 80141e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80141e4:	eddf 5a35 	vldr	s11, [pc, #212]	; 80142bc <atanf+0x180>
 80141e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80141ec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80142c0 <atanf+0x184>
 80141f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80141f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80142c4 <atanf+0x188>
 80141f8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80141fc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80142c8 <atanf+0x18c>
 8014200:	eea6 5a87 	vfma.f32	s10, s13, s14
 8014204:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80142cc <atanf+0x190>
 8014208:	eea5 7a26 	vfma.f32	s14, s10, s13
 801420c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80142d0 <atanf+0x194>
 8014210:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014214:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80142d4 <atanf+0x198>
 8014218:	eea5 7a26 	vfma.f32	s14, s10, s13
 801421c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014220:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014228:	d121      	bne.n	801426e <atanf+0x132>
 801422a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801422e:	e794      	b.n	801415a <atanf+0x1e>
 8014230:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014234:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014238:	ee30 0a27 	vadd.f32	s0, s0, s15
 801423c:	2301      	movs	r3, #1
 801423e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014242:	e7be      	b.n	80141c2 <atanf+0x86>
 8014244:	4b24      	ldr	r3, [pc, #144]	; (80142d8 <atanf+0x19c>)
 8014246:	429c      	cmp	r4, r3
 8014248:	dc0b      	bgt.n	8014262 <atanf+0x126>
 801424a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801424e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014252:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014256:	2302      	movs	r3, #2
 8014258:	ee70 6a67 	vsub.f32	s13, s0, s15
 801425c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014260:	e7af      	b.n	80141c2 <atanf+0x86>
 8014262:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014266:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801426a:	2303      	movs	r3, #3
 801426c:	e7a9      	b.n	80141c2 <atanf+0x86>
 801426e:	4a1b      	ldr	r2, [pc, #108]	; (80142dc <atanf+0x1a0>)
 8014270:	491b      	ldr	r1, [pc, #108]	; (80142e0 <atanf+0x1a4>)
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	441a      	add	r2, r3
 8014276:	440b      	add	r3, r1
 8014278:	edd3 6a00 	vldr	s13, [r3]
 801427c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014280:	2d00      	cmp	r5, #0
 8014282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014286:	ed92 7a00 	vldr	s14, [r2]
 801428a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801428e:	bfb8      	it	lt
 8014290:	eef1 7a67 	vneglt.f32	s15, s15
 8014294:	e761      	b.n	801415a <atanf+0x1e>
 8014296:	bf00      	nop
 8014298:	bfc90fdb 	.word	0xbfc90fdb
 801429c:	3fc90fdb 	.word	0x3fc90fdb
 80142a0:	3edfffff 	.word	0x3edfffff
 80142a4:	7149f2ca 	.word	0x7149f2ca
 80142a8:	3f97ffff 	.word	0x3f97ffff
 80142ac:	3c8569d7 	.word	0x3c8569d7
 80142b0:	3d4bda59 	.word	0x3d4bda59
 80142b4:	bd6ef16b 	.word	0xbd6ef16b
 80142b8:	3d886b35 	.word	0x3d886b35
 80142bc:	3dba2e6e 	.word	0x3dba2e6e
 80142c0:	3e124925 	.word	0x3e124925
 80142c4:	3eaaaaab 	.word	0x3eaaaaab
 80142c8:	bd15a221 	.word	0xbd15a221
 80142cc:	bd9d8795 	.word	0xbd9d8795
 80142d0:	bde38e38 	.word	0xbde38e38
 80142d4:	be4ccccd 	.word	0xbe4ccccd
 80142d8:	401bffff 	.word	0x401bffff
 80142dc:	080157d0 	.word	0x080157d0
 80142e0:	080157e0 	.word	0x080157e0

080142e4 <fabsf>:
 80142e4:	ee10 3a10 	vmov	r3, s0
 80142e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80142ec:	ee00 3a10 	vmov	s0, r3
 80142f0:	4770      	bx	lr

080142f2 <copysign>:
 80142f2:	ec51 0b10 	vmov	r0, r1, d0
 80142f6:	ee11 0a90 	vmov	r0, s3
 80142fa:	ee10 2a10 	vmov	r2, s0
 80142fe:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014302:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014306:	ea41 0300 	orr.w	r3, r1, r0
 801430a:	ec43 2b10 	vmov	d0, r2, r3
 801430e:	4770      	bx	lr

08014310 <abort>:
 8014310:	b508      	push	{r3, lr}
 8014312:	2006      	movs	r0, #6
 8014314:	f000 f8f2 	bl	80144fc <raise>
 8014318:	2001      	movs	r0, #1
 801431a:	f7f5 f893 	bl	8009444 <_exit>
	...

08014320 <calloc>:
 8014320:	4b02      	ldr	r3, [pc, #8]	; (801432c <calloc+0xc>)
 8014322:	460a      	mov	r2, r1
 8014324:	4601      	mov	r1, r0
 8014326:	6818      	ldr	r0, [r3, #0]
 8014328:	f000 b83f 	b.w	80143aa <_calloc_r>
 801432c:	200000d0 	.word	0x200000d0

08014330 <__errno>:
 8014330:	4b01      	ldr	r3, [pc, #4]	; (8014338 <__errno+0x8>)
 8014332:	6818      	ldr	r0, [r3, #0]
 8014334:	4770      	bx	lr
 8014336:	bf00      	nop
 8014338:	200000d0 	.word	0x200000d0

0801433c <__libc_init_array>:
 801433c:	b570      	push	{r4, r5, r6, lr}
 801433e:	4e0d      	ldr	r6, [pc, #52]	; (8014374 <__libc_init_array+0x38>)
 8014340:	4c0d      	ldr	r4, [pc, #52]	; (8014378 <__libc_init_array+0x3c>)
 8014342:	1ba4      	subs	r4, r4, r6
 8014344:	10a4      	asrs	r4, r4, #2
 8014346:	2500      	movs	r5, #0
 8014348:	42a5      	cmp	r5, r4
 801434a:	d109      	bne.n	8014360 <__libc_init_array+0x24>
 801434c:	4e0b      	ldr	r6, [pc, #44]	; (801437c <__libc_init_array+0x40>)
 801434e:	4c0c      	ldr	r4, [pc, #48]	; (8014380 <__libc_init_array+0x44>)
 8014350:	f000 fc8a 	bl	8014c68 <_init>
 8014354:	1ba4      	subs	r4, r4, r6
 8014356:	10a4      	asrs	r4, r4, #2
 8014358:	2500      	movs	r5, #0
 801435a:	42a5      	cmp	r5, r4
 801435c:	d105      	bne.n	801436a <__libc_init_array+0x2e>
 801435e:	bd70      	pop	{r4, r5, r6, pc}
 8014360:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014364:	4798      	blx	r3
 8014366:	3501      	adds	r5, #1
 8014368:	e7ee      	b.n	8014348 <__libc_init_array+0xc>
 801436a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801436e:	4798      	blx	r3
 8014370:	3501      	adds	r5, #1
 8014372:	e7f2      	b.n	801435a <__libc_init_array+0x1e>
 8014374:	0801582c 	.word	0x0801582c
 8014378:	0801582c 	.word	0x0801582c
 801437c:	0801582c 	.word	0x0801582c
 8014380:	08015834 	.word	0x08015834

08014384 <memcpy>:
 8014384:	b510      	push	{r4, lr}
 8014386:	1e43      	subs	r3, r0, #1
 8014388:	440a      	add	r2, r1
 801438a:	4291      	cmp	r1, r2
 801438c:	d100      	bne.n	8014390 <memcpy+0xc>
 801438e:	bd10      	pop	{r4, pc}
 8014390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014398:	e7f7      	b.n	801438a <memcpy+0x6>

0801439a <memset>:
 801439a:	4402      	add	r2, r0
 801439c:	4603      	mov	r3, r0
 801439e:	4293      	cmp	r3, r2
 80143a0:	d100      	bne.n	80143a4 <memset+0xa>
 80143a2:	4770      	bx	lr
 80143a4:	f803 1b01 	strb.w	r1, [r3], #1
 80143a8:	e7f9      	b.n	801439e <memset+0x4>

080143aa <_calloc_r>:
 80143aa:	b538      	push	{r3, r4, r5, lr}
 80143ac:	fb02 f401 	mul.w	r4, r2, r1
 80143b0:	4621      	mov	r1, r4
 80143b2:	f000 f809 	bl	80143c8 <_malloc_r>
 80143b6:	4605      	mov	r5, r0
 80143b8:	b118      	cbz	r0, 80143c2 <_calloc_r+0x18>
 80143ba:	4622      	mov	r2, r4
 80143bc:	2100      	movs	r1, #0
 80143be:	f7ff ffec 	bl	801439a <memset>
 80143c2:	4628      	mov	r0, r5
 80143c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080143c8 <_malloc_r>:
 80143c8:	b570      	push	{r4, r5, r6, lr}
 80143ca:	1ccd      	adds	r5, r1, #3
 80143cc:	f025 0503 	bic.w	r5, r5, #3
 80143d0:	3508      	adds	r5, #8
 80143d2:	2d0c      	cmp	r5, #12
 80143d4:	bf38      	it	cc
 80143d6:	250c      	movcc	r5, #12
 80143d8:	2d00      	cmp	r5, #0
 80143da:	4606      	mov	r6, r0
 80143dc:	db01      	blt.n	80143e2 <_malloc_r+0x1a>
 80143de:	42a9      	cmp	r1, r5
 80143e0:	d903      	bls.n	80143ea <_malloc_r+0x22>
 80143e2:	230c      	movs	r3, #12
 80143e4:	6033      	str	r3, [r6, #0]
 80143e6:	2000      	movs	r0, #0
 80143e8:	bd70      	pop	{r4, r5, r6, pc}
 80143ea:	f000 f8cb 	bl	8014584 <__malloc_lock>
 80143ee:	4a21      	ldr	r2, [pc, #132]	; (8014474 <_malloc_r+0xac>)
 80143f0:	6814      	ldr	r4, [r2, #0]
 80143f2:	4621      	mov	r1, r4
 80143f4:	b991      	cbnz	r1, 801441c <_malloc_r+0x54>
 80143f6:	4c20      	ldr	r4, [pc, #128]	; (8014478 <_malloc_r+0xb0>)
 80143f8:	6823      	ldr	r3, [r4, #0]
 80143fa:	b91b      	cbnz	r3, 8014404 <_malloc_r+0x3c>
 80143fc:	4630      	mov	r0, r6
 80143fe:	f000 f845 	bl	801448c <_sbrk_r>
 8014402:	6020      	str	r0, [r4, #0]
 8014404:	4629      	mov	r1, r5
 8014406:	4630      	mov	r0, r6
 8014408:	f000 f840 	bl	801448c <_sbrk_r>
 801440c:	1c43      	adds	r3, r0, #1
 801440e:	d124      	bne.n	801445a <_malloc_r+0x92>
 8014410:	230c      	movs	r3, #12
 8014412:	6033      	str	r3, [r6, #0]
 8014414:	4630      	mov	r0, r6
 8014416:	f000 f8b6 	bl	8014586 <__malloc_unlock>
 801441a:	e7e4      	b.n	80143e6 <_malloc_r+0x1e>
 801441c:	680b      	ldr	r3, [r1, #0]
 801441e:	1b5b      	subs	r3, r3, r5
 8014420:	d418      	bmi.n	8014454 <_malloc_r+0x8c>
 8014422:	2b0b      	cmp	r3, #11
 8014424:	d90f      	bls.n	8014446 <_malloc_r+0x7e>
 8014426:	600b      	str	r3, [r1, #0]
 8014428:	50cd      	str	r5, [r1, r3]
 801442a:	18cc      	adds	r4, r1, r3
 801442c:	4630      	mov	r0, r6
 801442e:	f000 f8aa 	bl	8014586 <__malloc_unlock>
 8014432:	f104 000b 	add.w	r0, r4, #11
 8014436:	1d23      	adds	r3, r4, #4
 8014438:	f020 0007 	bic.w	r0, r0, #7
 801443c:	1ac3      	subs	r3, r0, r3
 801443e:	d0d3      	beq.n	80143e8 <_malloc_r+0x20>
 8014440:	425a      	negs	r2, r3
 8014442:	50e2      	str	r2, [r4, r3]
 8014444:	e7d0      	b.n	80143e8 <_malloc_r+0x20>
 8014446:	428c      	cmp	r4, r1
 8014448:	684b      	ldr	r3, [r1, #4]
 801444a:	bf16      	itet	ne
 801444c:	6063      	strne	r3, [r4, #4]
 801444e:	6013      	streq	r3, [r2, #0]
 8014450:	460c      	movne	r4, r1
 8014452:	e7eb      	b.n	801442c <_malloc_r+0x64>
 8014454:	460c      	mov	r4, r1
 8014456:	6849      	ldr	r1, [r1, #4]
 8014458:	e7cc      	b.n	80143f4 <_malloc_r+0x2c>
 801445a:	1cc4      	adds	r4, r0, #3
 801445c:	f024 0403 	bic.w	r4, r4, #3
 8014460:	42a0      	cmp	r0, r4
 8014462:	d005      	beq.n	8014470 <_malloc_r+0xa8>
 8014464:	1a21      	subs	r1, r4, r0
 8014466:	4630      	mov	r0, r6
 8014468:	f000 f810 	bl	801448c <_sbrk_r>
 801446c:	3001      	adds	r0, #1
 801446e:	d0cf      	beq.n	8014410 <_malloc_r+0x48>
 8014470:	6025      	str	r5, [r4, #0]
 8014472:	e7db      	b.n	801442c <_malloc_r+0x64>
 8014474:	20008c18 	.word	0x20008c18
 8014478:	20008c1c 	.word	0x20008c1c

0801447c <realloc>:
 801447c:	4b02      	ldr	r3, [pc, #8]	; (8014488 <realloc+0xc>)
 801447e:	460a      	mov	r2, r1
 8014480:	4601      	mov	r1, r0
 8014482:	6818      	ldr	r0, [r3, #0]
 8014484:	f000 b880 	b.w	8014588 <_realloc_r>
 8014488:	200000d0 	.word	0x200000d0

0801448c <_sbrk_r>:
 801448c:	b538      	push	{r3, r4, r5, lr}
 801448e:	4c06      	ldr	r4, [pc, #24]	; (80144a8 <_sbrk_r+0x1c>)
 8014490:	2300      	movs	r3, #0
 8014492:	4605      	mov	r5, r0
 8014494:	4608      	mov	r0, r1
 8014496:	6023      	str	r3, [r4, #0]
 8014498:	f7f4 ffde 	bl	8009458 <_sbrk>
 801449c:	1c43      	adds	r3, r0, #1
 801449e:	d102      	bne.n	80144a6 <_sbrk_r+0x1a>
 80144a0:	6823      	ldr	r3, [r4, #0]
 80144a2:	b103      	cbz	r3, 80144a6 <_sbrk_r+0x1a>
 80144a4:	602b      	str	r3, [r5, #0]
 80144a6:	bd38      	pop	{r3, r4, r5, pc}
 80144a8:	20008dc0 	.word	0x20008dc0

080144ac <_raise_r>:
 80144ac:	291f      	cmp	r1, #31
 80144ae:	b538      	push	{r3, r4, r5, lr}
 80144b0:	4604      	mov	r4, r0
 80144b2:	460d      	mov	r5, r1
 80144b4:	d904      	bls.n	80144c0 <_raise_r+0x14>
 80144b6:	2316      	movs	r3, #22
 80144b8:	6003      	str	r3, [r0, #0]
 80144ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80144be:	bd38      	pop	{r3, r4, r5, pc}
 80144c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80144c2:	b112      	cbz	r2, 80144ca <_raise_r+0x1e>
 80144c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80144c8:	b94b      	cbnz	r3, 80144de <_raise_r+0x32>
 80144ca:	4620      	mov	r0, r4
 80144cc:	f000 f830 	bl	8014530 <_getpid_r>
 80144d0:	462a      	mov	r2, r5
 80144d2:	4601      	mov	r1, r0
 80144d4:	4620      	mov	r0, r4
 80144d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80144da:	f000 b817 	b.w	801450c <_kill_r>
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d00a      	beq.n	80144f8 <_raise_r+0x4c>
 80144e2:	1c59      	adds	r1, r3, #1
 80144e4:	d103      	bne.n	80144ee <_raise_r+0x42>
 80144e6:	2316      	movs	r3, #22
 80144e8:	6003      	str	r3, [r0, #0]
 80144ea:	2001      	movs	r0, #1
 80144ec:	e7e7      	b.n	80144be <_raise_r+0x12>
 80144ee:	2400      	movs	r4, #0
 80144f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80144f4:	4628      	mov	r0, r5
 80144f6:	4798      	blx	r3
 80144f8:	2000      	movs	r0, #0
 80144fa:	e7e0      	b.n	80144be <_raise_r+0x12>

080144fc <raise>:
 80144fc:	4b02      	ldr	r3, [pc, #8]	; (8014508 <raise+0xc>)
 80144fe:	4601      	mov	r1, r0
 8014500:	6818      	ldr	r0, [r3, #0]
 8014502:	f7ff bfd3 	b.w	80144ac <_raise_r>
 8014506:	bf00      	nop
 8014508:	200000d0 	.word	0x200000d0

0801450c <_kill_r>:
 801450c:	b538      	push	{r3, r4, r5, lr}
 801450e:	4c07      	ldr	r4, [pc, #28]	; (801452c <_kill_r+0x20>)
 8014510:	2300      	movs	r3, #0
 8014512:	4605      	mov	r5, r0
 8014514:	4608      	mov	r0, r1
 8014516:	4611      	mov	r1, r2
 8014518:	6023      	str	r3, [r4, #0]
 801451a:	f7f4 ff83 	bl	8009424 <_kill>
 801451e:	1c43      	adds	r3, r0, #1
 8014520:	d102      	bne.n	8014528 <_kill_r+0x1c>
 8014522:	6823      	ldr	r3, [r4, #0]
 8014524:	b103      	cbz	r3, 8014528 <_kill_r+0x1c>
 8014526:	602b      	str	r3, [r5, #0]
 8014528:	bd38      	pop	{r3, r4, r5, pc}
 801452a:	bf00      	nop
 801452c:	20008dc0 	.word	0x20008dc0

08014530 <_getpid_r>:
 8014530:	f7f4 bf70 	b.w	8009414 <_getpid>

08014534 <siprintf>:
 8014534:	b40e      	push	{r1, r2, r3}
 8014536:	b500      	push	{lr}
 8014538:	b09c      	sub	sp, #112	; 0x70
 801453a:	ab1d      	add	r3, sp, #116	; 0x74
 801453c:	9002      	str	r0, [sp, #8]
 801453e:	9006      	str	r0, [sp, #24]
 8014540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014544:	4809      	ldr	r0, [pc, #36]	; (801456c <siprintf+0x38>)
 8014546:	9107      	str	r1, [sp, #28]
 8014548:	9104      	str	r1, [sp, #16]
 801454a:	4909      	ldr	r1, [pc, #36]	; (8014570 <siprintf+0x3c>)
 801454c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014550:	9105      	str	r1, [sp, #20]
 8014552:	6800      	ldr	r0, [r0, #0]
 8014554:	9301      	str	r3, [sp, #4]
 8014556:	a902      	add	r1, sp, #8
 8014558:	f000 f896 	bl	8014688 <_svfiprintf_r>
 801455c:	9b02      	ldr	r3, [sp, #8]
 801455e:	2200      	movs	r2, #0
 8014560:	701a      	strb	r2, [r3, #0]
 8014562:	b01c      	add	sp, #112	; 0x70
 8014564:	f85d eb04 	ldr.w	lr, [sp], #4
 8014568:	b003      	add	sp, #12
 801456a:	4770      	bx	lr
 801456c:	200000d0 	.word	0x200000d0
 8014570:	ffff0208 	.word	0xffff0208

08014574 <strcpy>:
 8014574:	4603      	mov	r3, r0
 8014576:	f811 2b01 	ldrb.w	r2, [r1], #1
 801457a:	f803 2b01 	strb.w	r2, [r3], #1
 801457e:	2a00      	cmp	r2, #0
 8014580:	d1f9      	bne.n	8014576 <strcpy+0x2>
 8014582:	4770      	bx	lr

08014584 <__malloc_lock>:
 8014584:	4770      	bx	lr

08014586 <__malloc_unlock>:
 8014586:	4770      	bx	lr

08014588 <_realloc_r>:
 8014588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801458a:	4607      	mov	r7, r0
 801458c:	4614      	mov	r4, r2
 801458e:	460e      	mov	r6, r1
 8014590:	b921      	cbnz	r1, 801459c <_realloc_r+0x14>
 8014592:	4611      	mov	r1, r2
 8014594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014598:	f7ff bf16 	b.w	80143c8 <_malloc_r>
 801459c:	b922      	cbnz	r2, 80145a8 <_realloc_r+0x20>
 801459e:	f000 fb0d 	bl	8014bbc <_free_r>
 80145a2:	4625      	mov	r5, r4
 80145a4:	4628      	mov	r0, r5
 80145a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145a8:	f000 fb56 	bl	8014c58 <_malloc_usable_size_r>
 80145ac:	42a0      	cmp	r0, r4
 80145ae:	d20f      	bcs.n	80145d0 <_realloc_r+0x48>
 80145b0:	4621      	mov	r1, r4
 80145b2:	4638      	mov	r0, r7
 80145b4:	f7ff ff08 	bl	80143c8 <_malloc_r>
 80145b8:	4605      	mov	r5, r0
 80145ba:	2800      	cmp	r0, #0
 80145bc:	d0f2      	beq.n	80145a4 <_realloc_r+0x1c>
 80145be:	4631      	mov	r1, r6
 80145c0:	4622      	mov	r2, r4
 80145c2:	f7ff fedf 	bl	8014384 <memcpy>
 80145c6:	4631      	mov	r1, r6
 80145c8:	4638      	mov	r0, r7
 80145ca:	f000 faf7 	bl	8014bbc <_free_r>
 80145ce:	e7e9      	b.n	80145a4 <_realloc_r+0x1c>
 80145d0:	4635      	mov	r5, r6
 80145d2:	e7e7      	b.n	80145a4 <_realloc_r+0x1c>

080145d4 <__ssputs_r>:
 80145d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145d8:	688e      	ldr	r6, [r1, #8]
 80145da:	429e      	cmp	r6, r3
 80145dc:	4682      	mov	sl, r0
 80145de:	460c      	mov	r4, r1
 80145e0:	4690      	mov	r8, r2
 80145e2:	4699      	mov	r9, r3
 80145e4:	d837      	bhi.n	8014656 <__ssputs_r+0x82>
 80145e6:	898a      	ldrh	r2, [r1, #12]
 80145e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80145ec:	d031      	beq.n	8014652 <__ssputs_r+0x7e>
 80145ee:	6825      	ldr	r5, [r4, #0]
 80145f0:	6909      	ldr	r1, [r1, #16]
 80145f2:	1a6f      	subs	r7, r5, r1
 80145f4:	6965      	ldr	r5, [r4, #20]
 80145f6:	2302      	movs	r3, #2
 80145f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80145fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8014600:	f109 0301 	add.w	r3, r9, #1
 8014604:	443b      	add	r3, r7
 8014606:	429d      	cmp	r5, r3
 8014608:	bf38      	it	cc
 801460a:	461d      	movcc	r5, r3
 801460c:	0553      	lsls	r3, r2, #21
 801460e:	d530      	bpl.n	8014672 <__ssputs_r+0x9e>
 8014610:	4629      	mov	r1, r5
 8014612:	f7ff fed9 	bl	80143c8 <_malloc_r>
 8014616:	4606      	mov	r6, r0
 8014618:	b950      	cbnz	r0, 8014630 <__ssputs_r+0x5c>
 801461a:	230c      	movs	r3, #12
 801461c:	f8ca 3000 	str.w	r3, [sl]
 8014620:	89a3      	ldrh	r3, [r4, #12]
 8014622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014626:	81a3      	strh	r3, [r4, #12]
 8014628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014630:	463a      	mov	r2, r7
 8014632:	6921      	ldr	r1, [r4, #16]
 8014634:	f7ff fea6 	bl	8014384 <memcpy>
 8014638:	89a3      	ldrh	r3, [r4, #12]
 801463a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801463e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014642:	81a3      	strh	r3, [r4, #12]
 8014644:	6126      	str	r6, [r4, #16]
 8014646:	6165      	str	r5, [r4, #20]
 8014648:	443e      	add	r6, r7
 801464a:	1bed      	subs	r5, r5, r7
 801464c:	6026      	str	r6, [r4, #0]
 801464e:	60a5      	str	r5, [r4, #8]
 8014650:	464e      	mov	r6, r9
 8014652:	454e      	cmp	r6, r9
 8014654:	d900      	bls.n	8014658 <__ssputs_r+0x84>
 8014656:	464e      	mov	r6, r9
 8014658:	4632      	mov	r2, r6
 801465a:	4641      	mov	r1, r8
 801465c:	6820      	ldr	r0, [r4, #0]
 801465e:	f000 fa93 	bl	8014b88 <memmove>
 8014662:	68a3      	ldr	r3, [r4, #8]
 8014664:	1b9b      	subs	r3, r3, r6
 8014666:	60a3      	str	r3, [r4, #8]
 8014668:	6823      	ldr	r3, [r4, #0]
 801466a:	441e      	add	r6, r3
 801466c:	6026      	str	r6, [r4, #0]
 801466e:	2000      	movs	r0, #0
 8014670:	e7dc      	b.n	801462c <__ssputs_r+0x58>
 8014672:	462a      	mov	r2, r5
 8014674:	f7ff ff88 	bl	8014588 <_realloc_r>
 8014678:	4606      	mov	r6, r0
 801467a:	2800      	cmp	r0, #0
 801467c:	d1e2      	bne.n	8014644 <__ssputs_r+0x70>
 801467e:	6921      	ldr	r1, [r4, #16]
 8014680:	4650      	mov	r0, sl
 8014682:	f000 fa9b 	bl	8014bbc <_free_r>
 8014686:	e7c8      	b.n	801461a <__ssputs_r+0x46>

08014688 <_svfiprintf_r>:
 8014688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801468c:	461d      	mov	r5, r3
 801468e:	898b      	ldrh	r3, [r1, #12]
 8014690:	061f      	lsls	r7, r3, #24
 8014692:	b09d      	sub	sp, #116	; 0x74
 8014694:	4680      	mov	r8, r0
 8014696:	460c      	mov	r4, r1
 8014698:	4616      	mov	r6, r2
 801469a:	d50f      	bpl.n	80146bc <_svfiprintf_r+0x34>
 801469c:	690b      	ldr	r3, [r1, #16]
 801469e:	b96b      	cbnz	r3, 80146bc <_svfiprintf_r+0x34>
 80146a0:	2140      	movs	r1, #64	; 0x40
 80146a2:	f7ff fe91 	bl	80143c8 <_malloc_r>
 80146a6:	6020      	str	r0, [r4, #0]
 80146a8:	6120      	str	r0, [r4, #16]
 80146aa:	b928      	cbnz	r0, 80146b8 <_svfiprintf_r+0x30>
 80146ac:	230c      	movs	r3, #12
 80146ae:	f8c8 3000 	str.w	r3, [r8]
 80146b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146b6:	e0c8      	b.n	801484a <_svfiprintf_r+0x1c2>
 80146b8:	2340      	movs	r3, #64	; 0x40
 80146ba:	6163      	str	r3, [r4, #20]
 80146bc:	2300      	movs	r3, #0
 80146be:	9309      	str	r3, [sp, #36]	; 0x24
 80146c0:	2320      	movs	r3, #32
 80146c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146c6:	2330      	movs	r3, #48	; 0x30
 80146c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146cc:	9503      	str	r5, [sp, #12]
 80146ce:	f04f 0b01 	mov.w	fp, #1
 80146d2:	4637      	mov	r7, r6
 80146d4:	463d      	mov	r5, r7
 80146d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80146da:	b10b      	cbz	r3, 80146e0 <_svfiprintf_r+0x58>
 80146dc:	2b25      	cmp	r3, #37	; 0x25
 80146de:	d13e      	bne.n	801475e <_svfiprintf_r+0xd6>
 80146e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80146e4:	d00b      	beq.n	80146fe <_svfiprintf_r+0x76>
 80146e6:	4653      	mov	r3, sl
 80146e8:	4632      	mov	r2, r6
 80146ea:	4621      	mov	r1, r4
 80146ec:	4640      	mov	r0, r8
 80146ee:	f7ff ff71 	bl	80145d4 <__ssputs_r>
 80146f2:	3001      	adds	r0, #1
 80146f4:	f000 80a4 	beq.w	8014840 <_svfiprintf_r+0x1b8>
 80146f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146fa:	4453      	add	r3, sl
 80146fc:	9309      	str	r3, [sp, #36]	; 0x24
 80146fe:	783b      	ldrb	r3, [r7, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	f000 809d 	beq.w	8014840 <_svfiprintf_r+0x1b8>
 8014706:	2300      	movs	r3, #0
 8014708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801470c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014710:	9304      	str	r3, [sp, #16]
 8014712:	9307      	str	r3, [sp, #28]
 8014714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014718:	931a      	str	r3, [sp, #104]	; 0x68
 801471a:	462f      	mov	r7, r5
 801471c:	2205      	movs	r2, #5
 801471e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014722:	4850      	ldr	r0, [pc, #320]	; (8014864 <_svfiprintf_r+0x1dc>)
 8014724:	f7eb fd5c 	bl	80001e0 <memchr>
 8014728:	9b04      	ldr	r3, [sp, #16]
 801472a:	b9d0      	cbnz	r0, 8014762 <_svfiprintf_r+0xda>
 801472c:	06d9      	lsls	r1, r3, #27
 801472e:	bf44      	itt	mi
 8014730:	2220      	movmi	r2, #32
 8014732:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014736:	071a      	lsls	r2, r3, #28
 8014738:	bf44      	itt	mi
 801473a:	222b      	movmi	r2, #43	; 0x2b
 801473c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014740:	782a      	ldrb	r2, [r5, #0]
 8014742:	2a2a      	cmp	r2, #42	; 0x2a
 8014744:	d015      	beq.n	8014772 <_svfiprintf_r+0xea>
 8014746:	9a07      	ldr	r2, [sp, #28]
 8014748:	462f      	mov	r7, r5
 801474a:	2000      	movs	r0, #0
 801474c:	250a      	movs	r5, #10
 801474e:	4639      	mov	r1, r7
 8014750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014754:	3b30      	subs	r3, #48	; 0x30
 8014756:	2b09      	cmp	r3, #9
 8014758:	d94d      	bls.n	80147f6 <_svfiprintf_r+0x16e>
 801475a:	b1b8      	cbz	r0, 801478c <_svfiprintf_r+0x104>
 801475c:	e00f      	b.n	801477e <_svfiprintf_r+0xf6>
 801475e:	462f      	mov	r7, r5
 8014760:	e7b8      	b.n	80146d4 <_svfiprintf_r+0x4c>
 8014762:	4a40      	ldr	r2, [pc, #256]	; (8014864 <_svfiprintf_r+0x1dc>)
 8014764:	1a80      	subs	r0, r0, r2
 8014766:	fa0b f000 	lsl.w	r0, fp, r0
 801476a:	4318      	orrs	r0, r3
 801476c:	9004      	str	r0, [sp, #16]
 801476e:	463d      	mov	r5, r7
 8014770:	e7d3      	b.n	801471a <_svfiprintf_r+0x92>
 8014772:	9a03      	ldr	r2, [sp, #12]
 8014774:	1d11      	adds	r1, r2, #4
 8014776:	6812      	ldr	r2, [r2, #0]
 8014778:	9103      	str	r1, [sp, #12]
 801477a:	2a00      	cmp	r2, #0
 801477c:	db01      	blt.n	8014782 <_svfiprintf_r+0xfa>
 801477e:	9207      	str	r2, [sp, #28]
 8014780:	e004      	b.n	801478c <_svfiprintf_r+0x104>
 8014782:	4252      	negs	r2, r2
 8014784:	f043 0302 	orr.w	r3, r3, #2
 8014788:	9207      	str	r2, [sp, #28]
 801478a:	9304      	str	r3, [sp, #16]
 801478c:	783b      	ldrb	r3, [r7, #0]
 801478e:	2b2e      	cmp	r3, #46	; 0x2e
 8014790:	d10c      	bne.n	80147ac <_svfiprintf_r+0x124>
 8014792:	787b      	ldrb	r3, [r7, #1]
 8014794:	2b2a      	cmp	r3, #42	; 0x2a
 8014796:	d133      	bne.n	8014800 <_svfiprintf_r+0x178>
 8014798:	9b03      	ldr	r3, [sp, #12]
 801479a:	1d1a      	adds	r2, r3, #4
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	9203      	str	r2, [sp, #12]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	bfb8      	it	lt
 80147a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80147a8:	3702      	adds	r7, #2
 80147aa:	9305      	str	r3, [sp, #20]
 80147ac:	4d2e      	ldr	r5, [pc, #184]	; (8014868 <_svfiprintf_r+0x1e0>)
 80147ae:	7839      	ldrb	r1, [r7, #0]
 80147b0:	2203      	movs	r2, #3
 80147b2:	4628      	mov	r0, r5
 80147b4:	f7eb fd14 	bl	80001e0 <memchr>
 80147b8:	b138      	cbz	r0, 80147ca <_svfiprintf_r+0x142>
 80147ba:	2340      	movs	r3, #64	; 0x40
 80147bc:	1b40      	subs	r0, r0, r5
 80147be:	fa03 f000 	lsl.w	r0, r3, r0
 80147c2:	9b04      	ldr	r3, [sp, #16]
 80147c4:	4303      	orrs	r3, r0
 80147c6:	3701      	adds	r7, #1
 80147c8:	9304      	str	r3, [sp, #16]
 80147ca:	7839      	ldrb	r1, [r7, #0]
 80147cc:	4827      	ldr	r0, [pc, #156]	; (801486c <_svfiprintf_r+0x1e4>)
 80147ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80147d2:	2206      	movs	r2, #6
 80147d4:	1c7e      	adds	r6, r7, #1
 80147d6:	f7eb fd03 	bl	80001e0 <memchr>
 80147da:	2800      	cmp	r0, #0
 80147dc:	d038      	beq.n	8014850 <_svfiprintf_r+0x1c8>
 80147de:	4b24      	ldr	r3, [pc, #144]	; (8014870 <_svfiprintf_r+0x1e8>)
 80147e0:	bb13      	cbnz	r3, 8014828 <_svfiprintf_r+0x1a0>
 80147e2:	9b03      	ldr	r3, [sp, #12]
 80147e4:	3307      	adds	r3, #7
 80147e6:	f023 0307 	bic.w	r3, r3, #7
 80147ea:	3308      	adds	r3, #8
 80147ec:	9303      	str	r3, [sp, #12]
 80147ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147f0:	444b      	add	r3, r9
 80147f2:	9309      	str	r3, [sp, #36]	; 0x24
 80147f4:	e76d      	b.n	80146d2 <_svfiprintf_r+0x4a>
 80147f6:	fb05 3202 	mla	r2, r5, r2, r3
 80147fa:	2001      	movs	r0, #1
 80147fc:	460f      	mov	r7, r1
 80147fe:	e7a6      	b.n	801474e <_svfiprintf_r+0xc6>
 8014800:	2300      	movs	r3, #0
 8014802:	3701      	adds	r7, #1
 8014804:	9305      	str	r3, [sp, #20]
 8014806:	4619      	mov	r1, r3
 8014808:	250a      	movs	r5, #10
 801480a:	4638      	mov	r0, r7
 801480c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014810:	3a30      	subs	r2, #48	; 0x30
 8014812:	2a09      	cmp	r2, #9
 8014814:	d903      	bls.n	801481e <_svfiprintf_r+0x196>
 8014816:	2b00      	cmp	r3, #0
 8014818:	d0c8      	beq.n	80147ac <_svfiprintf_r+0x124>
 801481a:	9105      	str	r1, [sp, #20]
 801481c:	e7c6      	b.n	80147ac <_svfiprintf_r+0x124>
 801481e:	fb05 2101 	mla	r1, r5, r1, r2
 8014822:	2301      	movs	r3, #1
 8014824:	4607      	mov	r7, r0
 8014826:	e7f0      	b.n	801480a <_svfiprintf_r+0x182>
 8014828:	ab03      	add	r3, sp, #12
 801482a:	9300      	str	r3, [sp, #0]
 801482c:	4622      	mov	r2, r4
 801482e:	4b11      	ldr	r3, [pc, #68]	; (8014874 <_svfiprintf_r+0x1ec>)
 8014830:	a904      	add	r1, sp, #16
 8014832:	4640      	mov	r0, r8
 8014834:	f3af 8000 	nop.w
 8014838:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801483c:	4681      	mov	r9, r0
 801483e:	d1d6      	bne.n	80147ee <_svfiprintf_r+0x166>
 8014840:	89a3      	ldrh	r3, [r4, #12]
 8014842:	065b      	lsls	r3, r3, #25
 8014844:	f53f af35 	bmi.w	80146b2 <_svfiprintf_r+0x2a>
 8014848:	9809      	ldr	r0, [sp, #36]	; 0x24
 801484a:	b01d      	add	sp, #116	; 0x74
 801484c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014850:	ab03      	add	r3, sp, #12
 8014852:	9300      	str	r3, [sp, #0]
 8014854:	4622      	mov	r2, r4
 8014856:	4b07      	ldr	r3, [pc, #28]	; (8014874 <_svfiprintf_r+0x1ec>)
 8014858:	a904      	add	r1, sp, #16
 801485a:	4640      	mov	r0, r8
 801485c:	f000 f882 	bl	8014964 <_printf_i>
 8014860:	e7ea      	b.n	8014838 <_svfiprintf_r+0x1b0>
 8014862:	bf00      	nop
 8014864:	080157f0 	.word	0x080157f0
 8014868:	080157f6 	.word	0x080157f6
 801486c:	080157fa 	.word	0x080157fa
 8014870:	00000000 	.word	0x00000000
 8014874:	080145d5 	.word	0x080145d5

08014878 <_printf_common>:
 8014878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801487c:	4691      	mov	r9, r2
 801487e:	461f      	mov	r7, r3
 8014880:	688a      	ldr	r2, [r1, #8]
 8014882:	690b      	ldr	r3, [r1, #16]
 8014884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014888:	4293      	cmp	r3, r2
 801488a:	bfb8      	it	lt
 801488c:	4613      	movlt	r3, r2
 801488e:	f8c9 3000 	str.w	r3, [r9]
 8014892:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014896:	4606      	mov	r6, r0
 8014898:	460c      	mov	r4, r1
 801489a:	b112      	cbz	r2, 80148a2 <_printf_common+0x2a>
 801489c:	3301      	adds	r3, #1
 801489e:	f8c9 3000 	str.w	r3, [r9]
 80148a2:	6823      	ldr	r3, [r4, #0]
 80148a4:	0699      	lsls	r1, r3, #26
 80148a6:	bf42      	ittt	mi
 80148a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80148ac:	3302      	addmi	r3, #2
 80148ae:	f8c9 3000 	strmi.w	r3, [r9]
 80148b2:	6825      	ldr	r5, [r4, #0]
 80148b4:	f015 0506 	ands.w	r5, r5, #6
 80148b8:	d107      	bne.n	80148ca <_printf_common+0x52>
 80148ba:	f104 0a19 	add.w	sl, r4, #25
 80148be:	68e3      	ldr	r3, [r4, #12]
 80148c0:	f8d9 2000 	ldr.w	r2, [r9]
 80148c4:	1a9b      	subs	r3, r3, r2
 80148c6:	42ab      	cmp	r3, r5
 80148c8:	dc28      	bgt.n	801491c <_printf_common+0xa4>
 80148ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80148ce:	6822      	ldr	r2, [r4, #0]
 80148d0:	3300      	adds	r3, #0
 80148d2:	bf18      	it	ne
 80148d4:	2301      	movne	r3, #1
 80148d6:	0692      	lsls	r2, r2, #26
 80148d8:	d42d      	bmi.n	8014936 <_printf_common+0xbe>
 80148da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148de:	4639      	mov	r1, r7
 80148e0:	4630      	mov	r0, r6
 80148e2:	47c0      	blx	r8
 80148e4:	3001      	adds	r0, #1
 80148e6:	d020      	beq.n	801492a <_printf_common+0xb2>
 80148e8:	6823      	ldr	r3, [r4, #0]
 80148ea:	68e5      	ldr	r5, [r4, #12]
 80148ec:	f8d9 2000 	ldr.w	r2, [r9]
 80148f0:	f003 0306 	and.w	r3, r3, #6
 80148f4:	2b04      	cmp	r3, #4
 80148f6:	bf08      	it	eq
 80148f8:	1aad      	subeq	r5, r5, r2
 80148fa:	68a3      	ldr	r3, [r4, #8]
 80148fc:	6922      	ldr	r2, [r4, #16]
 80148fe:	bf0c      	ite	eq
 8014900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014904:	2500      	movne	r5, #0
 8014906:	4293      	cmp	r3, r2
 8014908:	bfc4      	itt	gt
 801490a:	1a9b      	subgt	r3, r3, r2
 801490c:	18ed      	addgt	r5, r5, r3
 801490e:	f04f 0900 	mov.w	r9, #0
 8014912:	341a      	adds	r4, #26
 8014914:	454d      	cmp	r5, r9
 8014916:	d11a      	bne.n	801494e <_printf_common+0xd6>
 8014918:	2000      	movs	r0, #0
 801491a:	e008      	b.n	801492e <_printf_common+0xb6>
 801491c:	2301      	movs	r3, #1
 801491e:	4652      	mov	r2, sl
 8014920:	4639      	mov	r1, r7
 8014922:	4630      	mov	r0, r6
 8014924:	47c0      	blx	r8
 8014926:	3001      	adds	r0, #1
 8014928:	d103      	bne.n	8014932 <_printf_common+0xba>
 801492a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801492e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014932:	3501      	adds	r5, #1
 8014934:	e7c3      	b.n	80148be <_printf_common+0x46>
 8014936:	18e1      	adds	r1, r4, r3
 8014938:	1c5a      	adds	r2, r3, #1
 801493a:	2030      	movs	r0, #48	; 0x30
 801493c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014940:	4422      	add	r2, r4
 8014942:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014946:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801494a:	3302      	adds	r3, #2
 801494c:	e7c5      	b.n	80148da <_printf_common+0x62>
 801494e:	2301      	movs	r3, #1
 8014950:	4622      	mov	r2, r4
 8014952:	4639      	mov	r1, r7
 8014954:	4630      	mov	r0, r6
 8014956:	47c0      	blx	r8
 8014958:	3001      	adds	r0, #1
 801495a:	d0e6      	beq.n	801492a <_printf_common+0xb2>
 801495c:	f109 0901 	add.w	r9, r9, #1
 8014960:	e7d8      	b.n	8014914 <_printf_common+0x9c>
	...

08014964 <_printf_i>:
 8014964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014968:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801496c:	460c      	mov	r4, r1
 801496e:	7e09      	ldrb	r1, [r1, #24]
 8014970:	b085      	sub	sp, #20
 8014972:	296e      	cmp	r1, #110	; 0x6e
 8014974:	4617      	mov	r7, r2
 8014976:	4606      	mov	r6, r0
 8014978:	4698      	mov	r8, r3
 801497a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801497c:	f000 80b3 	beq.w	8014ae6 <_printf_i+0x182>
 8014980:	d822      	bhi.n	80149c8 <_printf_i+0x64>
 8014982:	2963      	cmp	r1, #99	; 0x63
 8014984:	d036      	beq.n	80149f4 <_printf_i+0x90>
 8014986:	d80a      	bhi.n	801499e <_printf_i+0x3a>
 8014988:	2900      	cmp	r1, #0
 801498a:	f000 80b9 	beq.w	8014b00 <_printf_i+0x19c>
 801498e:	2958      	cmp	r1, #88	; 0x58
 8014990:	f000 8083 	beq.w	8014a9a <_printf_i+0x136>
 8014994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014998:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801499c:	e032      	b.n	8014a04 <_printf_i+0xa0>
 801499e:	2964      	cmp	r1, #100	; 0x64
 80149a0:	d001      	beq.n	80149a6 <_printf_i+0x42>
 80149a2:	2969      	cmp	r1, #105	; 0x69
 80149a4:	d1f6      	bne.n	8014994 <_printf_i+0x30>
 80149a6:	6820      	ldr	r0, [r4, #0]
 80149a8:	6813      	ldr	r3, [r2, #0]
 80149aa:	0605      	lsls	r5, r0, #24
 80149ac:	f103 0104 	add.w	r1, r3, #4
 80149b0:	d52a      	bpl.n	8014a08 <_printf_i+0xa4>
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	6011      	str	r1, [r2, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	da03      	bge.n	80149c2 <_printf_i+0x5e>
 80149ba:	222d      	movs	r2, #45	; 0x2d
 80149bc:	425b      	negs	r3, r3
 80149be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80149c2:	486f      	ldr	r0, [pc, #444]	; (8014b80 <_printf_i+0x21c>)
 80149c4:	220a      	movs	r2, #10
 80149c6:	e039      	b.n	8014a3c <_printf_i+0xd8>
 80149c8:	2973      	cmp	r1, #115	; 0x73
 80149ca:	f000 809d 	beq.w	8014b08 <_printf_i+0x1a4>
 80149ce:	d808      	bhi.n	80149e2 <_printf_i+0x7e>
 80149d0:	296f      	cmp	r1, #111	; 0x6f
 80149d2:	d020      	beq.n	8014a16 <_printf_i+0xb2>
 80149d4:	2970      	cmp	r1, #112	; 0x70
 80149d6:	d1dd      	bne.n	8014994 <_printf_i+0x30>
 80149d8:	6823      	ldr	r3, [r4, #0]
 80149da:	f043 0320 	orr.w	r3, r3, #32
 80149de:	6023      	str	r3, [r4, #0]
 80149e0:	e003      	b.n	80149ea <_printf_i+0x86>
 80149e2:	2975      	cmp	r1, #117	; 0x75
 80149e4:	d017      	beq.n	8014a16 <_printf_i+0xb2>
 80149e6:	2978      	cmp	r1, #120	; 0x78
 80149e8:	d1d4      	bne.n	8014994 <_printf_i+0x30>
 80149ea:	2378      	movs	r3, #120	; 0x78
 80149ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80149f0:	4864      	ldr	r0, [pc, #400]	; (8014b84 <_printf_i+0x220>)
 80149f2:	e055      	b.n	8014aa0 <_printf_i+0x13c>
 80149f4:	6813      	ldr	r3, [r2, #0]
 80149f6:	1d19      	adds	r1, r3, #4
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	6011      	str	r1, [r2, #0]
 80149fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a04:	2301      	movs	r3, #1
 8014a06:	e08c      	b.n	8014b22 <_printf_i+0x1be>
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	6011      	str	r1, [r2, #0]
 8014a0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014a10:	bf18      	it	ne
 8014a12:	b21b      	sxthne	r3, r3
 8014a14:	e7cf      	b.n	80149b6 <_printf_i+0x52>
 8014a16:	6813      	ldr	r3, [r2, #0]
 8014a18:	6825      	ldr	r5, [r4, #0]
 8014a1a:	1d18      	adds	r0, r3, #4
 8014a1c:	6010      	str	r0, [r2, #0]
 8014a1e:	0628      	lsls	r0, r5, #24
 8014a20:	d501      	bpl.n	8014a26 <_printf_i+0xc2>
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	e002      	b.n	8014a2c <_printf_i+0xc8>
 8014a26:	0668      	lsls	r0, r5, #25
 8014a28:	d5fb      	bpl.n	8014a22 <_printf_i+0xbe>
 8014a2a:	881b      	ldrh	r3, [r3, #0]
 8014a2c:	4854      	ldr	r0, [pc, #336]	; (8014b80 <_printf_i+0x21c>)
 8014a2e:	296f      	cmp	r1, #111	; 0x6f
 8014a30:	bf14      	ite	ne
 8014a32:	220a      	movne	r2, #10
 8014a34:	2208      	moveq	r2, #8
 8014a36:	2100      	movs	r1, #0
 8014a38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014a3c:	6865      	ldr	r5, [r4, #4]
 8014a3e:	60a5      	str	r5, [r4, #8]
 8014a40:	2d00      	cmp	r5, #0
 8014a42:	f2c0 8095 	blt.w	8014b70 <_printf_i+0x20c>
 8014a46:	6821      	ldr	r1, [r4, #0]
 8014a48:	f021 0104 	bic.w	r1, r1, #4
 8014a4c:	6021      	str	r1, [r4, #0]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d13d      	bne.n	8014ace <_printf_i+0x16a>
 8014a52:	2d00      	cmp	r5, #0
 8014a54:	f040 808e 	bne.w	8014b74 <_printf_i+0x210>
 8014a58:	4665      	mov	r5, ip
 8014a5a:	2a08      	cmp	r2, #8
 8014a5c:	d10b      	bne.n	8014a76 <_printf_i+0x112>
 8014a5e:	6823      	ldr	r3, [r4, #0]
 8014a60:	07db      	lsls	r3, r3, #31
 8014a62:	d508      	bpl.n	8014a76 <_printf_i+0x112>
 8014a64:	6923      	ldr	r3, [r4, #16]
 8014a66:	6862      	ldr	r2, [r4, #4]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	bfde      	ittt	le
 8014a6c:	2330      	movle	r3, #48	; 0x30
 8014a6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014a72:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014a76:	ebac 0305 	sub.w	r3, ip, r5
 8014a7a:	6123      	str	r3, [r4, #16]
 8014a7c:	f8cd 8000 	str.w	r8, [sp]
 8014a80:	463b      	mov	r3, r7
 8014a82:	aa03      	add	r2, sp, #12
 8014a84:	4621      	mov	r1, r4
 8014a86:	4630      	mov	r0, r6
 8014a88:	f7ff fef6 	bl	8014878 <_printf_common>
 8014a8c:	3001      	adds	r0, #1
 8014a8e:	d14d      	bne.n	8014b2c <_printf_i+0x1c8>
 8014a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a94:	b005      	add	sp, #20
 8014a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a9a:	4839      	ldr	r0, [pc, #228]	; (8014b80 <_printf_i+0x21c>)
 8014a9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014aa0:	6813      	ldr	r3, [r2, #0]
 8014aa2:	6821      	ldr	r1, [r4, #0]
 8014aa4:	1d1d      	adds	r5, r3, #4
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	6015      	str	r5, [r2, #0]
 8014aaa:	060a      	lsls	r2, r1, #24
 8014aac:	d50b      	bpl.n	8014ac6 <_printf_i+0x162>
 8014aae:	07ca      	lsls	r2, r1, #31
 8014ab0:	bf44      	itt	mi
 8014ab2:	f041 0120 	orrmi.w	r1, r1, #32
 8014ab6:	6021      	strmi	r1, [r4, #0]
 8014ab8:	b91b      	cbnz	r3, 8014ac2 <_printf_i+0x15e>
 8014aba:	6822      	ldr	r2, [r4, #0]
 8014abc:	f022 0220 	bic.w	r2, r2, #32
 8014ac0:	6022      	str	r2, [r4, #0]
 8014ac2:	2210      	movs	r2, #16
 8014ac4:	e7b7      	b.n	8014a36 <_printf_i+0xd2>
 8014ac6:	064d      	lsls	r5, r1, #25
 8014ac8:	bf48      	it	mi
 8014aca:	b29b      	uxthmi	r3, r3
 8014acc:	e7ef      	b.n	8014aae <_printf_i+0x14a>
 8014ace:	4665      	mov	r5, ip
 8014ad0:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ad4:	fb02 3311 	mls	r3, r2, r1, r3
 8014ad8:	5cc3      	ldrb	r3, [r0, r3]
 8014ada:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014ade:	460b      	mov	r3, r1
 8014ae0:	2900      	cmp	r1, #0
 8014ae2:	d1f5      	bne.n	8014ad0 <_printf_i+0x16c>
 8014ae4:	e7b9      	b.n	8014a5a <_printf_i+0xf6>
 8014ae6:	6813      	ldr	r3, [r2, #0]
 8014ae8:	6825      	ldr	r5, [r4, #0]
 8014aea:	6961      	ldr	r1, [r4, #20]
 8014aec:	1d18      	adds	r0, r3, #4
 8014aee:	6010      	str	r0, [r2, #0]
 8014af0:	0628      	lsls	r0, r5, #24
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	d501      	bpl.n	8014afa <_printf_i+0x196>
 8014af6:	6019      	str	r1, [r3, #0]
 8014af8:	e002      	b.n	8014b00 <_printf_i+0x19c>
 8014afa:	066a      	lsls	r2, r5, #25
 8014afc:	d5fb      	bpl.n	8014af6 <_printf_i+0x192>
 8014afe:	8019      	strh	r1, [r3, #0]
 8014b00:	2300      	movs	r3, #0
 8014b02:	6123      	str	r3, [r4, #16]
 8014b04:	4665      	mov	r5, ip
 8014b06:	e7b9      	b.n	8014a7c <_printf_i+0x118>
 8014b08:	6813      	ldr	r3, [r2, #0]
 8014b0a:	1d19      	adds	r1, r3, #4
 8014b0c:	6011      	str	r1, [r2, #0]
 8014b0e:	681d      	ldr	r5, [r3, #0]
 8014b10:	6862      	ldr	r2, [r4, #4]
 8014b12:	2100      	movs	r1, #0
 8014b14:	4628      	mov	r0, r5
 8014b16:	f7eb fb63 	bl	80001e0 <memchr>
 8014b1a:	b108      	cbz	r0, 8014b20 <_printf_i+0x1bc>
 8014b1c:	1b40      	subs	r0, r0, r5
 8014b1e:	6060      	str	r0, [r4, #4]
 8014b20:	6863      	ldr	r3, [r4, #4]
 8014b22:	6123      	str	r3, [r4, #16]
 8014b24:	2300      	movs	r3, #0
 8014b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b2a:	e7a7      	b.n	8014a7c <_printf_i+0x118>
 8014b2c:	6923      	ldr	r3, [r4, #16]
 8014b2e:	462a      	mov	r2, r5
 8014b30:	4639      	mov	r1, r7
 8014b32:	4630      	mov	r0, r6
 8014b34:	47c0      	blx	r8
 8014b36:	3001      	adds	r0, #1
 8014b38:	d0aa      	beq.n	8014a90 <_printf_i+0x12c>
 8014b3a:	6823      	ldr	r3, [r4, #0]
 8014b3c:	079b      	lsls	r3, r3, #30
 8014b3e:	d413      	bmi.n	8014b68 <_printf_i+0x204>
 8014b40:	68e0      	ldr	r0, [r4, #12]
 8014b42:	9b03      	ldr	r3, [sp, #12]
 8014b44:	4298      	cmp	r0, r3
 8014b46:	bfb8      	it	lt
 8014b48:	4618      	movlt	r0, r3
 8014b4a:	e7a3      	b.n	8014a94 <_printf_i+0x130>
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	464a      	mov	r2, r9
 8014b50:	4639      	mov	r1, r7
 8014b52:	4630      	mov	r0, r6
 8014b54:	47c0      	blx	r8
 8014b56:	3001      	adds	r0, #1
 8014b58:	d09a      	beq.n	8014a90 <_printf_i+0x12c>
 8014b5a:	3501      	adds	r5, #1
 8014b5c:	68e3      	ldr	r3, [r4, #12]
 8014b5e:	9a03      	ldr	r2, [sp, #12]
 8014b60:	1a9b      	subs	r3, r3, r2
 8014b62:	42ab      	cmp	r3, r5
 8014b64:	dcf2      	bgt.n	8014b4c <_printf_i+0x1e8>
 8014b66:	e7eb      	b.n	8014b40 <_printf_i+0x1dc>
 8014b68:	2500      	movs	r5, #0
 8014b6a:	f104 0919 	add.w	r9, r4, #25
 8014b6e:	e7f5      	b.n	8014b5c <_printf_i+0x1f8>
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d1ac      	bne.n	8014ace <_printf_i+0x16a>
 8014b74:	7803      	ldrb	r3, [r0, #0]
 8014b76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b7e:	e76c      	b.n	8014a5a <_printf_i+0xf6>
 8014b80:	08015801 	.word	0x08015801
 8014b84:	08015812 	.word	0x08015812

08014b88 <memmove>:
 8014b88:	4288      	cmp	r0, r1
 8014b8a:	b510      	push	{r4, lr}
 8014b8c:	eb01 0302 	add.w	r3, r1, r2
 8014b90:	d807      	bhi.n	8014ba2 <memmove+0x1a>
 8014b92:	1e42      	subs	r2, r0, #1
 8014b94:	4299      	cmp	r1, r3
 8014b96:	d00a      	beq.n	8014bae <memmove+0x26>
 8014b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014ba0:	e7f8      	b.n	8014b94 <memmove+0xc>
 8014ba2:	4283      	cmp	r3, r0
 8014ba4:	d9f5      	bls.n	8014b92 <memmove+0xa>
 8014ba6:	1881      	adds	r1, r0, r2
 8014ba8:	1ad2      	subs	r2, r2, r3
 8014baa:	42d3      	cmn	r3, r2
 8014bac:	d100      	bne.n	8014bb0 <memmove+0x28>
 8014bae:	bd10      	pop	{r4, pc}
 8014bb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014bb4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014bb8:	e7f7      	b.n	8014baa <memmove+0x22>
	...

08014bbc <_free_r>:
 8014bbc:	b538      	push	{r3, r4, r5, lr}
 8014bbe:	4605      	mov	r5, r0
 8014bc0:	2900      	cmp	r1, #0
 8014bc2:	d045      	beq.n	8014c50 <_free_r+0x94>
 8014bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014bc8:	1f0c      	subs	r4, r1, #4
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	bfb8      	it	lt
 8014bce:	18e4      	addlt	r4, r4, r3
 8014bd0:	f7ff fcd8 	bl	8014584 <__malloc_lock>
 8014bd4:	4a1f      	ldr	r2, [pc, #124]	; (8014c54 <_free_r+0x98>)
 8014bd6:	6813      	ldr	r3, [r2, #0]
 8014bd8:	4610      	mov	r0, r2
 8014bda:	b933      	cbnz	r3, 8014bea <_free_r+0x2e>
 8014bdc:	6063      	str	r3, [r4, #4]
 8014bde:	6014      	str	r4, [r2, #0]
 8014be0:	4628      	mov	r0, r5
 8014be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014be6:	f7ff bcce 	b.w	8014586 <__malloc_unlock>
 8014bea:	42a3      	cmp	r3, r4
 8014bec:	d90c      	bls.n	8014c08 <_free_r+0x4c>
 8014bee:	6821      	ldr	r1, [r4, #0]
 8014bf0:	1862      	adds	r2, r4, r1
 8014bf2:	4293      	cmp	r3, r2
 8014bf4:	bf04      	itt	eq
 8014bf6:	681a      	ldreq	r2, [r3, #0]
 8014bf8:	685b      	ldreq	r3, [r3, #4]
 8014bfa:	6063      	str	r3, [r4, #4]
 8014bfc:	bf04      	itt	eq
 8014bfe:	1852      	addeq	r2, r2, r1
 8014c00:	6022      	streq	r2, [r4, #0]
 8014c02:	6004      	str	r4, [r0, #0]
 8014c04:	e7ec      	b.n	8014be0 <_free_r+0x24>
 8014c06:	4613      	mov	r3, r2
 8014c08:	685a      	ldr	r2, [r3, #4]
 8014c0a:	b10a      	cbz	r2, 8014c10 <_free_r+0x54>
 8014c0c:	42a2      	cmp	r2, r4
 8014c0e:	d9fa      	bls.n	8014c06 <_free_r+0x4a>
 8014c10:	6819      	ldr	r1, [r3, #0]
 8014c12:	1858      	adds	r0, r3, r1
 8014c14:	42a0      	cmp	r0, r4
 8014c16:	d10b      	bne.n	8014c30 <_free_r+0x74>
 8014c18:	6820      	ldr	r0, [r4, #0]
 8014c1a:	4401      	add	r1, r0
 8014c1c:	1858      	adds	r0, r3, r1
 8014c1e:	4282      	cmp	r2, r0
 8014c20:	6019      	str	r1, [r3, #0]
 8014c22:	d1dd      	bne.n	8014be0 <_free_r+0x24>
 8014c24:	6810      	ldr	r0, [r2, #0]
 8014c26:	6852      	ldr	r2, [r2, #4]
 8014c28:	605a      	str	r2, [r3, #4]
 8014c2a:	4401      	add	r1, r0
 8014c2c:	6019      	str	r1, [r3, #0]
 8014c2e:	e7d7      	b.n	8014be0 <_free_r+0x24>
 8014c30:	d902      	bls.n	8014c38 <_free_r+0x7c>
 8014c32:	230c      	movs	r3, #12
 8014c34:	602b      	str	r3, [r5, #0]
 8014c36:	e7d3      	b.n	8014be0 <_free_r+0x24>
 8014c38:	6820      	ldr	r0, [r4, #0]
 8014c3a:	1821      	adds	r1, r4, r0
 8014c3c:	428a      	cmp	r2, r1
 8014c3e:	bf04      	itt	eq
 8014c40:	6811      	ldreq	r1, [r2, #0]
 8014c42:	6852      	ldreq	r2, [r2, #4]
 8014c44:	6062      	str	r2, [r4, #4]
 8014c46:	bf04      	itt	eq
 8014c48:	1809      	addeq	r1, r1, r0
 8014c4a:	6021      	streq	r1, [r4, #0]
 8014c4c:	605c      	str	r4, [r3, #4]
 8014c4e:	e7c7      	b.n	8014be0 <_free_r+0x24>
 8014c50:	bd38      	pop	{r3, r4, r5, pc}
 8014c52:	bf00      	nop
 8014c54:	20008c18 	.word	0x20008c18

08014c58 <_malloc_usable_size_r>:
 8014c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c5c:	1f18      	subs	r0, r3, #4
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	bfbc      	itt	lt
 8014c62:	580b      	ldrlt	r3, [r1, r0]
 8014c64:	18c0      	addlt	r0, r0, r3
 8014c66:	4770      	bx	lr

08014c68 <_init>:
 8014c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c6a:	bf00      	nop
 8014c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c6e:	bc08      	pop	{r3}
 8014c70:	469e      	mov	lr, r3
 8014c72:	4770      	bx	lr

08014c74 <_fini>:
 8014c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c76:	bf00      	nop
 8014c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c7a:	bc08      	pop	{r3}
 8014c7c:	469e      	mov	lr, r3
 8014c7e:	4770      	bx	lr
